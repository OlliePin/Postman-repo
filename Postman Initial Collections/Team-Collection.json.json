{
  "info": {
    "_postman_id": "3f5ee637-5be1-4e18-b013-b2c91f32260d",
    "name": "B - SANITY Automation Tests",
    "description": "# Introduction\nThis Collection cover all the parts devided separately in order to be tested under isolation\n\n# Overview\nAll the tests written in this collection can be used from Developers in order to Verify everything works as expected when varios endpoints were affected with the new functionality\n\n# Authentication\nWhat is the preferred way of using the API?\n\n# Error Codes\nWhat errors and status codes can a user expect?\n\n# Rate limit\nThere are no limitation of the number of Requests",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Postman API",
      "item": [
        {
          "name": "1. The Postman API",
          "item": [
            {
              "name": "Collections",
              "item": [
                {
                  "name": "All Collections",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "292d6a42-ccc7-4681-bff0-0e56454a9e18",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json data should not have errors\", function () {",
                          "    pm.response.to.have.jsonBody();",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"response json should contain collections\", function () {",
                          "    pm.expect(pm.response.json()).to.have.property('collections').and.be.an('array');",
                          "});",
                          "",
                          "// additional tests to ensure that the relevant environment variables are present",
                          "pm.test('\"postman_api_key\" variable should be present', function () {",
                          "    pm.expect(pm.variables.get('postman_api_key')).to.be.a('string');",
                          "});"
                        ]
                      }
                    }
                  ],
                  "id": "4a6456f9-28ed-431e-8592-d05b5f35d045",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://api.getpostman.com/collections",
                    "description": "The `/collections` endpoint returns a list of all [collections](https://www.getpostman.com/docs/collections) that are accessible by you. The list includes your own collections and the collections that you have subscribed to.\n\nThe response contains an array of collection information containing the `name`, `id`, `owner` and `uid` of each collection.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "86683771-094a-442c-a1c3-0e944e044f7c",
                      "name": "Valid Response",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/collections"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"collections\": [\n        {\n            \"id\": \"dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"name\": \"Cloud API\",\n            \"owner\": \"631643\",\n            \"uid\": \"631643-dac5eac9-148d-a32e-b76b-3edee9da28f7\"\n        },\n        {\n            \"id\": \"f2e66c2e-5297-e4a5-739e-20cbb90900e3\",\n            \"name\": \"Sample Collection\",\n            \"owner\": \"631643\",\n            \"uid\": \"631643-f2e66c2e-5297-e4a5-739e-20cbb90900e3\"\n        },\n        {\n            \"id\": \"f695cab7-6878-eb55-7943-ad88e1ccfd65\",\n            \"name\": \"Postman Echo\",\n            \"owner\": \"631643\",\n            \"uid\": \"631643-f695cab7-6878-eb55-7943-ad88e1ccfd65\"\n        }\n    ]\n}"
                    }
                  ]
                },
                {
                  "name": "Single Collection ",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "6257c6f5-54d3-4bb6-b7e0-53872e871652",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json data should not have errors\", function () {",
                          "    pm.response.to.have.jsonBody();",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"response json should contain one collection\", function () {",
                          "    pm.expect(pm.response.json()).to.have.property('collection').and.be.an('object');",
                          "});",
                          "",
                          "// additional tests to ensure that the relevant environment variables are present",
                          "pm.test('\"postman_api_key\" variable should be present', function () {",
                          "    pm.expect(pm.variables.get('postman_api_key')).to.be.a('string');",
                          "});",
                          "",
                          "// you can unskip this test in case you want to have a stricter check on the selected",
                          "// environment.",
                          "pm.test.skip('\"collection_uid\" variable should be present', function () {",
                          "    pm.expect(pm.variables.get('collection_uid')).to.be.a('string');",
                          "});"
                        ]
                      }
                    }
                  ],
                  "id": "56d75710-8a89-4ec0-85f8-83d604af7461",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://api.getpostman.com/collections/{{collection_uid}}",
                    "description": "Access the contents of a collection that is accessible to you using its unique id (`uid`).\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "8d49571e-57c0-4c5e-b41e-aacbee4c97a4",
                      "name": "Valid Response",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/collections/{{collection_uid}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"collection\": {\n        \"variables\": [],\n        \"info\": {\n            \"name\": \"Sample Collection\",\n            \"_postman_id\": \"f2e66c2e-5297-e4a5-739e-20cbb90900e3\",\n            \"description\": \"This is a sample collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"name\": \"Request Headers\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"type\": \"text/javascript\",\n                            \"exec\": \"var responseJSON;\\ntry {\\n    tests[\\\"Body contains headers\\\"] = responseBody.has(\\\"headers\\\");\\n    responseJSON = JSON.parse(responseBody);\\n    tests[\\\"Header contains host\\\"] = \\\"host\\\" in responseJSON.headers;\\n    tests[\\\"Header contains test parameter sent as part of request header\\\"] = \\\"my-sample-header\\\" in responseJSON.headers;\\n}\\ncatch (e) { }\\n\\n\\n\\n\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"my-sample-header\",\n                            \"value\": \"Lorem ipsum dolor sit amet\",\n                            \"description\": \"\"\n                        }\n                    ],\n                    \"body\": {\n                        \"mode\": \"formdata\",\n                        \"formdata\": []\n                    },\n                    \"description\": \"\"\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
                    }
                  ]
                },
                {
                  "name": "Create Collection",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e2d53f54-a8ac-4bea-9f86-53663765d6f5",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json data should not have errors\", function () {",
                          "    pm.response.to.have.jsonBody();",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"response json should contain one collection\", function () {",
                          "    pm.expect(pm.response.json()).to.have.property('collection').and.be.an('object');",
                          "});",
                          "",
                          "pm.test(\"response json should return collection details\", function () {",
                          "    pm.expect(pm.response.json()).to.have.property('collection')",
                          "        .and.to.include.keys(['id', 'name', 'uid']);",
                          "});",
                          "",
                          "// additional tests to ensure that the relevant environment variables are present",
                          "pm.test('\"postman_api_key\" variable should be present', function () {",
                          "    pm.expect(pm.variables.get('postman_api_key')).to.be.a('string');",
                          "});"
                        ]
                      }
                    }
                  ],
                  "id": "99955328-e654-4881-9510-af3aad4e1726",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Sample Collection 743\",\n            \"description\": \"This is just a sample collection.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"This is a folder\",\n                \"item\": [\n                    {\n                        \"name\": \"Sample POST Request\",\n                        \"request\": {\n                            \"url\": \"https://postman-echo.com/post\",\n                            \"method\": \"POST\",\n                            \"header\": [\n                                {\n                                    \"key\": \"Content-Type\",\n                                    \"value\": \"application/json\"\n                                }\n                            ],\n                            \"body\": {\n                                \"mode\": \"raw\",\n                                \"raw\": \"{\\\"data\\\": \\\"123\\\"}\"\n                            },\n                            \"description\": \"This is a sample POST Request\"\n                        }\n                    }\n                ]\n            },\n            {\n                \"name\": \"Sample GET Request\",\n                \"request\": {\n                    \"url\": \"https://postman-echo/get\",\n                    \"method\": \"GET\",\n                    \"description\": \"This is a sample GET Request\"\n                }\n            }\n        ]\n    }\n}"
                    },
                    "url": "https://api.getpostman.com/collections",
                    "description": "This endpoint allows you to create collections using the Postman Collection v2 format. For more information about the v2 schema, check the format [here](https://schema.getpostman.com/json/collection/v2.0.0/docs/index.html).\n\nOn successful creation of the collection, the response returns the collection `name`, `id` and the `uid`.\n\nYou can also specify the context of a workspace to create a collection in directly by passing the `workspace` as a query param.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "15e78183-3f90-480c-9bca-4dbf07e24893",
                      "name": "Collection Already Exists",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"collection\": {\n        \"variables\": [],\n        \"info\": {\n            \"_postman_id\": \"ac03df1d-90f0-401d-aa57-39c395253c80\",\n            \"name\": \"Sample Collection\",\n            \"description\": \"This is just a sample collection.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"This is a folder\",\n                \"description\": \"\",\n                \"item\": [\n                    {\n                        \"name\": \"Sample POST Request\",\n                        \"request\": {\n                            \"url\": \"echo.getpostman.com/post\",\n                            \"method\": \"POST\",\n                            \"header\": [\n                                {\n                                    \"key\": \"Content-Type\",\n                                    \"value\": \"application/json\",\n                                    \"description\": \"\"\n                                }\n                            ],\n                            \"body\": {\n                                \"mode\": \"raw\",\n                                \"raw\": \"{\\n\\t\\\"data\\\": \\\"123\\\"\\n}\"\n                            },\n                            \"description\": \"This is a sample POST Request\"\n                        },\n                        \"response\": []\n                    }\n                ]\n            },\n            {\n                \"name\": \"Sample GET Request\",\n                \"request\": {\n                    \"url\": \"echo.getpostman.com/get\",\n                    \"method\": \"GET\",\n                    \"header\": [],\n                    \"body\": {\n                        \"mode\": \"formdata\",\n                        \"formdata\": []\n                    },\n                    \"description\": \"This is a sample GET Request\"\n                },\n                \"response\": []\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "https://api.getpostman.com/collections"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"instanceFoundError\",\n        \"message\": \"The specified item already exists.\",\n        \"details\": {\n            \"item\": \"collection\",\n            \"id\": \"ac03df1d-90f0-401d-aa57-39c395253c80\"\n        }\n    }\n}"
                    },
                    {
                      "id": "13ccedc8-e5c5-4ccf-9d9c-838c50ebc3b5",
                      "name": "Collection Created",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"collection\": {\n        \"variables\": [],\n        \"info\": {\n            \"name\": \"Sample Collection\",\n            \"description\": \"This is just a sample collection.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"This is a folder\",\n                \"description\": \"\",\n                \"item\": [\n                    {\n                        \"name\": \"Sample POST Request\",\n                        \"request\": {\n                            \"url\": \"echo.getpostman.com/post\",\n                            \"method\": \"POST\",\n                            \"header\": [\n                                {\n                                    \"key\": \"Content-Type\",\n                                    \"value\": \"application/json\",\n                                    \"description\": \"\"\n                                }\n                            ],\n                            \"body\": {\n                                \"mode\": \"raw\",\n                                \"raw\": \"{\\n\\t\\\"data\\\": \\\"123\\\"\\n}\"\n                            },\n                            \"description\": \"This is a sample POST Request\"\n                        },\n                        \"response\": []\n                    }\n                ]\n            },\n            {\n                \"name\": \"Sample GET Request\",\n                \"request\": {\n                    \"url\": \"echo.getpostman.com/get\",\n                    \"method\": \"GET\",\n                    \"header\": [],\n                    \"body\": {\n                        \"mode\": \"formdata\",\n                        \"formdata\": []\n                    },\n                    \"description\": \"This is a sample GET Request\"\n                },\n                \"response\": []\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "https://api.getpostman.com/collections"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n  \"collection\": {\n    \"id\": \"2412a72c-1d8e-491b-aced-93809c0e94e9\",\n    \"name\": \"Sample Collection\",\n    \"uid\": \"5852-2412a72c-1d8e-491b-aced-93809c0e94e9\"\n  }\n}"
                    },
                    {
                      "id": "c3213778-6be7-4f6b-9bbe-f2ba0249c41c",
                      "name": "Create Collection in a Workspace",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Sample Collection 796\",\n            \"description\": \"This is just a sample collection.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"This is a folder\",\n                \"item\": [\n                    {\n                        \"name\": \"Sample POST Request\",\n                        \"request\": {\n                            \"url\": \"https://postman-echo.com/post\",\n                            \"method\": \"POST\",\n                            \"header\": [\n                                {\n                                    \"key\": \"Content-Type\",\n                                    \"value\": \"application/json\"\n                                }\n                            ],\n                            \"body\": {\n                                \"mode\": \"raw\",\n                                \"raw\": \"{\\\"data\\\": \\\"123\\\"}\"\n                            },\n                            \"description\": \"This is a sample POST Request\"\n                        }\n                    }\n                ]\n            },\n            {\n                \"name\": \"Sample GET Request\",\n                \"request\": {\n                    \"url\": \"https://postman-echo/get\",\n                    \"method\": \"GET\",\n                    \"description\": \"This is a sample GET Request\"\n                }\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/collections?workspace={{workspace_id}}",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "collections"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspace_id}}",
                              "description": "The workspace ID in which the collection is to be created"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"collection\": {\n        \"id\": \"2412a72c-1d8e-491b-aced-93809c0e94e9\",\n        \"name\": \"Sample Collection\",\n        \"uid\": \"5852-2412a72c-1d8e-491b-aced-93809c0e94e9\"\n    }\n}"
                    },
                    {
                      "id": "6f6e99a1-2419-4319-a1f1-029f3b8d8fa2",
                      "name": "Malformed Request",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"collection\": {\n        \"variables\": [],\n        \"info\": {\n            \"description\": \"This is just a sample collection.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"This is a folder\",\n                \"description\": \"\",\n                \"item\": [\n                    {\n                        \"name\": \"Sample POST Request\",\n                        \"request\": {\n                            \"url\": \"echo.getpostman.com/post\",\n                            \"method\": \"POST\",\n                            \"header\": [\n                                {\n                                    \"key\": \"Content-Type\",\n                                    \"value\": \"application/json\",\n                                    \"description\": \"\"\n                                }\n                            ],\n                            \"body\": {\n                                \"mode\": \"raw\",\n                                \"raw\": \"{\\n\\t\\\"data\\\": \\\"123\\\"\\n}\"\n                            },\n                            \"description\": \"This is a sample POST Request\"\n                        },\n                        \"response\": []\n                    }\n                ]\n            },\n            {\n                \"name\": \"Sample GET Request\",\n                \"request\": {\n                    \"url\": \"echo.getpostman.com/get\",\n                    \"method\": \"GET\",\n                    \"header\": [],\n                    \"body\": {\n                        \"mode\": \"formdata\",\n                        \"formdata\": []\n                    },\n                    \"description\": \"This is a sample GET Request\"\n                },\n                \"response\": []\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "https://api.getpostman.com/collections"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"malformedRequestError\",\n        \"message\": \"Missing required property: name at info\"\n    }\n}"
                    }
                  ]
                },
                {
                  "name": "Update Collection",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9b2b602a-1228-425b-bff2-6e252bcca7e1",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json data should not have errors\", function () {",
                          "    pm.response.to.have.jsonBody();",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"response json should contain one collection\", function () {",
                          "    pm.expect(pm.response.json()).to.have.property('collection').and.be.an('object');",
                          "});",
                          "",
                          "// additional tests to ensure that the relevant environment variables are present",
                          "pm.test('\"postman_api_key\" variable should be present', function () {",
                          "    pm.expect(pm.variables.get('postman_api_key')).to.be.a('string');",
                          "});",
                          "",
                          "// we double check the request to ensure that relevant parameters are present",
                          "pm.test(\"request body must have valid json\", function () {",
                          "    var _ = require('lodash'),",
                          "        requestJSON = JSON.parse(_.get(pm.request, 'body.raw', '{}')),",
                          "        collectionIdInRequestUrl = _.get(pm.request, 'url.path[1]', '').replace(/^.*?-/, '');",
                          "",
                          "    // the request body collection should have the same collection Id as sent in URL",
                          "    pm.expect(requestJSON).to.have.nested.property('collection.info._postman_id', ",
                          "        collectionIdInRequestUrl);",
                          "});",
                          "",
                          "// you can unskip this test in case you want to have a stricter check on the selected",
                          "// environment.",
                          "pm.test.skip('\"collection_uid\" variable should be present', function () {",
                          "    pm.expect(pm.variables.get('collection_uid')).to.be.a('string');",
                          "});"
                        ]
                      }
                    }
                  ],
                  "id": "98bef53e-8aca-495e-813a-237c1d2e9952",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Sample Collection 799\",\n            \"description\": \"This is just a sample collection.\",\n            \"_postman_id\": \"174bad7c-07e3-45f3-914f-36cf84e5586f\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"This is a folder\",\n                \"item\": [\n                    {\n                        \"name\": \"Sample POST Request\",\n                        \"request\": {\n                            \"url\": \"https://postman-echo.com/post\",\n                            \"method\": \"POST\",\n                            \"header\": [\n                                {\n                                    \"key\": \"Content-Type\",\n                                    \"value\": \"application/json\"\n                                }\n                            ],\n                            \"body\": {\n                                \"mode\": \"raw\",\n                                \"raw\": \"{\\\"data\\\": \\\"123\\\"}\"\n                            },\n                            \"description\": \"This is a sample POST Request\"\n                        }\n                    }\n                ]\n            },\n            {\n                \"name\": \"Sample GET Request\",\n                \"request\": {\n                    \"url\": \"https://postman-echo/get\",\n                    \"method\": \"GET\",\n                    \"description\": \"This is a sample GET Request\"\n                }\n            }\n        ]\n    }\n}"
                    },
                    "url": "https://api.getpostman.com/collections/{{collection_uid}}",
                    "description": "This endpoint allows you to update an existing collection using the Postman Collection v2 format. For more information about the v2 schema, check the format [here](https://schema.getpostman.com/json/collection/v2.0.0/docs/index.html).\n\nOn successful updation of the collection, the response returns the collection `name`, `id` and `uid`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.\n\nNote: Please be careful when trying to update the collection, as the existing collection will be replaced by the request body."
                  },
                  "response": [
                    {
                      "id": "cd9373ba-2f3c-4756-a81f-78d8b9a8c84e",
                      "name": "Collection Not Found",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"collection\": {\n        \"variables\": [],\n        \"info\": {\n            \"name\": \"Sample Collection\",\n            \"_postman_id\": \"1d3daef4-2037-4584-ab86-bafd8c8f8a54\",\n            \"description\": \"This is just a sample collection.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"This is a folder\",\n                \"description\": \"\",\n                \"item\": [\n                    {\n                        \"_postman_id\": \"b5e8d7dd-909c-4ba7-aef4-8609bc50b586\",\n                        \"name\": \"Sample POST Request\",\n                        \"request\": {\n                            \"url\": \"echo.getpostman.com/post\",\n                            \"method\": \"POST\",\n                            \"header\": [\n                                {\n                                    \"key\": \"Content-Type\",\n                                    \"value\": \"application/json\",\n                                    \"description\": \"\"\n                                }\n                            ],\n                            \"body\": {\n                                \"mode\": \"raw\",\n                                \"raw\": \"{\\n\\t\\\"data\\\": \\\"123\\\"\\n}\"\n                            },\n                            \"description\": \"This is a sample POST Request\"\n                        },\n                        \"response\": []\n                    }\n                ]\n            },\n            {\n                \"name\": \"This is a second folder\",\n                \"description\": \"This is the second folder\",\n                \"item\": []\n            },\n            {\n                \"name\": \"Sample GET Request\",\n                \"request\": {\n                    \"url\": \"echo.getpostman.com/get\",\n                    \"method\": \"GET\",\n                    \"header\": [],\n                    \"body\": {\n                        \"mode\": \"formdata\",\n                        \"formdata\": []\n                    },\n                    \"description\": \"This is a sample GET Request\"\n                },\n                \"response\": []\n            },\n            {\n                \"name\": \"This is the second request\",\n                \"request\": {\n                    \"url\": \"echo.getpostman.com/post\",\n                    \"method\": \"POST\",\n                    \"header\": [],\n                    \"body\": {\n                        \"mode\": \"formdata\",\n                        \"formdata\": []\n                    },\n                    \"description\": \"This is the second request\"\n                },\n                \"response\": []\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "https://api.getpostman.com/collections/{{collection_uid}}"
                      },
                      "status": "Not Found",
                      "code": 404,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified item does not exist.\",\n        \"details\": {\n            \"item\": \"collection\",\n            \"id\": \"1d3daef4-2037-4584-ab86-bafd8c8f8a54\"\n        }\n    }\n}"
                    },
                    {
                      "id": "941b01ee-5faf-4e45-b7e4-02b563969456",
                      "name": "Not Enough Permissions",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"collection\": {\n        \"variables\": [],\n        \"info\": {\n            \"name\": \"Sample Collection\",\n            \"_postman_id\": \"f7e2f1e3-94fb-55a6-e491-ce5cc80aa451\",\n            \"description\": \"This is just a sample collection.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"This is a folder\",\n                \"description\": \"\",\n                \"item\": [\n                    {\n                        \"_postman_id\": \"b5e8d7dd-909c-4ba7-aef4-8609bc50b586\",\n                        \"name\": \"Sample POST Request\",\n                        \"request\": {\n                            \"url\": \"echo.getpostman.com/post\",\n                            \"method\": \"POST\",\n                            \"header\": [\n                                {\n                                    \"key\": \"Content-Type\",\n                                    \"value\": \"application/json\",\n                                    \"description\": \"\"\n                                }\n                            ],\n                            \"body\": {\n                                \"mode\": \"raw\",\n                                \"raw\": \"{\\n\\t\\\"data\\\": \\\"123\\\"\\n}\"\n                            },\n                            \"description\": \"This is a sample POST Request\"\n                        },\n                        \"response\": []\n                    }\n                ]\n            },\n            {\n                \"name\": \"This is a second folder\",\n                \"description\": \"This is the second folder\",\n                \"item\": []\n            },\n            {\n                \"name\": \"Sample GET Request\",\n                \"request\": {\n                    \"url\": \"echo.getpostman.com/get\",\n                    \"method\": \"GET\",\n                    \"header\": [],\n                    \"body\": {\n                        \"mode\": \"formdata\",\n                        \"formdata\": []\n                    },\n                    \"description\": \"This is a sample GET Request\"\n                },\n                \"response\": []\n            },\n            {\n                \"name\": \"This is the second request\",\n                \"request\": {\n                    \"url\": \"echo.getpostman.com/post\",\n                    \"method\": \"POST\",\n                    \"header\": [],\n                    \"body\": {\n                        \"mode\": \"formdata\",\n                        \"formdata\": []\n                    },\n                    \"description\": \"This is the second request\"\n                },\n                \"response\": []\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "https://api.getpostman.com/collections/{{collection_uid}}"
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"forbiddenError\",\n        \"message\": \"You do not have enough permissions to perform this action.\"\n    }\n}"
                    },
                    {
                      "id": "a87ac6af-d297-4370-9bc8-1abb549dface",
                      "name": "Malformed Request",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"collection\": {\n        \"variables\": [],\n        \"info\": {\n            \"_postman_id\": \"1d3daef4-2037-4584-ab86-bafd8c8f8a55\",\n            \"description\": \"This is just a sample collection.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"This is a folder\",\n                \"description\": \"\",\n                \"item\": [\n                    {\n                        \"_postman_id\": \"b5e8d7dd-909c-4ba7-aef4-8609bc50b586\",\n                        \"name\": \"Sample POST Request\",\n                        \"request\": {\n                            \"url\": \"echo.getpostman.com/post\",\n                            \"method\": \"POST\",\n                            \"header\": [\n                                {\n                                    \"key\": \"Content-Type\",\n                                    \"value\": \"application/json\",\n                                    \"description\": \"\"\n                                }\n                            ],\n                            \"body\": {\n                                \"mode\": \"raw\",\n                                \"raw\": \"{\\n\\t\\\"data\\\": \\\"123\\\"\\n}\"\n                            },\n                            \"description\": \"This is a sample POST Request\"\n                        },\n                        \"response\": []\n                    }\n                ]\n            },\n            {\n                \"name\": \"This is a second folder\",\n                \"description\": \"This is the second folder\",\n                \"item\": []\n            },\n            {\n                \"name\": \"Sample GET Request\",\n                \"request\": {\n                    \"url\": \"echo.getpostman.com/get\",\n                    \"method\": \"GET\",\n                    \"header\": [],\n                    \"body\": {\n                        \"mode\": \"formdata\",\n                        \"formdata\": []\n                    },\n                    \"description\": \"This is a sample GET Request\"\n                },\n                \"response\": []\n            },\n            {\n                \"name\": \"This is the second request\",\n                \"request\": {\n                    \"url\": \"echo.getpostman.com/post\",\n                    \"method\": \"POST\",\n                    \"header\": [],\n                    \"body\": {\n                        \"mode\": \"formdata\",\n                        \"formdata\": []\n                    },\n                    \"description\": \"This is the second request\"\n                },\n                \"response\": []\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "https://api.getpostman.com/collections/{{collection_uid}}"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"malformedRequestError\",\n        \"message\": \"Missing required property: name at info\"\n    }\n}"
                    },
                    {
                      "id": "9022273a-d9f2-4378-b59e-25ad184b1631",
                      "name": "Collection ID Mismatch",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"collection\": {\n        \"variables\": [],\n        \"info\": {\n            \"name\": \"Sample Collection\",\n            \"_postman_id\": \"1d3daef4-2037-4584-ab86-bafd8c8f8a54\",\n            \"description\": \"This is just a sample collection.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"This is a folder\",\n                \"description\": \"\",\n                \"item\": [\n                    {\n                        \"_postman_id\": \"b5e8d7dd-909c-4ba7-aef4-8609bc50b586\",\n                        \"name\": \"Sample POST Request\",\n                        \"request\": {\n                            \"url\": \"echo.getpostman.com/post\",\n                            \"method\": \"POST\",\n                            \"header\": [\n                                {\n                                    \"key\": \"Content-Type\",\n                                    \"value\": \"application/json\",\n                                    \"description\": \"\"\n                                }\n                            ],\n                            \"body\": {\n                                \"mode\": \"raw\",\n                                \"raw\": \"{\\n\\t\\\"data\\\": \\\"123\\\"\\n}\"\n                            },\n                            \"description\": \"This is a sample POST Request\"\n                        },\n                        \"response\": []\n                    }\n                ]\n            },\n            {\n                \"name\": \"This is a second folder\",\n                \"description\": \"This is the second folder\",\n                \"item\": []\n            },\n            {\n                \"name\": \"Sample GET Request\",\n                \"request\": {\n                    \"url\": \"echo.getpostman.com/get\",\n                    \"method\": \"GET\",\n                    \"header\": [],\n                    \"body\": {\n                        \"mode\": \"formdata\",\n                        \"formdata\": []\n                    },\n                    \"description\": \"This is a sample GET Request\"\n                },\n                \"response\": []\n            },\n            {\n                \"name\": \"This is the second request\",\n                \"request\": {\n                    \"url\": \"echo.getpostman.com/post\",\n                    \"method\": \"POST\",\n                    \"header\": [],\n                    \"body\": {\n                        \"mode\": \"formdata\",\n                        \"formdata\": []\n                    },\n                    \"description\": \"This is the second request\"\n                },\n                \"response\": []\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "https://api.getpostman.com/collections/{{collection_uid}}"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"collectionMismatchError\",\n        \"message\": \"The collection ID in the path does not match the collection ID in the request body.\"\n    }\n}"
                    },
                    {
                      "id": "5d8d3b2a-81e8-499c-8322-78cdc42d598c",
                      "name": "Collection Updated",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"collection\": {\n        \"variables\": [],\n        \"info\": {\n            \"name\": \"Sample Collection\",\n            \"_postman_id\": \"1d3daef4-2037-4584-ab86-bafd8c8f8a55\",\n            \"description\": \"This is just a sample collection.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"This is a folder\",\n                \"description\": \"\",\n                \"item\": [\n                    {\n                        \"_postman_id\": \"b5e8d7dd-909c-4ba7-aef4-8609bc50b586\",\n                        \"name\": \"Sample POST Request\",\n                        \"request\": {\n                            \"url\": \"echo.getpostman.com/post\",\n                            \"method\": \"POST\",\n                            \"header\": [\n                                {\n                                    \"key\": \"Content-Type\",\n                                    \"value\": \"application/json\",\n                                    \"description\": \"\"\n                                }\n                            ],\n                            \"body\": {\n                                \"mode\": \"raw\",\n                                \"raw\": \"{\\n\\t\\\"data\\\": \\\"123\\\"\\n}\"\n                            },\n                            \"description\": \"This is a sample POST Request\"\n                        },\n                        \"response\": []\n                    }\n                ]\n            },\n            {\n                \"name\": \"This is a second folder\",\n                \"description\": \"This is the second folder\",\n                \"item\": []\n            },\n            {\n                \"name\": \"Sample GET Request\",\n                \"request\": {\n                    \"url\": \"echo.getpostman.com/get\",\n                    \"method\": \"GET\",\n                    \"header\": [],\n                    \"body\": {\n                        \"mode\": \"formdata\",\n                        \"formdata\": []\n                    },\n                    \"description\": \"This is a sample GET Request\"\n                },\n                \"response\": []\n            },\n            {\n                \"name\": \"This is the second request\",\n                \"request\": {\n                    \"url\": \"echo.getpostman.com/post\",\n                    \"method\": \"POST\",\n                    \"header\": [],\n                    \"body\": {\n                        \"mode\": \"formdata\",\n                        \"formdata\": []\n                    },\n                    \"description\": \"This is the second request\"\n                },\n                \"response\": []\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "https://api.getpostman.com/collections/{{collection_uid}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"collection\": {\n        \"id\": \"1d3daef4-2037-4584-ab86-bafd8c8f8a55\",\n        \"name\": \"Sample Collection\",\n        \"uid\": \"5852-1d3daef4-2037-4584-ab86-bafd8c8f8a55\"\n    }\n}"
                    }
                  ]
                },
                {
                  "name": "Delete Collection",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c97bc494-1bfb-4fd3-8b31-a35bd883e63a",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json data should not have errors\", function () {",
                          "    pm.response.to.have.jsonBody();",
                          "    pm.response.to.not.have.jsonBody('error');",
                          "});",
                          "",
                          "pm.test(\"response json should contain one collection\", function () {",
                          "    pm.expect(pm.response.json()).to.have.property('collection').and.be.an('object');",
                          "});",
                          "",
                          "pm.test(\"response json should return collection details\", function () {",
                          "    pm.expect(pm.response.json()).to.have.property('collection')",
                          "        .and.to.include.keys(['id', 'uid']);",
                          "});",
                          "",
                          "// additional tests to ensure that the relevant environment variables are present",
                          "pm.test('\"postman_api_key\" variable should be present', function () {",
                          "    pm.expect(pm.variables.get('postman_api_key')).to.be.a('string');",
                          "});"
                        ]
                      }
                    }
                  ],
                  "id": "9fa7d6ad-7800-4dfe-af62-d0f62d01b4ca",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "url": "https://api.getpostman.com/collections/{{collection_uid}}",
                    "description": "This endpoint allows you to delete an existing collection.\n\nOn successful deletion of the collection, the response returns the `id` and `uid`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "27c9aa44-e5d0-46ab-ba56-4285b3c31636",
                      "name": "Collection Not Found",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": "https://api.getpostman.com/collections/{{collection_uid}}"
                      },
                      "status": "Not Found",
                      "code": 404,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\"error\":{\"name\":\"instanceNotFoundError\",\"message\":\"The specified item does not exist.\",\"details\":{\"item\":\"collection\",\"id\":\"a14c6da7-afba-4a84-bf22-4febbaaced6c\"}}}"
                    },
                    {
                      "id": "e300712a-cdcf-4ae2-b4af-a65a8a0256b4",
                      "name": "Collection Deleted",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": "https://api.getpostman.com/collections/{{collection_uid}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"collection\": {\n        \"id\": \"a14c6da7-afba-4a84-bf22-4febbaaced6c\",\n        \"uid\": \"5852-a14c6da7-afba-4a84-bf22-4febbaaced6c\"\n    }\n}"
                    }
                  ]
                },
                {
                  "name": "Create a Fork",
                  "id": "8023bec0-39fe-4e7a-83ef-a608de402795",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"name\": \"Fork name\"\n}"
                    },
                    "url": {
                      "raw": "https://api.getpostman.com/collections/fork/{{collection_uid}}?workspace={{workspace_id}}",
                      "protocol": "https",
                      "host": [
                        "api",
                        "getpostman",
                        "com"
                      ],
                      "path": [
                        "collections",
                        "fork",
                        "{{collection_uid}}"
                      ],
                      "query": [
                        {
                          "key": "workspace",
                          "value": "{{workspace_id}}",
                          "description": "Workspace ID is required to create a fork"
                        }
                      ]
                    },
                    "description": "This endpoint allows you to create a fork from an existing collection.\n\nOn successful creation of the collection, the response returns the collection `name`, `id`, `uid` along with `fork` information.\n\nYou can also specify the context of a workspace to fork a collection in by passing the `workspace` as a query param.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": []
                },
                {
                  "name": "Merge a Fork",
                  "id": "45db9b26-0e65-4590-bddc-18812bda15c1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "name": "Content-Type",
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"strategy\": \"deleteSource\",\n    \"source\": \"{{source_collection_uid}}\",\n    \"destination\": \"{{destination_collection_uid}}\"\n}"
                    },
                    "url": "https://api.getpostman.com/collections/merge",
                    "description": "This endpoint allows you to merge a forked collection back to its destination collection.\n\nOn successful creation of the collection, the response returns the collection `name`, `id` and `uid`.\n\nYou need to specify the fork UID (as `source`) and destination collection UID (as `destination`) in the request body.\n\nOptionally, you can also specify the merge strategy as either `deleteSource` or `updateSourceWithDestination`. Following is an explanation of the merge strategies\n\n| Merge Strategy | Behaviour |\n| --- | --- |\n| deleteSource | Forked collection is deleted after merging |\n| updateSourceWithDestination | Forked collection is up to date with changes in destination collection |\n\nIf the collections cannot be merged (due to conflicts), appropriate error messages will be returned.\n\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": []
                }
              ],
              "id": "7c57b239-14ca-4dab-afae-d47bb55fd9dc"
            },
            {
              "name": "Environments",
              "item": [
                {
                  "name": "All Environments",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "45cfa3fa-620a-42c9-91f7-574266c823c5",
                        "type": "text/javascript",
                        "exec": [
                          "var responseJSON;",
                          "",
                          "// parse response body as JSON",
                          "try { responseJSON = JSON.parse(responseBody); } catch (e) { }",
                          "tests['received a valid response JSON'] = !!responseJSON;",
                          "!responseJSON && (responseJSON = {});",
                          "",
                          "tests['status code is 200'] = (responseCode.code === 200);",
                          "tests['response does not have errors'] = (!responseJSON.error);",
                          "",
                          "tests['response has an array of environments'] = Array.isArray(responseJSON.environments);"
                        ]
                      }
                    }
                  ],
                  "id": "ef6859d1-3cbe-4845-a54c-07b5a8408a9a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://api.getpostman.com/environments",
                    "description": "The `/environments` endpoint returns a list of all [environments](https://www.getpostman.com/docs/environments) that belong to you..\n\nThe response contains an array of environments' information containing the `name`, `id`, `owner` and `uid` of each environment.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "0e056ddb-dab5-4724-a63e-661843fe85c5",
                      "name": "Valid Response",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/environments"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"environments\": [\n        {\n            \"id\": \"357668d2-84f1-2264-438b-113095359f80\",\n            \"name\": \"Postman Cloud API\",\n            \"owner\": \"631643\",\n            \"uid\": \"631643-357668d2-84f1-2264-438b-113095359f80\"\n        },\n        {\n            \"id\": \"84a119b6-f4b1-9120-5f11-a73b17818d70\",\n            \"name\": \"Postman Cloud API.template\",\n            \"owner\": \"631643\",\n            \"uid\": \"631643-84a119b6-f4b1-9120-5f11-a73b17818d70\"\n        }\n    ]\n}"
                    }
                  ]
                },
                {
                  "name": "Single Environment",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "2c28675d-93ed-48fe-b9a5-986381761d38",
                        "type": "text/javascript",
                        "exec": [
                          "var responseJSON;",
                          "",
                          "// parse response body as JSON",
                          "try { responseJSON = JSON.parse(responseBody); } catch (e) { }",
                          "tests['received a valid response JSON'] = !!responseJSON;",
                          "!responseJSON && (responseJSON = {});",
                          "",
                          "tests['status code is 200'] = (responseCode.code === 200);",
                          "tests['response does not have errors'] = (!responseJSON.error);",
                          "",
                          "tests['response has an environment object'] = (typeof responseJSON.environment === 'object');"
                        ]
                      }
                    }
                  ],
                  "id": "8e6210c5-6282-42b1-b205-0c58a12494de",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://api.getpostman.com/environments/{{environment_uid}}",
                    "description": "Access the contents of an environment that is accessible to you using its unique id (`uid`).\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "64a09d3d-ed6f-435f-b963-92f0ec4e52b4",
                      "name": "Valid Response",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/environments/{{environment_uid}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"environment\": {\n        \"id\": \"84a119b6-f4b1-9120-5f11-a73b17818d70\",\n        \"name\": \"Postman Cloud API.template\",\n        \"values\": [\n            {\n                \"key\": \"postman_api_key\",\n                \"value\": \"\",\n                \"type\": \"text\",\n                \"enabled\": true,\n                \"hovered\": false\n            }\n        ]\n    }\n}"
                    }
                  ]
                },
                {
                  "name": "Create Environment",
                  "id": "2dd11669-17f3-4eee-a5fa-1b8f25781206",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"environment\": {\n        \"name\": \"Sample Environment Name (required)\",\n        \"values\": [\n            {\n                \"key\": \"variable_name_1\",\n                \"value\": \"The value of the variable\"\n            },\n            {\n                \"key\": \"variable_name_2\",\n                \"value\": \"\"\n            }\n        ]\n    }\n}"
                    },
                    "url": "https://api.getpostman.com/environments",
                    "description": "A sample body is added to the request that conforms to the following JSON schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"environment\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n              \"type\": \"string\",\n              \"maxLength\": 254,\n              \"minLength\": 1\n            },\n        \"values\": {\n          \"type\": \"array\",\n          \"maxItems\": 100,\n          \"additionalItems\": false,\n          \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"key\": {\n                  \"type\": \"string\",\n                  \"maxLength\": 254\n                  \"minLength\": 1\n                },\n                \"value\": { \"type\": \"string\" },\n                \"enabled\": { \"type\": \"boolean\" }\n              },\n              \"required\": [\"key\", \"value\"]\n            }\n        }\n      },\n      \"required\": [\"name\"]\n    }\n  },\n  \"required\": [\"environment\"]\n}\n```\n\nOn successful creation of the environment, the API returns the environment name and `id`.\n\nYou can also specify the context of a workspace to create an environment in directly by passing the `workspace` as a query param.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "c94e5b82-b709-4f5f-ae83-462009a998a3",
                      "name": "Create Environment in a Workspace",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"environment\": {\n        \"name\": \"Sample Environment Name (required)\",\n        \"values\": [\n            {\n                \"key\": \"variable_name_1\",\n                \"value\": \"The value of the variable\"\n            },\n            {\n                \"key\": \"variable_name_2\",\n                \"value\": \"\"\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/environments?workspace={{workspace_id}}",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "environments"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspace_id}}",
                              "description": "The workspace ID in which the environment will be created"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"environment\": {\n        \"id\": \"f158266e-306b-4702-a2b9-e4ede7878b7a\",\n        \"name\": \"Sample Environment Name (required)\",\n        \"uid\": \"5665-f158266e-306b-4702-a2b9-e4ede7878b7a\"\n    }\n}"
                    },
                    {
                      "id": "b44133e5-f5ff-47bd-bc42-7483f60509a3",
                      "name": "Failure Response",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \n}"
                        },
                        "url": "https://api.getpostman.com/environments"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"malformedRequestError\",\n        \"message\": \"Missing required property: environment\"\n    }\n}"
                    },
                    {
                      "id": "1f113ec4-c10b-4786-b07a-4099281b506f",
                      "name": "Successful Response",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"environment\": {\n        \"name\": \"Sample Environment Name (required)\",\n        \"values\": [\n            {\"key\": \"variable_name_1\", \"value\": \"The value of the variable\"},\n            {\"key\": \"variable_name_2\", \"value\": \"\"}\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "https://api.getpostman.com/environments"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"environment\": {\n        \"id\": \"f158266e-306b-4702-a2b9-e4ede7878b7a\",\n        \"name\": \"Sample Environment Name (required)\",\n        \"uid\": \"5665-f158266e-306b-4702-a2b9-e4ede7878b7a\"\n    }\n}"
                    }
                  ]
                },
                {
                  "name": "Update Environment",
                  "id": "d863a41e-abdb-448c-8590-d980c42dbf24",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"environment\": {\n        \"name\": \"New Name\",\n        \"values\": [\n            {\n                \"key\": \"name\",\n                \"value\": \"Bruce Wayne\"\n            },\n            {\n                \"key\": \"occupation\",\n                \"value\": \"Vigilante\"\n            }\n        ]\n    }\n}"
                    },
                    "url": "https://api.getpostman.com/environments/{{environment_uid}}",
                    "description": "This endpoint replaces an existing environment.\n\nA sample body is added to the request that conforms to the following JSON schema:\n\n```json\n{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"environment\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"properties\": {\n\t\t\t\t\"name\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"maxLength\": 254,\n\t\t\t\t\t\"minLength\": 1\n\t\t\t\t},\n\t\t\t\t\"values\": {\n\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\"maxItems\": 100,\n\t\t\t\t\t\"additionalItems\": false,\n\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\"key\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"maxLength\": 254,\n\t\t\t\t\t\t\t\t\"minLength\": 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"value\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"maxLength\": 254,\n\t\t\t\t\t\t\t\t\"minLength\": 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"type\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"enabled\": {\n\t\t\t\t\t\t\t\t\"type\": \"boolean\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"required\": [\n\t\t\t\t\t\t\t\"key\",\n\t\t\t\t\t\t\t\"value\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\"required\": [\n\t\t\"environment\"\n\t]\n}\n```\n\nOn successful updation of the environment, the API returns the environment name and `id`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "8bb82b2e-a5b9-4970-b11d-15740f43a2c6",
                      "name": "Failure Response",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"environment\": {\n        \"name\": \"New Name\",\n        \"values\": [\n            null,\n            {\n                \"key\": \"occupation\",\n                \"value\": \"Vigilante\"\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "https://api.getpostman.com/environments/{{environment_uid}}"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"malformedRequestError\",\n        \"message\": \"Invalid type: null (expected object) at environment.values.0\"\n    }\n}"
                    },
                    {
                      "id": "98375324-9ae6-4311-aecd-c1d0c2c6f6e9",
                      "name": "Successful Response",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"environment\": {\n        \"name\": \"New Name\",\n        \"values\": [\n            {\n                \"key\": \"name\",\n                \"value\": \"Bruce Wayne\"\n            },\n            {\n                \"key\": \"occupation\",\n                \"value\": \"Vigilante\"\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "https://api.getpostman.com/environments/{{environment_uid}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"environment\": {\n        \"id\": \"357668d2-84f1-2264-438b-113095359f80\",\n        \"name\": \"New Name\",\n        \"uid\": \"631643-357668d2-84f1-2264-438b-113095359f80\"\n    }\n}"
                    }
                  ]
                },
                {
                  "name": "Delete Environment",
                  "id": "7f011c2e-54d6-44c1-86e0-428b4ca96a8a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "url": "https://api.getpostman.com/environments/{{environment_uid}}",
                    "description": "This endpoint allows you to delete a single environment based on an environment's unique `uid`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "b9f7150f-83ae-4a56-a3e9-697ed8639227",
                      "name": "Environment Deleted",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": "https://api.getpostman.com/environments/{{environment_uid}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"environment\": {\n        \"id\": \"4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce\",\n        \"uid\": \"5852-4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce\"\n    }\n}"
                    },
                    {
                      "id": "6830f432-846d-4747-9bd5-05d45bdc7e74",
                      "name": "Environment Not Found",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": "https://api.getpostman.com/environments/{{environment_uid}}"
                      },
                      "status": "Not Found",
                      "code": 404,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified environment does not exist.\"\n    }\n}"
                    }
                  ]
                }
              ],
              "id": "ae4abc8b-bedf-4d25-837f-a6d92847ae5b"
            },
            {
              "name": "Mocks",
              "item": [
                {
                  "name": "All Mocks",
                  "id": "06d8f956-6169-428e-b9ab-79256abefdc4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://api.getpostman.com/mocks",
                    "description": "This endpoint fetches all the mocks that you have created.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "3d6ede51-b848-4a99-9eab-e8948784e777",
                      "name": "Successful Response",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/mocks"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"mocks\": [\n        {\n            \"id\": \"0fca2246-c108-41f5-8454-cc032def329f\",\n            \"owner\": \"1679925\",\n            \"uid\": \"1679925-0fca2246-c108-41f5-8454-cc032def329f\",\n            \"collection\": \"1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc\",\n            \"environment\": \"1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524\",\n            \"mockUrl\": \"https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io\"\n        },\n        {\n            \"id\": \"2c624389-705a-4e66-9777-05314b431796\",\n            \"owner\": \"1679925\",\n            \"uid\": \"1679925-2c624389-705a-4e66-9777-05314b431796\",\n            \"collection\": \"1679925-37294bb0-e27b-5e52-93ae-c07dd445216d\",\n            \"mockUrl\": \"https://2c624389-705a-4e66-9777-05314b431796.mock.pstmn.io\"\n        }\n    ]\n}"
                    }
                  ]
                },
                {
                  "name": "Single Mock",
                  "id": "bafd2233-a8ce-47c0-a76e-68baafd0b924",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://api.getpostman.com/mocks/{{mock_uid}}",
                    "description": "This endpoint fetches you the basic information about a single mock using its `uid`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "9b20e4db-244e-4a41-9238-36f9baa1390a",
                      "name": "Successful Response",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/mocks/{{mock_uid}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\"mock\":{\"id\":\"0fca2246-c108-41f5-8454-cc032def329f\",\"owner\":\"1679925\",\"uid\":\"1679925-0fca2246-c108-41f5-8454-cc032def329f\",\"collection\":\"1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc\",\"environment\":\"1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524\",\"mockUrl\":\"https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io\"}}"
                    }
                  ]
                },
                {
                  "name": "Create Mock",
                  "id": "1f95120d-3d39-4a82-86b9-27e03672fce2",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"mock\": {\n\t\t\"collection\": \"1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc\",\n\t\t\"environment\": \"1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524\"\n\t}\n}"
                    },
                    "url": "https://api.getpostman.com/mocks",
                    "description": "This endpoint allows you to create a mock on a collection. You can also provide an environment UID to resolve any environment variables in the collection.\n\nYou can also specify the context of a workspace to create a mock in directly by passing the `workspace` as a query param.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "cabd8253-3c39-48d7-a36b-101cd5987035",
                      "name": "Create Mock in a Workspace",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"mock\": {\n    \"collection\": \"1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc\",\n    \"environment\": \"1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524\"\n  }\n}"
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/mocks?workspace={{workspace_id}}",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "mocks"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspace_id}}",
                              "description": "The workspace ID in which the mock will be created"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"mock\": {\n        \"id\": \"0fca2246-c108-41f5-8454-cc032def329f\",\n        \"owner\": \"1679925\",\n        \"uid\": \"1679925-0fca2246-c108-41f5-8454-cc032def329f\",\n        \"collection\": \"1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc\",\n        \"environment\": \"1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524\",\n        \"mockUrl\": \"https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io\"\n    }\n}"
                    },
                    {
                      "id": "76cfd747-5676-49e6-b65b-5e548cef1023",
                      "name": "Successful Response",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"mock\": {\n\t\t\"collection\": \"1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc\",\n\t\t\"environment\": \"1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524\"\n\t}\n}"
                        },
                        "url": "https://api.getpostman.com/mocks"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "The mime type of this content",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\"mock\":{\"id\":\"0fca2246-c108-41f5-8454-cc032def329f\",\"owner\":\"1679925\",\"uid\":\"1679925-0fca2246-c108-41f5-8454-cc032def329f\",\"collection\":\"1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc\",\"environment\":\"1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524\",\"mockUrl\":\"https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io\"}}"
                    }
                  ]
                },
                {
                  "name": "Update Mock",
                  "id": "f51daca0-f134-4505-8e76-032fffa0bac5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"mock\": {\n        \"name\": \"My Mock Server\",\n        \"environment\": \"11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19\",\n        \"description\": \"example describing update mock description\",\n        \"private\": false,\n        \"versionTag\": \"abf07d3d-f8ec-47d4-8015-9fe83078b4ec\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "https://api.getpostman.com/mocks/{{mock_uid}}",
                    "description": "This endpoint allows you to update a mock you have created using its `uid`. The endpoint allows you to edit fields,\n* name\n* environment\n* description\n* private\n* versionTag\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "88cf491f-54d3-4fb0-bbb7-7035db598921",
                      "name": "success Response",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"mock\": {\n        \"name\": \"My Mock Server\",\n        \"environment\": \"11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19\",\n        \"description\": \"example describing update mock description\",\n        \"private\": false,\n        \"versionTag\": \"abf07d3d-f8ec-47d4-8015-9fe83078b4ec\"\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "https://api.getpostman.com/mocks/{{mock_uid}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"mock\": {\n        \"id\": \"06040138-dd6b-4cce-9a02-7e1c1ab59723\",\n        \"owner\": \"11582779\",\n        \"uid\": \"11582779-06040138-dd6b-4cce-9a02-7e1c1ab59723\",\n        \"collection\": \"11582779-fd6797e2-de6b-4699-975c-85290e4c2499\",\n        \"mockUrl\": \"https://06040138-dd6b-4cce-9a02-7e1c1ab59723.mock.pstmn.io\",\n        \"name\": \"My Mock Server\",\n        \"config\": {\n            \"headers\": [],\n            \"matchBody\": false,\n            \"matchQueryParams\": true,\n            \"matchWildcards\": true\n        },\n        \"environment\": \"11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19\"\n    }\n}"
                    }
                  ]
                },
                {
                  "name": "Delete Mock",
                  "id": "056e72bf-8899-4375-b84a-8e3fe32f033e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "url": "https://api.getpostman.com/mocks/{{mock_uid}}",
                    "description": "This endpoint allows you to delete an existing mock using its `uid`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "18c5ae81-3d33-4964-9474-e68361fcbdf0",
                      "name": "Successful Response",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": "https://api.getpostman.com/mocks/{{mock_uid}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\"mock\":{\"id\":\"0fca2246-c108-41f5-8454-cc032def329f\",\"uid\":\"1679925-0fca2246-c108-41f5-8454-cc032def329f\"}}"
                    }
                  ]
                },
                {
                  "name": "Publish Mock",
                  "id": "27112782-eedf-43f2-9dae-3191e6052d22",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "url": "https://api.getpostman.com/mocks/{{mock_uid}}/publish",
                    "description": "This endpoint publishes the mock you have created using its `uid`\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key ` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "df224a71-8af5-4c9f-9379-95cea9eea6d8",
                      "name": "Success Response",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "url": "https://api.getpostman.com/mocks/{{mock_uid}}/publish"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"mock\": {\n        \"id\": \"06040138-dd6b-4cce-9a02-7e1c1ab59723\"\n    }\n}"
                    }
                  ]
                },
                {
                  "name": "Unpublish Mock",
                  "id": "1105754b-f246-4442-959a-55e28b3b62ba",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "url": "https://api.getpostman.com/mocks/{{mock_uid}}/unpublish",
                    "description": "This endpoint unpublishes the mock you have created using its `uid`\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key ` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "47939e80-40d8-4f01-ba5b-0b5a975d800d",
                      "name": "Success Response",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": "https://api.getpostman.com/mocks/{{mock_uid}}/unpublish"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"mock\": {\n        \"id\": \"06040138-dd6b-4cce-9a02-7e1c1ab59723\"\n    }\n}"
                    }
                  ]
                }
              ],
              "id": "cc833f6e-02f4-4385-b738-453164824d76"
            },
            {
              "name": "Monitors",
              "item": [
                {
                  "name": "All Monitors",
                  "id": "aac6269d-3d4c-4447-b06d-d6b3eeeb4add",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://api.getpostman.com/monitors",
                    "description": "The `/monitors` endpoint returns a list of all [monitors](https://monitor.getpostman.com/) that are accessible by you.\n\nThe response contains an array of monitors information containing the `name`, `id`, `owner` and `uid` of each monitor.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "5d3be5b4-ef66-42ca-9e1f-8e45dbd8be02",
                      "name": "Successful Response",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/monitors"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "0e9f9b1f3e7218e7fd625cca14597bc771064a433bdd75b5a40196cef86c3fa29d483358e0b254b0a097ac305b132ec8481e2c5b835663fbed3bbb93b5a747cf8776efe85650e29a8e5f0a63906480e5b9e5a9860bef703234812ce9f65ea6dcbc099ac952d1c36338e2d192a793b82a1d8a2dd6dd031f831c08805a9e7ea1f55d46c54cf6ecaecbac84ddf581c8a267a116c0d6d935f19171bce93c6e040c0bd49fc1325bdb8929914548d7c0cae78796aba4073dc9ab63194a90e430919d8757c7ccb7b4dffc61b9cd4a748edc88d0b4ba727c83ea1af546908ff63a1e2ee9784a7b9af2f61997e0dd34adcb479151d11d0e8d67ba76050d55c7bbb88f2f700e14f848f6b929b441869fba53436eb7983660d0e4af82aa0dc5c47dddf974599280179889c03c3e38212eaa8270c641298f0a49b923ed3d04d61e2c6c25844b67df9e4814d378b440e8124e429dc292a147038a57c03e8b8ece700b376fcf8e002dca35142f97b5f49144e2f7477b99d767dff12bb37dd846419051bdaa4c6d931545a5df09bda8a80a336585e5d6ba44f087607512344f91321a359dc150cb411600fbf0d974f63116046d681d3f82a16e50e3bb69c463430e284f64e007f354a9ed4a2afdb27caad0414d451875ec78ea98924e32d8f881eb2c260b348e00baf782",
                          "key": "postman.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"monitors\":[{\"id\":\"1e6b6c77-2031-42d0-9948-76d7251b2dd1\",\"name\":\"Batman & Sherlock Holmes Monitor\",\"uid\":\"5852-1e6b6c77-2031-42d0-9948-76d7251b2dd1\",\"owner\":\"5852\"},{\"id\":\"1e6b6cb7-f13d-4000-acb7-0695757174a8\",\"name\":\"Team Level Monitor\",\"uid\":\"5886-1e6b6cb7-f13d-4000-acb7-0695757174a8\",\"owner\":\"5886\"},{\"id\":\"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\"name\":\"Postman Echo Monitor\",\"uid\":\"5852-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\"owner\":\"5852\"}]}"
                    }
                  ]
                },
                {
                  "name": "Single Monitor",
                  "id": "7fe6a522-102b-4582-a31e-76a555f13f18",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://api.getpostman.com/monitors/{{monitor_uid}}",
                    "description": "This endpoint fetches you basic information about the monitor using its `uid`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "087f73d4-5b2f-45ee-8334-09de48c4f419",
                      "name": "Monitor Not Found",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/monitors/{{monitor_uid}}"
                      },
                      "status": "Not Found",
                      "code": 404,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "0e9f9b1f3e7218e7fd625cca14597bc771064a433bdd75b5a40196cef86c3fa29d483358e0b254b0a097ac305b132ec8481e2c5b835663fbed3bbb93b5a747cf8776efe85650e29a8e5f0a63906480e5b9e5a9860bef703234812ce9f65ea6dcbc099ac952d1c36338e2d192a793b82a1d8a2dd6dd031f831c08805a9e7ea1f55d46c54cf6ecaecbac84ddf581c8a267a116c0d6d935f19171bce93c6e040c0bd49fc1325bdb8929914548d7c0cae78796aba4073dc9ab63194a90e430919d8757c7ccb7b4dffc61b9cd4a748edc88d0b4ba727c83ea1af546908ff63a1e2ee9784a7b9af2f61997e0dd34adcb479151d11d0e8d67ba76050d55c7bbb88f2f700e14f848f6b929b441869fba53436eb7983660d0e4af82aa0dc5c47dddf974599280179889c03c3e38212eaa8270c641298f0a49b923ed3d04d61e2c6c25844b67df9e4814d378b440e8124e429dc292a147038a57c03e8b8ece700b376fcf8e002dca35142f97b5f49144e2f7477b99d767dff12bb37dd846419051bdaa4c6d931545a5df09bda8a80a336585e5d6ba44f087607512344f91321a359dc150cb411600fbf0d974f63116046d681d3f82a16e50e3bb69c463430e284f64e007f354a9ed4a2afdb27caad0414d451875ec78ea98924e32d8f881eb2c260b348e00baf782",
                          "key": "postman.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"error\":{\"name\":\"instanceNotFoundError\",\"message\":\"The specified monitor does not exist.\"}}"
                    },
                    {
                      "id": "9bed0859-7970-4c4d-921d-39d53a757c50",
                      "name": "Successful Response",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/monitors/{{monitor_uid}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "0e9f9b1f3e7218e7fd625cca14597bc771064a433bdd75b5a40196cef86c3fa29d483358e0b254b0a097ac305b132ec8481e2c5b835663fbed3bbb93b5a747cf8776efe85650e29a8e5f0a63906480e5b9e5a9860bef703234812ce9f65ea6dcbc099ac952d1c36338e2d192a793b82a1d8a2dd6dd031f831c08805a9e7ea1f55d46c54cf6ecaecbac84ddf581c8a267a116c0d6d935f19171bce93c6e040c0bd49fc1325bdb8929914548d7c0cae78796aba4073dc9ab63194a90e430919d8757c7ccb7b4dffc61b9cd4a748edc88d0b4ba727c83ea1af546908ff63a1e2ee9784a7b9af2f61997e0dd34adcb479151d11d0e8d67ba76050d55c7bbb88f2f700e14f848f6b929b441869fba53436eb7983660d0e4af82aa0dc5c47dddf974599280179889c03c3e38212eaa8270c641298f0a49b923ed3d04d61e2c6c25844b67df9e4814d378b440e8124e429dc292a147038a57c03e8b8ece700b376fcf8e002dca35142f97b5f49144e2f7477b99d767dff12bb37dd846419051bdaa4c6d931545a5df09bda8a80a336585e5d6ba44f087607512344f91321a359dc150cb411600fbf0d974f63116046d681d3f82a16e50e3bb69c463430e284f64e007f354a9ed4a2afdb27caad0414d451875ec78ea98924e32d8f881eb2c260b348e00baf782",
                          "key": "postman.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\n \"monitor\": {\n  \"id\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n  \"name\": \"Postman Echo Monitor\",\n  \"uid\": \"5852-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n  \"owner\": \"5852\",\n  \"collectionUid\": \"5852-8d05dd85-222c-1452-553b-e76a531b71ed\",\n  \"environmentUid\": \"5851-8d05dd85-222c-1452-553b-e76a531b71ed\",\n  \"options\": {\n   \"strictSSL\": true,\n   \"followRedirects\": true,\n   \"requestTimeout\": 3000,\n   \"requestDelay\": 0\n  },\n  \"notifications\": {\n   \"onError\": [\n    {\n     \"email\": \"john.appleseed@example.com\"\n    }\n   ],\n   \"onFailure\": [\n    {\n     \"email\": \"john.appleseed@example.com\"\n    }\n   ]\n  },\n  \"distribution\": [],\n  \"schedule\": {\n   \"cron\": \"0 0 * * * *\",\n   \"timezone\": \"Asia/Calcutta\",\n   \"nextRun\": \"2016-11-30T09:30:00.000Z\"\n  },\n  \"lastRun\": {\n   \"status\": \"failed\",\n   \"startedAt\": \"2020-03-25T15:45:29.218Z\",\n   \"finishedAt\": \"2020-03-25T15:45:31.340Z\",\n   \"stats\": {\n    \"assertions\": {\n     \"total\": 8,\n     \"failed\": 1\n    },\n    \"requests\": {\n     \"total\": 4\n    }\n   }\n  }\n }\n}"
                    }
                  ]
                },
                {
                  "name": "Create Monitor",
                  "id": "9a4a6f34-4b3e-4650-952f-e5cfb2ce1a1b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"monitor\": {\n    \"name\": \"This is a Monitor Name\",\n    \"schedule\": {\n      \"cron\": \"0 0 * * *\",\n      \"timezone\": \"Asia/Kolkata\"\n    },\n    \"collection\": \"5852-8d05dd85-222c-1452-553b-e76a531b71ed\",\n    \"environment\": \"5852-8a4c21ea-2a36-40d1-a82d-d717fac9d6ef\"\n  }\n}"
                    },
                    "url": "https://api.getpostman.com/monitors",
                    "description": "This endpoint allows you to create a monitor.\n\nSome sample `cron` values are:\n\n| Frequency                  | Cron Pattern   |\n|-----------------------|----------------|\n| Every 5 minutes       | `*/5 * * * *`  |\n| Every 30 minutes     | `*/30 * * * *` |\n| Every Hour         | `0 */1 * * *`  |\n| Every 6 Hours      | `0 */6 * * *`  |\n| Every day at 5pm    | `0 17 * * *`   |\n| Every Monday at 12pm  | `0 12 * * MON` |\n| Every weekday (Monday - Friday) at 6am | `0 6 * * MON-FRI` |\n\nNote: Currently, you can only create monitors at some limited schedules. You can head to [Postman Monitors](https://monitor.getpostman.com) to see the allowed schedules. \n\nFor more information about the format of the `timezone` value, check this [list of time zones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)\n\nYou can also specify the context of a workspace to create a monitor in directly by passing the `workspace` as a query param.\n\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "43c247a2-f682-432d-82bb-6488bd4cea3e",
                      "name": "Cron Pattern Not Allowed",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"monitor\": {\n\t\t\"name\": \"This is a Monitor Name\",\n\t\t\"schedule\": {\n\t\t\t\"cron\": \"* * * * *\",\n\t\t\t\"timezone\": \"Asia/Kolkata\"\n\t\t},\n\t\t\"collection\": \"5852-8d05dd85-222c-1452-553b-e76a531b71ed\",\n\t\t\"environment\": \"5852-8a4c21ea-2a36-40d1-a82d-d717fac9d6ef\"\n\t}\n}"
                        },
                        "url": "https://api.getpostman.com/monitors"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
                          "key": "postman.sid"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
                          "key": "postman-staging.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"error\":{\"name\":\"cronPatternNotAllowedError\",\"message\":\"The specified cron pattern is not allowed. Please check https://monitor.getpostman.com for the allowed schedules.\",\"details\":{\"pattern\":\"* * * * *\"}}}"
                    },
                    {
                      "id": "93d5ef7a-d4c0-427d-97d6-da2abc26d3f7",
                      "name": "Invalid Collection UID",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"monitor\": {\n\t\t\"name\": \"This is a Monitor Name\",\n\t\t\"schedule\": {\n\t\t\t\"cron\": \"0 0 * * *\",\n\t\t\t\"timezone\": \"Asia/Kolkata\"\n\t\t},\n\t\t\"collection\": \"8d05dd85-222c-1452-553b-e76a531b71ed\",\n\t\t\"environment\": \"5852-8a4c21ea-2a36-40d1-a82d-d717fac9d6ef\"\n\t}\n}"
                        },
                        "url": "https://api.getpostman.com/monitors"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
                          "key": "postman.sid"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
                          "key": "postman-staging.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"error\":{\"name\":\"invalidUidError\",\"message\":\"The specified uid is invalid.\",\"details\":{\"param\":\"collection\",\"uid\":\"8d05dd85-222c-1452-553b-e76a531b71ed\"}}}"
                    },
                    {
                      "id": "78acb9d5-aba1-4245-9c66-b058be2770d8",
                      "name": "Invalid Environment UID",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"monitor\": {\n\t\t\"name\": \"This is a Monitor Name\",\n\t\t\"schedule\": {\n\t\t\t\"cron\": \"0 0 * * *\",\n\t\t\t\"timezone\": \"Asia/Kolkata\"\n\t\t},\n\t\t\"collection\": \"5852-8d05dd85-222c-1452-553b-e76a531b71ed\",\n\t\t\"environment\": \"8a4c21ea-2a36-40d1-a82d-d717fac9d6ef\"\n\t}\n}"
                        },
                        "url": "https://api.getpostman.com/monitors"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
                          "key": "postman.sid"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
                          "key": "postman-staging.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"error\":{\"name\":\"invalidUidError\",\"message\":\"The specified uid is invalid.\",\"details\":{\"param\":\"environment\",\"uid\":\"8a4c21ea-2a36-40d1-a82d-d717fac9d6ef\"}}}"
                    },
                    {
                      "id": "91878a9f-8383-4ff5-a11e-43c4562f2ffa",
                      "name": "Monitor Created",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"monitor\": {\n    \"name\": \"This is a Monitor Name\",\n    \"schedule\": {\n      \"cron\": \"0 0 * * *\",\n      \"timezone\": \"Asia/Kolkata\"\n    },\n    \"collection\": \"5852-8d05dd85-222c-1452-553b-e76a531b71ed\",\n    \"environment\": \"5852-8a4c21ea-2a36-40d1-a82d-d717fac9d6ef\"\n  }\n}"
                        },
                        "url": "https://api.getpostman.com/monitors"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "0e9f9b1f3e7218e7fd625cca14597bc771064a433bdd75b5a40196cef86c3fa29d483358e0b254b0a097ac305b132ec8481e2c5b835663fbed3bbb93b5a747cf8776efe85650e29a8e5f0a63906480e5b9e5a9860bef703234812ce9f65ea6dcbc099ac952d1c36338e2d192a793b82a1d8a2dd6dd031f831c08805a9e7ea1f55d46c54cf6ecaecbac84ddf581c8a267a116c0d6d935f19171bce93c6e040c0bd49fc1325bdb8929914548d7c0cae78796aba4073dc9ab63194a90e430919d8757c7ccb7b4dffc61b9cd4a748edc88d0b4ba727c83ea1af546908ff63a1e2ee9784a7b9af2f61997e0dd34adcb479151d11d0e8d67ba76050d55c7bbb88f2f700e14f848f6b929b441869fba53436eb7983660d0e4af82aa0dc5c47dddf974599280179889c03c3e38212eaa8270c641298f0a49b923ed3d04d61e2c6c25844b67df9e4814d378b440e8124e429dc292a147038a57c03e8b8ece700b376fcf8e002dca35142f97b5f49144e2f7477b99d767dff12bb37dd846419051bdaa4c6d931545a5df09bda8a80a336585e5d6ba44f087607512344f91321a359dc150cb411600fbf0d974f63116046d681d3f82a16e50e3bb69c463430e284f64e007f354a9ed4a2afdb27caad0414d451875ec78ea98924e32d8f881eb2c260b348e00baf782",
                          "key": "postman.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"monitor\":{\"id\":\"1e6b6dfd-7ba4-4590-9ee1-5948102d7797\",\"name\":\"Monitor Name\",\"uid\":\"5852-1e6b6dfd-7ba4-4590-9ee1-5948102d7797\"}}"
                    },
                    {
                      "id": "1e96df02-3522-49f2-84f8-353738f21c5a",
                      "name": "Invalid Timezone",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"monitor\": {\n\t\t\"name\": \"This is a Monitor Name\",\n\t\t\"schedule\": {\n\t\t\t\"cron\": \"0 0 * * *\",\n\t\t\t\"timezone\": \"this is not a timezone\"\n\t\t},\n\t\t\"collection\": \"5852-8d05dd85-222c-1452-553b-e76a531b71ed\",\n\t\t\"environment\": \"5852-8a4c21ea-2a36-40d1-a82d-d717fac9d6ef\"\n\t}\n}"
                        },
                        "url": "https://api.getpostman.com/monitors"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
                          "key": "postman.sid"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
                          "key": "postman-staging.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"error\":{\"name\":\"invalidParamsError\",\"message\":\"The request had invalid parameters\",\"details\":{\"param\":\"schedule.timezone\"}}}"
                    },
                    {
                      "id": "22d92328-ff9c-46ae-82e7-af63686b92ac",
                      "name": "Parameter Missing",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\n}"
                        },
                        "url": "https://api.getpostman.com/monitors"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
                          "key": "postman.sid"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
                          "key": "postman-staging.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"error\":{\"name\":\"paramMissingError\",\"message\":\"Parameter is missing in the request.\",\"details\":{\"param\":\"monitor\"}}}"
                    },
                    {
                      "id": "94b8305d-99a5-4620-b56f-8ca79c3ba763",
                      "name": "Create Monitor in a Workspace",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"monitor\": {\n    \"name\": \"This is a Monitor Name\",\n    \"schedule\": {\n      \"cron\": \"0 0 * * *\",\n      \"timezone\": \"Asia/Kolkata\"\n    },\n    \"collection\": \"5852-8d05dd85-222c-1452-553b-e76a531b71ed\",\n    \"environment\": \"5852-8a4c21ea-2a36-40d1-a82d-d717fac9d6ef\"\n  }\n}"
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/monitors?workspace={{workspace_id}}",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "monitors"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspace_id}}",
                              "description": "The workspace ID in which the monitor will be created"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"monitor\": {\n        \"id\": \"1e6b6dfd-7ba4-4590-9ee1-5948102d7797\",\n        \"name\": \"Monitor Name\",\n        \"uid\": \"5852-1e6b6dfd-7ba4-4590-9ee1-5948102d7797\"\n    }\n}"
                    }
                  ]
                },
                {
                  "name": "Update Monitor",
                  "id": "dabac998-05bd-4759-9634-bbd3cc4e44d6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"monitor\": {\n    \"name\": \"Updated Monitor Name\",\n    \"schedule\": {\n      \"cron\": \"*/5 * * * *\",\n      \"timezone\": \"America/Chicago\"\n    }\n  }\n}"
                    },
                    "url": "https://api.getpostman.com/monitors/{{monitor_uid}}",
                    "description": "This endpoint allows you to update a monitor using its `uid`. Only the monitor name and its schedule can be updated.\n\nSome example `cron` values are:\n\n| Frequency                  | Cron Pattern   |\n|-----------------------|----------------|\n| Every 5 minutes       | `*/5 * * * *`  |\n| Every 30 minutes     | `*/30 * * * *` |\n| Every Hour         | `0 */1 * * *`  |\n| Every 6 Hours      | `0 */6 * * *`  |\n| Every day at 5pm    | `0 17 * * *`   |\n| Every Monday at 12pm  | `0 12 * * MON` |\n| Every weekday (Monday - Friday) at 6am | `0 6 * * MON-FRI` |\n\nNote: Currently, you can only create monitors at some limited schedules. You can head to [Postman Monitors](https://monitor.getpostman.com) to see the allowed schedules. \n\nFor more information about the format of the `timezone` value, check this [list of time zones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "d48b9fcb-da4b-4b02-9462-c2b8097442e1",
                      "name": "Monitor Updated",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"monitor\": {\n\t\t\"name\": \"Updated Monitor Name\",\n\t\t\"schedule\": {\n\t\t\t\"cron\": \"*/5 * * * *\",\n\t\t\t\"timezone\": \"America/Chicago\"\n\t\t}\n\t}\n}"
                        },
                        "url": "https://api.getpostman.com/monitors/{{monitor_uid}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "0e9f9b1f3e7218e7fd625cca14597bc771064a433bdd75b5a40196cef86c3fa29d483358e0b254b0a097ac305b132ec8481e2c5b835663fbed3bbb93b5a747cf8776efe85650e29a8e5f0a63906480e5b9e5a9860bef703234812ce9f65ea6dcbc099ac952d1c36338e2d192a793b82a1d8a2dd6dd031f831c08805a9e7ea1f55d46c54cf6ecaecbac84ddf581c8a267a116c0d6d935f19171bce93c6e040c0bd49fc1325bdb8929914548d7c0cae78796aba4073dc9ab63194a90e430919d8757c7ccb7b4dffc61b9cd4a748edc88d0b4ba727c83ea1af546908ff63a1e2ee9784a7b9af2f61997e0dd34adcb479151d11d0e8d67ba76050d55c7bbb88f2f700e14f848f6b929b441869fba53436eb7983660d0e4af82aa0dc5c47dddf974599280179889c03c3e38212eaa8270c641298f0a49b923ed3d04d61e2c6c25844b67df9e4814d378b440e8124e429dc292a147038a57c03e8b8ece700b376fcf8e002dca35142f97b5f49144e2f7477b99d767dff12bb37dd846419051bdaa4c6d931545a5df09bda8a80a336585e5d6ba44f087607512344f91321a359dc150cb411600fbf0d974f63116046d681d3f82a16e50e3bb69c463430e284f64e007f354a9ed4a2afdb27caad0414d451875ec78ea98924e32d8f881eb2c260b348e00baf782",
                          "key": "postman.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"monitor\":{\"id\":\"1e6b6e2a-c2ad-4090-b750-0df4e6624352\",\"name\":\"Updated Monitor Name\",\"uid\":\"5852-1e6b6e2a-c2ad-4090-b750-0df4e6624352\"}}"
                    }
                  ]
                },
                {
                  "name": "Delete Monitor",
                  "id": "123ca276-1718-45f2-a027-61965d86a7d1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "url": "https://api.getpostman.com/monitors/{{monitor_uid}}",
                    "description": "This endpoint can be used to delete an existing monitor using its `uid`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "a94aa14d-e249-4bac-a881-79b18d33eeb4",
                      "name": "Monitor Not Found",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": "https://api.getpostman.com/monitors/{{monitor_uid}}"
                      },
                      "status": "Not Found",
                      "code": 404,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
                          "key": "postman.sid"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
                          "key": "postman-staging.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"error\":{\"name\":\"instanceNotFoundError\",\"message\":\"The specified monitor does not exist.\"}}"
                    },
                    {
                      "id": "48023632-f44f-43ac-9301-49183ca8ae5f",
                      "name": "Monitor Deleted",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": "https://api.getpostman.com/monitors/{{monitor_uid}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
                          "key": "postman.sid"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
                          "key": "postman-staging.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"monitor\":{\"id\":\"1e6b8957-35f9-42a0-8d2f-f03d7085b3d2\",\"uid\":\"5852-1e6b8957-35f9-42a0-8d2f-f03d7085b3d2\"}}"
                    }
                  ]
                },
                {
                  "name": "Run a Monitor",
                  "id": "ed0a48be-ef08-4ebc-943a-966fbe8498f0",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "url": "https://api.getpostman.com/monitors/{{monitor_uid}}/run",
                    "description": "This endpoint will run the monitor instantly and wait for the monitor to run completely. It responds with the run results.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "66e48e85-742e-4a46-91ce-8dc029dea097",
                      "name": "Monitor Run with No Errors",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "formdata",
                          "formdata": []
                        },
                        "url": "https://api.getpostman.com/monitors/{{monitor_uid}}/run"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
                          "key": "postman.sid"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
                          "key": "postman-staging.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\n \"run\": {\n  \"info\": {\n   \"jobId\": \"1e6ba2e1-6256-4430-bafa-a06e591523bd\",\n   \"monitorId\": \"1e6b8970-fd13-4480-b011-b3b3e3cd271d\",\n   \"name\": \"Sample Collection monitor 1 #54\",\n   \"collectionUid\": \"5852-1d3daef4-2037-4584-ab86-bafd8c8f8a55\",\n   \"status\": \"success\",\n   \"startedAt\": \"2016-12-04T14:29:39.000Z\",\n   \"finishedAt\": \"2016-12-04T14:29:39.000Z\"\n  },\n  \"stats\": {\n   \"assertions\": {\n    \"total\": 1,\n    \"failed\": 0\n   },\n   \"requests\": {\n    \"total\": 3,\n    \"failed\": 0\n   }\n  },\n  \"executions\": [\n   {\n    \"id\": 1,\n    \"item\": {\n     \"id\": \"b5e8d7dd-909c-4ba7-aef4-8609bc50b586\",\n     \"name\": \"Sample POST Request\"\n    },\n    \"request\": {\n     \"method\": \"POST\",\n     \"url\": \"echo.getpostman.com/post\",\n     \"headers\": {\n      \"content-type\": \"application/json\",\n      \"accept\": \"*/*\",\n      \"accept-encoding\": \"gzip, deflate\",\n      \"content-length\": 18\n     },\n     \"body\": {\n      \"contentLength\": 18,\n      \"mode\": \"raw\"\n     },\n     \"timestamp\": \"2016-12-04T14:29:39.520Z\"\n    },\n    \"response\": {\n     \"code\": 200,\n     \"body\": {\n      \"contentLength\": 298\n     },\n     \"responseTime\": 57,\n     \"responseSize\": 298,\n     \"headers\": {\n      \"date\": \"Sun, 04 Dec 2016 14:29:39 GMT\",\n      \"content-type\": \"application/json\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"content-encoding\": \"gzip\"\n     }\n    }\n   },\n   {\n    \"id\": 2,\n    \"item\": {\n     \"id\": \"f790d046-755d-44f5-a416-b825e18dfd9d\",\n     \"name\": \"Sample GET Request\"\n    },\n    \"request\": {\n     \"method\": \"GET\",\n     \"url\": \"echo.getpostman.com/get\",\n     \"headers\": {\n      \"accept\": \"*/*\",\n      \"accept-encoding\": \"gzip, deflate\"\n     },\n     \"body\": {\n      \"contentLength\": 0,\n      \"mode\": \"formdata\"\n     },\n     \"timestamp\": \"2016-12-04T14:29:39.586Z\"\n    },\n    \"response\": {\n     \"code\": 200,\n     \"body\": {\n      \"contentLength\": 282\n     },\n     \"responseTime\": 46,\n     \"responseSize\": 282,\n     \"headers\": {\n      \"date\": \"Sun, 04 Dec 2016 14:29:39 GMT\",\n      \"content-type\": \"application/json\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"content-encoding\": \"gzip\"\n     }\n    },\n    \"assertions\": {\n     \"Status code is 200\": true\n    }\n   },\n   {\n    \"id\": 3,\n    \"item\": {\n     \"id\": \"336e6e17-6d3e-4b8f-a48f-b7e75cf13afb\",\n     \"name\": \"This is the second request\"\n    },\n    \"request\": {\n     \"method\": \"POST\",\n     \"url\": \"echo.getpostman.com/post\",\n     \"headers\": {\n      \"accept\": \"*/*\",\n      \"accept-encoding\": \"gzip, deflate\",\n      \"content-length\": 18\n     },\n     \"body\": {\n      \"contentLength\": 0,\n      \"mode\": \"formdata\"\n     },\n     \"timestamp\": \"2016-12-04T14:29:39.965Z\"\n    },\n    \"response\": {\n     \"code\": 200,\n     \"body\": {\n      \"contentLength\": 347\n     },\n     \"responseTime\": 10,\n     \"responseSize\": 347,\n     \"headers\": {\n      \"date\": \"Sun, 04 Dec 2016 14:29:39 GMT\",\n      \"content-type\": \"application/json\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"content-encoding\": \"gzip\"\n     }\n    }\n   }\n  ],\n  \"failures\": []\n }\n}"
                    },
                    {
                      "id": "5266ad4c-7a6c-443f-a07c-5049bd5c0e4b",
                      "name": "Monitor Run with Errors",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "formdata",
                          "formdata": []
                        },
                        "url": "https://api.getpostman.com/monitors/{{monitor_uid}}/run"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
                          "key": "postman.sid"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": "getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
                          "key": "postman-staging.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\n \"run\": {\n  \"info\": {\n   \"jobId\": \"1e6ba2e3-1aaf-4c10-bd5f-905943284b2a\",\n   \"monitorId\": \"1e6b8970-fd13-4480-b011-b3b3e3cd271d\",\n   \"name\": \"Sample Collection monitor 1 #56\",\n   \"collectionUid\": \"5852-1d3daef4-2037-4584-ab86-bafd8c8f8a55\",\n   \"status\": \"failed\",\n   \"startedAt\": \"2016-12-04T14:30:25.000Z\",\n   \"finishedAt\": \"2016-12-04T14:30:26.000Z\"\n  },\n  \"stats\": {\n   \"assertions\": {\n    \"total\": 1,\n    \"failed\": 1\n   },\n   \"requests\": {\n    \"total\": 3,\n    \"failed\": 1\n   }\n  },\n  \"executions\": [\n   {\n    \"id\": 1,\n    \"item\": {\n     \"id\": \"b5e8d7dd-909c-4ba7-aef4-8609bc50b586\",\n     \"name\": \"Sample POST Request\"\n    },\n    \"request\": {\n     \"method\": \"POST\",\n     \"url\": \"echo.getpostman.com/post\",\n     \"headers\": {\n      \"content-type\": \"application/json\",\n      \"accept\": \"*/*\",\n      \"accept-encoding\": \"gzip, deflate\",\n      \"content-length\": 18\n     },\n     \"body\": {\n      \"contentLength\": 18,\n      \"mode\": \"raw\"\n     },\n     \"timestamp\": \"2016-12-04T14:30:26.025Z\"\n    },\n    \"response\": {\n     \"code\": 200,\n     \"body\": {\n      \"contentLength\": 298\n     },\n     \"responseTime\": 26,\n     \"responseSize\": 298,\n     \"headers\": {\n      \"date\": \"Sun, 04 Dec 2016 14:30:26 GMT\",\n      \"content-type\": \"application/json\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"content-encoding\": \"gzip\"\n     }\n    }\n   },\n   {\n    \"id\": 2,\n    \"item\": {\n     \"id\": \"f790d046-755d-44f5-a416-b825e18dfd9d\",\n     \"name\": \"Sample GET Request\"\n    },\n    \"request\": {\n     \"method\": \"GET\",\n     \"url\": \"echo.getpostman.com/get\",\n     \"headers\": {\n      \"accept\": \"*/*\",\n      \"accept-encoding\": \"gzip, deflate\"\n     },\n     \"body\": {\n      \"contentLength\": 0,\n      \"mode\": \"formdata\"\n     },\n     \"timestamp\": \"2016-12-04T14:30:26.093Z\"\n    },\n    \"response\": {\n     \"code\": 200,\n     \"body\": {\n      \"contentLength\": 280\n     },\n     \"responseTime\": 46,\n     \"responseSize\": 280,\n     \"headers\": {\n      \"date\": \"Sun, 04 Dec 2016 14:30:26 GMT\",\n      \"content-type\": \"application/json\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"content-encoding\": \"gzip\"\n     }\n    },\n    \"assertions\": {\n     \"Status code is 400\": false\n    }\n   },\n   {\n    \"id\": 3,\n    \"item\": {\n     \"id\": \"336e6e17-6d3e-4b8f-a48f-b7e75cf13afb\",\n     \"name\": \"This is the second request\"\n    },\n    \"request\": {\n     \"method\": \"POST\",\n     \"url\": \"echo.getpostman.com/post\",\n     \"headers\": {\n      \"accept\": \"*/*\",\n      \"accept-encoding\": \"gzip, deflate\",\n      \"content-length\": 18\n     },\n     \"body\": {\n      \"contentLength\": 0,\n      \"mode\": \"formdata\"\n     },\n     \"timestamp\": \"2016-12-04T14:30:26.477Z\"\n    },\n    \"response\": {\n     \"code\": 200,\n     \"body\": {\n      \"contentLength\": 345\n     },\n     \"responseTime\": 9,\n     \"responseSize\": 345,\n     \"headers\": {\n      \"date\": \"Sun, 04 Dec 2016 14:30:26 GMT\",\n      \"content-type\": \"application/json\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"content-encoding\": \"gzip\"\n     }\n    }\n   }\n  ],\n  \"failures\": [\n   {\n    \"executionId\": 2,\n    \"name\": \"AssertionError\",\n    \"message\": \"Expected 'Status code is 400' to be truthy\",\n    \"assertion\": {\n     \"Status code is 400\": false\n    }\n   }\n  ]\n }\n}"
                    }
                  ]
                }
              ],
              "id": "8db7e0a3-e827-43fc-b0b6-8e0b57206ada"
            },
            {
              "name": "Workspaces",
              "item": [
                {
                  "name": "All workspaces",
                  "id": "069bbb0e-b2d0-4306-b31c-4a69a6a3f67b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://api.getpostman.com/workspaces",
                    "description": "The `/workspaces` endpoint returns a list of all [workspaces](https://www.getpostman.com/docs/v6/postman/workspaces/intro_to_workspaces) that is accessible by you. The list includes your own workspaces and the workspaces that you have access to.\n\nThe response contains an array of collection information containing the `name`, `id`, and `type` of each workspace.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "1449946d-cd37-4aba-b3fb-f0d594d3ff7e",
                      "name": "Valid Response",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/workspaces"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"workspaces\": [\n        {\n            \"id\": \"4e6d34c2-cfdb-4b33-8868-12a875bebda3\",\n            \"name\": \"My Workspace\",\n            \"type\": \"personal\"\n        },\n        {\n            \"id\": \"f8801e9e-03a4-4c7b-b31e-5db5cd771696\",\n            \"name\": \"Team workspace\",\n            \"type\": \"team\"\n        }\n    ]\n}"
                    }
                  ]
                },
                {
                  "name": "Single workspace",
                  "id": "a1188909-aa8a-4f89-9228-1e7a041b9955",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://api.getpostman.com/workspaces/{{workspace_id}}",
                    "description": "Access the contents of a workspace that is accessible to you using its id (`id`). Includes the collections, environments, mocks and monitors of that workspace.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "17663112-9ad8-42f8-9b6c-c2a9414afa5d",
                      "name": "Workspace Not Found",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/workspaces/{{workspace_id}}"
                      },
                      "status": "Not Found",
                      "code": 404,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "The mime type of this content",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"Instance not found in the database.\"\n    }\n}"
                    },
                    {
                      "id": "4b2394c6-62b7-4743-b98d-bd7587a1d339",
                      "name": "Valid Response",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/workspaces/{{workspace_id}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"workspace\": {\n        \"id\": \"f8801e9e-03a4-4c7b-b31e-5db5cd771696\",\n        \"name\": \"Demo workspace\",\n        \"type\": \"personal\",\n        \"description\": \"Demos.\",\n        \"collections\": [\n            {\n                \"id\": \"7c31b469-bd43-4411-9283-6d397855ee0e\",\n                \"name\": \"Mock demo - collection\",\n                \"uid\": \"1234-7c31b469-bd43-4411-9283-6d397855ee0e\"\n            },\n            {\n                \"id\": \"356fe068-a0f8-4f31-b34d-d12149eac681\",\n                \"name\": \"Mock demo - response code\",\n                \"uid\": \"1234-356fe068-a0f8-4f31-b34d-d12149eac681\"\n            }\n        ],\n        \"environments\": [\n            {\n                \"id\": \"423fd955-a9c8-47cd-9ab0-09a6a575c4be\",\n                \"name\": \"Mock demo - CNX\",\n                \"uid\": \"1234-423fd955-a9c8-47cd-9ab0-09a6a575c4be\"\n            },\n            {\n                \"id\": \"24c45c84-5147-4c15-bb9a-c3186b81d3cc\",\n                \"name\": \"Mock Demo - response code\",\n                \"uid\": \"1234-24c45c84-5147-4c15-bb9a-c3186b81d3cc\"\n            }\n        ]\n    }\n}"
                    }
                  ]
                },
                {
                  "name": "Create Workspace",
                  "id": "73637d9c-0697-4678-b598-683cd14e6aa9",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "name": "Content-Type",
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"workspace\": {\n        \"name\": \"New Workspace\",\n        \"type\": \"personal\",\n        \"description\": \"Some description\",\n        \"collections\": [\n            {\n                \"id\": \"e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d\",\n                \"name\": \"Straw hats\",\n                \"uid\": \"8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d\"\n            }\n        ],\n        \"environments\": [\n            {\n                \"id\": \"83a1aaa2-a204-4bd8-9b92-4d486918906b\",\n                \"name\": \"env\",\n                \"uid\": \"8154-83a1aaa2-a204-4bd8-9b92-4d486918906b\"\n            }\n        ],\n        \"mocks\": [\n            {\n                \"id\": \"cda672ef-1375-40e9-baee-e20ece8d7b65\"\n            }\n        ],\n        \"monitors\": [\n            {\n                \"id\": \"1e889bd2-3862-4be0-b2c2-9b1fe9673aec\"\n            }\n        ]\n    }\n}"
                    },
                    "url": "https://api.getpostman.com/workspaces",
                    "description": "This endpoint allows you to create a workspace and populate it with entities like `collections`, `environments`, `mocks` and `monitors` using their `uid`.\n\nOn successful creation of the workspace, the response returns the workspcae `name` and `id`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "2db654d8-4539-40d0-8188-67ae97ae47dd",
                      "name": "Successful Response",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"workspace\": {\n        \"name\": \"New Workspace\",\n        \"type\": \"personal\",\n        \"description\": \"Some description\",\n        \"collections\": [\n            {\n                \"id\": \"e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d\",\n                \"name\": \"Straw hats\",\n                \"uid\": \"8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d\"\n            }\n        ],\n        \"environments\": [\n            {\n                \"id\": \"83a1aaa2-a204-4bd8-9b92-4d486918906b\",\n                \"name\": \"env\",\n                \"uid\": \"8154-83a1aaa2-a204-4bd8-9b92-4d486918906b\"\n            }\n        ],\n        \"mocks\": [\n            {\n                \"id\": \"cda672ef-1375-40e9-baee-e20ece8d7b65\"\n            }\n        ],\n        \"monitors\": [\n            {\n                \"id\": \"1e889bd2-3862-4be0-b2c2-9b1fe9673aec\"\n            }\n        ]\n    }\n}"
                        },
                        "url": "https://api.getpostman.com/workspaces"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"workspace\": {\n        \"id\": \"cfbcd9bf-cc8b-4d6f-b8ef-440a3e49e29f\",\n        \"name\": \"New Workspace\"\n    }\n}"
                    },
                    {
                      "id": "46d2a117-31bd-4c5e-bc01-88e9f80a776a",
                      "name": "Instance supplied not found",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"workspace\": {\n        \"name\": \"New Workspace\",\n        \"type\": \"personal\",\n        \"description\": \"Some description\",\n        \"collections\": [\n            {\n                \"id\": \"e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d\",\n                \"name\": \"Straw hats\",\n                \"uid\": \"8153-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d\"\n            }\n        ],\n        \"environments\": [\n            {\n                \"id\": \"83a1aaa2-a204-4bd8-9b92-4d486918906b\",\n                \"name\": \"env\",\n                \"uid\": \"8153-83a1aaa2-a204-4bd8-9b92-4d486918906b\"\n            }\n        ],\n        \"mocks\": [\n            {\n                \"id\": \"dda672ef-1375-40e9-baee-e20ece8d7b65\"\n            }\n        ],\n        \"monitors\": [\n            {\n                \"id\": \"2e889bd2-3862-4be0-b2c2-9b1fe9673aec\"\n            }\n        ]\n    }\n}"
                        },
                        "url": "https://api.getpostman.com/workspaces"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"Instance not found in the database.\"\n    }\n}"
                    }
                  ]
                },
                {
                  "name": "Update Workspace",
                  "id": "5ccc0d58-bce8-4df1-8c02-01958c81e6bf",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "name": "Content-Type",
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"workspace\": {\n        \"name\": \"New Workspace updated\",\n        \"description\": \"Some description\",\n        \"collections\": [\n            {\n                \"id\": \"e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d\",\n                \"name\": \"Straw hats\",\n                \"uid\": \"8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d\"\n            }\n        ],\n        \"environments\": [\n            {\n                \"id\": \"83a1aaa2-a204-4bd8-9b92-4d486918906b\",\n                \"name\": \"env\",\n                \"uid\": \"8154-83a1aaa2-a204-4bd8-9b92-4d486918906b\"\n            }\n        ],\n        \"mocks\": [\n            {\n                \"id\": \"cda672ef-1375-40e9-baee-e20ece8d7b65\"\n            }\n        ],\n        \"monitors\": [\n            {\n                \"id\": \"1e889bd2-3862-4be0-b2c2-9b1fe9673aec\"\n            }\n        ]\n    }\n}"
                    },
                    "url": "https://api.getpostman.com/workspaces/{{workspace_id}}",
                    "description": "This endpoint allows you to update a workspace and update it's association to entities like `collections`, `environments`, `mocks` and `monitors` using their `uid`.\n\nOn successful updation of the workspace, the response returns the workspcae `name` and `id`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.\n\n**Note** : The endpoint expects you to send the desired state of the workspace in terms of the associated entities so be careful when trying to update these entities.\n\nFor eg. if your workspace has collections A and B, and in the update call, you send C's uid in the collections array, then A and B would be removed from the workspace and C would be added."
                  },
                  "response": [
                    {
                      "id": "8c886c01-f20f-49a0-a43e-edeaacabd24d",
                      "name": "Specified workspace/entities do not exist",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"workspace\": {\n        \"name\": \"New Workspace updated\",\n        \"description\": \"Some description\",\n        \"collections\": [\n            {\n                \"id\": \"e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d\",\n                \"name\": \"Straw hats\",\n                \"uid\": \"8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d\"\n            }\n        ],\n        \"environments\": [\n            {\n                \"id\": \"83a1aaa2-a204-4bd8-9b92-4d486918906b\",\n                \"name\": \"env\",\n                \"uid\": \"8153-83a1aaa2-a204-4bd8-9b92-4d486918906b\"\n            }\n        ],\n        \"mocks\": [\n            {\n                \"id\": \"cda672ef-1375-40e9-baee-e20ece8d7b65\"\n            }\n        ],\n        \"monitors\": [\n            {\n                \"id\": \"1e889bd2-3862-4be0-b2c2-9b1fe9673aec\"\n            }\n        ]\n    }\n}"
                        },
                        "url": "https://api.getpostman.com/workspaces/{{workspace_id}}"
                      },
                      "status": "Not Found",
                      "code": 404,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified workspace does not exist.\"\n    }\n}"
                    },
                    {
                      "id": "ca7ef7bd-b5c8-4881-84de-80573a27a47c",
                      "name": "Successful Response",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"workspace\": {\n        \"name\": \"New Workspace\",\n        \"description\": \"Some description\",\n        \"collections\": [\n            {\n                \"id\": \"e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d\",\n                \"name\": \"Straw hats\",\n                \"uid\": \"8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d\"\n            }\n        ],\n        \"environments\": [\n            {\n                \"id\": \"83a1aaa2-a204-4bd8-9b92-4d486918906b\",\n                \"name\": \"env\",\n                \"uid\": \"8154-83a1aaa2-a204-4bd8-9b92-4d486918906b\"\n            }\n        ],\n        \"mocks\": [\n            {\n                \"id\": \"cda672ef-1375-40e9-baee-e20ece8d7b65\"\n            }\n        ],\n        \"monitors\": [\n            {\n                \"id\": \"1e889bd2-3862-4be0-b2c2-9b1fe9673aec\"\n            }\n        ]\n    }\n}"
                        },
                        "url": "https://api.getpostman.com/workspaces/{{workspace_id}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"workspace\": {\n        \"id\": \"cfbcd9bf-cc8b-4d6f-b8ef-440a3e49e29f\",\n        \"name\": \"New Workspace\"\n    }\n}"
                    },
                    {
                      "id": "f407bc7a-33c5-42b9-a9a8-a9f1dfd1a501",
                      "name": "Not enough permissions",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"workspace\": {\n        \"name\": \"New Workspace updated\",\n        \"type\": \"personal\",\n        \"description\": \"Some description\",\n        \"collections\": [\n            {\n                \"id\": \"e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d\",\n                \"name\": \"Straw hats\",\n                \"uid\": \"8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d\"\n            }\n        ],\n        \"environments\": [\n            {\n                \"id\": \"83a1aaa2-a204-4bd8-9b92-4d486918906b\",\n                \"name\": \"env\",\n                \"uid\": \"8154-83a1aaa2-a204-4bd8-9b92-4d486918906b\"\n            }\n        ],\n        \"mocks\": [\n            {\n                \"id\": \"cda672ef-1375-40e9-baee-e20ece8d7b65\"\n            }\n        ],\n        \"monitors\": [\n            {\n                \"id\": \"1e889bd2-3862-4be0-b2c2-9b1fe9673aec\"\n            }\n        ]\n    }\n}"
                        },
                        "url": "https://api.getpostman.com/workspaces/{{workspace_id}}"
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"forbiddenError\",\n        \"message\": \"You do not have access to update this workspace.\"\n    }\n}"
                    }
                  ]
                },
                {
                  "name": "Delete Workspace",
                  "id": "abf8d5ac-0dc7-41e5-81d6-bc9d6d9f3777",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "url": "https://api.getpostman.com/workspaces/{{workspace_id}}",
                    "description": "This endpoint allows you to delete an existing workspace.\n\nOn successful deletion of the workspace, the response returns the `id`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "6112d1b5-37c6-483a-b85b-cfcd874fe771",
                      "name": "Successful Response",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": "https://api.getpostman.com/workspaces/{{workspace_id}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"workspace\": {\n        \"id\": \"{{workspace_id}}\"\n    }\n}"
                    },
                    {
                      "id": "7f99ad15-589b-48fd-be2c-98f8c55ec96d",
                      "name": "Workspace not found",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": "https://api.getpostman.com/workspaces/{{workspace_id}}"
                      },
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified workspace does not exist.\"\n    }\n}"
                    }
                  ]
                }
              ],
              "id": "9abd0957-4b1c-4381-8fc8-c1deea755dff"
            },
            {
              "name": "User",
              "item": [
                {
                  "name": "API Key Owner",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "56848955-3927-4659-8a08-8c1f0b190bc7",
                        "type": "text/javascript",
                        "exec": [
                          "var responseJSON;",
                          "",
                          "// parse response body as JSON",
                          "try { responseJSON = JSON.parse(responseBody); } catch (e) { }",
                          "tests['received a valid response JSON'] = !!responseJSON;",
                          "!responseJSON && (responseJSON = {});",
                          "",
                          "tests['status code is 200'] = (responseCode.code === 200);",
                          "tests['response does not have errors'] = (!responseJSON.error);",
                          "",
                          "tests['response has a user object'] = (typeof responseJSON.user === 'object');",
                          "tests['response user object has id'] = (responseJSON.user && responseJSON.user.id);"
                        ]
                      }
                    }
                  ],
                  "id": "dbdb8a00-35a1-4c3e-b0eb-e68b31f1465a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://api.getpostman.com/me",
                    "description": "The `/me` endpoint allows you to fetch relevant information pertaining to the API Key being used.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "f369ef2d-bdbd-4308-81bc-6ee1633d30e2",
                      "name": "Valid Response",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/me"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "name": "Content-Type",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\"user\":{\"id\":\"631643\"}}"
                    }
                  ]
                }
              ],
              "id": "68bdfb95-4d77-4608-961c-26b138e2a1c7"
            },
            {
              "name": "Import",
              "item": [
                {
                  "name": "Import external API specification",
                  "id": "6c323d81-11dc-4b62-87e7-799aa8e9636d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"type\" : \"json\",\n  \"input\": {\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n  \t  \"version\": \"1.0.0\",\n  \t  \"title\": \"Swagger Petstore\",\n  \t  \"license\": {\n  \t    \"name\": \"MIT\"\n  \t  }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://petstore.swagger.io/v1\"\n      }\n    ],\n    \"paths\": {\n  \t  \"/pets\": {\n        \"get\": {\n          \"summary\": \"List all pets\",\n          \"operationId\": \"listPets\",\n          \"parameters\": [\n            {\n              \"name\": \"limit\",\n              \"in\": \"query\",\n              \"description\": \"limit\",\n              \"required\": false,\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            }\n          ],\n          \"responses\": {\n            \"default\": {\n              \"description\": \"unexpected error\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"required\": [\n                        \"code\",\n                        \"message\"\n                    ],\n                    \"properties\": {\n                        \"code\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int32\"\n                        },\n                        \"message\": {\n                        \"type\": \"string\"\n                        }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"
                    },
                    "url": "https://api.getpostman.com/import/openapi",
                    "description": "This endpoint allows you to import external API specifications into Postman.\n\nCurrently, this endpoint only supports the <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md\">OpenAPI</a> specification, for which the `importType` will be `openapi`.\n\nOn a successful import, the response will be an array with each element contaning `id`, `name` and `uid` of entities created.\n\nSupported `type`s:\n\n- string\n- json\n- file\n\nThe `input` parameter should be defined based on the `type`.\n\n> To import a file, request body must be form-data with `type` param set to `file`.\n\n**Note**: Refer to examples for different scenarios.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header."
                  },
                  "response": [
                    {
                      "id": "3a7c1414-1a92-4aba-a9e1-cea4e09bf557",
                      "name": "Success: Import to a specific workspace with workspace ID passed in the header",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "X-Workspace-Id",
                            "value": "{{workspaceId}}"
                          },
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"type\" : \"json\",\n  \"input\": {\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n  \t  \"version\": \"1.0.0\",\n  \t  \"title\": \"Swagger Petstore\",\n  \t  \"license\": {\n  \t    \"name\": \"MIT\"\n  \t  }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://petstore.swagger.io/v1\"\n      }\n    ],\n    \"paths\": {\n  \t  \"/pets\": {\n        \"get\": {\n          \"summary\": \"List all pets\",\n          \"operationId\": \"listPets\",\n          \"parameters\": [\n            {\n              \"name\": \"limit\",\n              \"in\": \"query\",\n              \"description\": \"limit\",\n              \"required\": false,\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            }\n          ],\n          \"responses\": {\n            \"default\": {\n              \"description\": \"unexpected error\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Error\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"schemas\": {\n        \"Error\": {\n          \"required\": [\n            \"code\",\n            \"message\"\n          ],\n          \"properties\": {\n            \"code\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"message\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }\n}"
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/import/openapi",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "import",
                            "openapi"
                          ],
                          "variable": [
                            {
                              "key": "import_type",
                              "value": "openapi"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"collections\": [\n        {\n            \"id\": \"e956ff02-7597-4f8d-a5e7-1c18208c9e56\",\n            \"name\": \"Swagger Petstore\",\n            \"uid\": \"2282-e956ff02-7597-4f8d-a5e7-1c18208c9e56\"\n        }\n    ]\n}"
                    },
                    {
                      "id": "f24523ef-bbb1-4ea4-8ba1-142ecf972a25",
                      "name": "Success: Import a file",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "type",
                              "value": "file",
                              "type": "text"
                            },
                            {
                              "key": "input",
                              "description": "A file with the specifications",
                              "type": "file",
                              "src": [
                                ""
                              ]
                            }
                          ]
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/import/openapi",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "import",
                            "openapi"
                          ],
                          "variable": [
                            {
                              "key": "import_type",
                              "value": ""
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"collections\": [\n        {\n            \"id\": \"c74f2169-0c59-49f6-b04f-fdec4aba3db3\",\n            \"name\": \"demo\",\n            \"uid\": \"2282-c74f2169-0c59-49f6-b04f-fdec4aba3db3\"\n        },\n        {\n            \"id\": \"49b08197-6b3d-4957-88d3-dbba0e3ee6a0\",\n            \"name\": \"demo\",\n            \"uid\": \"2282-49b08197-6b3d-4957-88d3-dbba0e3ee6a0\"\n        }\n    ]\n}"
                    },
                    {
                      "id": "a233a90d-ae07-4b7f-b347-0922ec5120ab",
                      "name": "Success: Import - Stringified body",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"type\": \"string\",\n  \"input\": \" {\\r\\n    \\\"openapi\\\": \\\"3.0.0\\\",\\r\\n    \\\"info\\\": {\\r\\n  \\t  \\\"version\\\": \\\"1.0.0\\\",\\r\\n  \\t  \\\"title\\\": \\\"Swagger Petstore\\\",\\r\\n  \\t  \\\"license\\\": {\\r\\n  \\t    \\\"name\\\": \\\"MIT\\\"\\r\\n  \\t  }\\r\\n    },\\r\\n    \\\"servers\\\": [\\r\\n      {\\r\\n        \\\"url\\\": \\\"http:\\/\\/petstore.swagger.io\\/v1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"paths\\\": {\\r\\n  \\t  \\\"\\/pets\\\": {\\r\\n        \\\"get\\\": {\\r\\n          \\\"summary\\\": \\\"List all pets\\\",\\r\\n          \\\"operationId\\\": \\\"listPets\\\",\\r\\n          \\\"parameters\\\": [\\r\\n            {\\r\\n              \\\"name\\\": \\\"limit\\\",\\r\\n              \\\"in\\\": \\\"query\\\",\\r\\n              \\\"description\\\": \\\"limit\\\",\\r\\n              \\\"required\\\": false,\\r\\n              \\\"schema\\\": {\\r\\n                \\\"type\\\": \\\"integer\\\",\\r\\n                \\\"format\\\": \\\"int32\\\"\\r\\n              }\\r\\n            }\\r\\n          ],\\r\\n          \\\"responses\\\": {\\r\\n            \\\"default\\\": {\\r\\n              \\\"description\\\": \\\"unexpected error\\\",\\r\\n              \\\"content\\\": {\\r\\n                \\\"application\\/json\\\": {\\r\\n                  \\\"schema\\\": {\\r\\n                    \\\"$ref\\\": \\\"#\\/components\\/schemas\\/Error\\\"\\r\\n                  }\\r\\n                }\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    },\\r\\n    \\\"components\\\": {\\r\\n      \\\"schemas\\\": {\\r\\n        \\\"Error\\\": {\\r\\n          \\\"required\\\": [\\r\\n            \\\"code\\\",\\r\\n            \\\"message\\\"\\r\\n          ],\\r\\n          \\\"properties\\\": {\\r\\n            \\\"code\\\": {\\r\\n              \\\"type\\\": \\\"integer\\\",\\r\\n              \\\"format\\\": \\\"int32\\\"\\r\\n            },\\r\\n            \\\"message\\\": {\\r\\n              \\\"type\\\": \\\"string\\\"\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\"\n}"
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/import/openapi",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "import",
                            "openapi"
                          ],
                          "variable": [
                            {
                              "key": "import_type",
                              "value": "openapi"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"collections\": [\n        {\n            \"id\": \"401fcf93-9c45-4832-9616-6c6b698eeda6\",\n            \"name\": \"Swagger Petstore\",\n            \"uid\": \"2282-401fcf93-9c45-4832-9616-6c6b698eeda6\"\n        }\n    ]\n}"
                    },
                    {
                      "id": "de0605ec-13a3-4ce0-82b2-d9cecc83354d",
                      "name": "Success: Import to a specific workspace with workspace ID passed as a query parameter",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"type\" : \"json\",\n  \"input\": {\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n  \t  \"version\": \"1.0.0\",\n  \t  \"title\": \"Swagger Petstore\",\n  \t  \"license\": {\n  \t    \"name\": \"MIT\"\n  \t  }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://petstore.swagger.io/v1\"\n      }\n    ],\n    \"paths\": {\n  \t  \"/pets\": {\n        \"get\": {\n          \"summary\": \"List all pets\",\n          \"operationId\": \"listPets\",\n          \"parameters\": [\n            {\n              \"name\": \"limit\",\n              \"in\": \"query\",\n              \"description\": \"limit\",\n              \"required\": false,\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            }\n          ],\n          \"responses\": {\n            \"default\": {\n              \"description\": \"unexpected error\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Error\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"schemas\": {\n        \"Error\": {\n          \"required\": [\n            \"code\",\n            \"message\"\n          ],\n          \"properties\": {\n            \"code\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"message\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }\n}"
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/import/openapi?workspace={{workspaceId}}",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "import",
                            "openapi"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}"
                            }
                          ],
                          "variable": [
                            {
                              "key": "import_type",
                              "value": "openapi"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"collections\": [\n        {\n            \"id\": \"b31be584-1b1e-4444-b581-761edf88fe77\",\n            \"name\": \"Swagger Petstore\",\n            \"uid\": \"2282-b31be584-1b1e-4444-b581-761edf88fe77\"\n        }\n    ]\n}"
                    },
                    {
                      "id": "0d473efd-a03a-4d09-bd20-152c4ff4b862",
                      "name": "Error: Invalid Params",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"type\" : \"invalid_type\",\n  \"input\": {\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n  \t  \"version\": \"1.0.0\",\n  \t  \"title\": \"Swagger Petstore\",\n  \t  \"license\": {\n  \t    \"name\": \"MIT\"\n  \t  }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://petstore.swagger.io/v1\"\n      }\n    ],\n    \"paths\": {\n  \t  \"/pets\": {\n        \"get\": {\n          \"summary\": \"List all pets\",\n          \"operationId\": \"listPets\",\n          \"parameters\": [\n            {\n              \"name\": \"limit\",\n              \"in\": \"query\",\n              \"description\": \"limit\",\n              \"required\": false,\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            }\n          ],\n          \"responses\": {\n            \"default\": {\n              \"description\": \"unexpected error\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Error\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"schemas\": {\n        \"Error\": {\n          \"required\": [\n            \"code\",\n            \"message\"\n          ],\n          \"properties\": {\n            \"code\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"message\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }\n}"
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/import/openapi",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "import",
                            "openapi"
                          ],
                          "variable": [
                            {
                              "key": "import_type",
                              "value": "openapi"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"invalidParamsError\",\n        \"message\": \"The request body has invalid values for the type parameter. Value must be one of file, string, json\",\n        \"details\": {\n            \"param\": \"type\"\n        }\n    }\n}"
                    },
                    {
                      "id": "4c64e5b0-a2c1-4036-8baa-53e56dc914eb",
                      "name": "Error: Param Missing",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "formdata",
                          "formdata": []
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/import/openapi",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "import",
                            "openapi"
                          ],
                          "variable": [
                            {
                              "key": "import_type",
                              "value": "openapi"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"paramMissingError\",\n        \"message\": \"The request body is missing a value for the type parameter. Check your request and try again.\",\n        \"details\": {\n            \"param\": \"type\"\n        }\n    }\n}"
                    },
                    {
                      "id": "3f6f655c-4706-4bbb-a6f7-8aba1c4775c9",
                      "name": "Error: Malformed Request",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"type\" : \"json\",\n  \"input\": {\n    \"info\": {\n  \t  \"version\": \"1.0.0\",\n  \t  \"title\": \"Swagger Petstore\",\n  \t  \"license\": {\n  \t    \"name\": \"MIT\"\n  \t  }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://petstore.swagger.io/v1\"\n      }\n    ],\n    \"paths\": {\n  \t  \"/pets\": {\n        \"get\": {\n          \"summary\": \"List all pets\",\n          \"operationId\": \"listPets\",\n          \"parameters\": [\n            {\n              \"name\": \"limit\",\n              \"in\": \"query\",\n              \"description\": \"limit\",\n              \"required\": false,\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            }\n          ],\n          \"responses\": {\n            \"default\": {\n              \"description\": \"unexpected error\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Error\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"schemas\": {\n        \"Error\": {\n          \"required\": [\n            \"code\",\n            \"message\"\n          ],\n          \"properties\": {\n            \"code\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"message\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }\n}"
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/import/openapi",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "import",
                            "openapi"
                          ],
                          "variable": [
                            {
                              "key": "import_type",
                              "value": "openapi"
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"malformedRequestError\",\n        \"message\": \"The specified openapi data is invalid. Please fix the following details as per the spec.\",\n        \"details\": \"Specification must contain a semantic version number of the OAS specification\"\n    }\n}"
                    }
                  ]
                },
                {
                  "name": "Import exported data",
                  "id": "c43e51e6-3246-44d9-8005-d85880c69de6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "name": "Content-Type",
                        "key": "Content-Type",
                        "value": "multipart/form-data"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "type",
                          "value": "file",
                          "type": "text"
                        },
                        {
                          "key": "file",
                          "description": "File containing the exported collections or environments",
                          "type": "file",
                          "value": null
                        }
                      ]
                    },
                    "url": "https://api.getpostman.com/import/exported",
                    "description": "This endpoint allows you to import your exported Postman data.\nFor more information about how you can export your data, refer <a href=\"https://go.postman.co/me/export\">Export your Postman data.</a>\n\nOn successful imports, the response will be an array with Each element contaning `id`, `name` and `uid` of entities created.\n\n**Note**: Refer to examples for different scenarios.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header."
                  },
                  "response": [
                    {
                      "id": "5e34d4f0-4090-4041-9a70-cc2e96e72d80",
                      "name": "Success: Import to a specific workspace with workspace ID passed in the headers",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "X-Workspace-Id",
                            "value": "{{workspaceId}}"
                          },
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "type",
                              "value": "file",
                              "type": "text"
                            },
                            {
                              "key": "file",
                              "type": "file",
                              "src": [
                                ""
                              ]
                            }
                          ]
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/import/exported",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "import",
                            "exported"
                          ],
                          "variable": [
                            {
                              "key": "import_type",
                              "value": "openapi"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"collections\": [\n        {\n            \"id\": \"e956ff02-7597-4f8d-a5e7-1c18208c9e56\",\n            \"name\": \"Swagger Petstore\",\n            \"uid\": \"2282-e956ff02-7597-4f8d-a5e7-1c18208c9e56\"\n        }\n    ]\n}"
                    },
                    {
                      "id": "7582a9cf-cda0-47b5-8cd8-822b5ee0e1ba",
                      "name": "Error: Invalid Params",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "type",
                              "value": "invalid_type",
                              "type": "text"
                            },
                            {
                              "key": "input",
                              "type": "file",
                              "src": [
                                ""
                              ]
                            }
                          ]
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/import/exported",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "import",
                            "exported"
                          ],
                          "variable": [
                            {
                              "key": "import_type",
                              "value": "openapi"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"invalidParamsError\",\n        \"message\": \"The request body has invalid values for the type parameter. Value must be one of file, string, json\",\n        \"details\": {\n            \"param\": \"type\"\n        }\n    }\n}"
                    },
                    {
                      "id": "61ae0042-8b37-424f-910d-95a6c41e6b37",
                      "name": "Success: Import the exported file",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "type",
                              "value": "file",
                              "type": "text"
                            },
                            {
                              "key": "input",
                              "description": "File containing your exported collections and environments",
                              "type": "file",
                              "src": [
                                ""
                              ]
                            }
                          ]
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/import/exported",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "import",
                            "exported"
                          ],
                          "variable": [
                            {
                              "key": "import_type",
                              "value": ""
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"collections\": [\n        {\n            \"id\": \"c74f2169-0c59-49f6-b04f-fdec4aba3db3\",\n            \"name\": \"demo\",\n            \"uid\": \"2282-c74f2169-0c59-49f6-b04f-fdec4aba3db3\"\n        },\n        {\n            \"id\": \"49b08197-6b3d-4957-88d3-dbba0e3ee6a0\",\n            \"name\": \"demo\",\n            \"uid\": \"2282-49b08197-6b3d-4957-88d3-dbba0e3ee6a0\"\n        }\n    ]\n}"
                    },
                    {
                      "id": "cf2665f0-90ff-4c8a-a374-663d2f347a07",
                      "name": "Error: Param Missing",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "input",
                              "type": "file",
                              "src": [
                                ""
                              ]
                            }
                          ]
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/import/exported",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "import",
                            "exported"
                          ],
                          "variable": [
                            {
                              "key": "import_type",
                              "value": "openapi"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"error\": {\n        \"name\": \"paramMissingError\",\n        \"message\": \"The request body is missing a value for the type parameter. Check your request and try again.\",\n        \"details\": {\n            \"param\": \"type\"\n        }\n    }\n}"
                    },
                    {
                      "id": "a98bca18-b236-4f0e-abc0-f8dbfa6ac876",
                      "name": "Success: Import to a specific workspace with workspace ID passed as a query parameter",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "type",
                              "value": "file",
                              "type": "text"
                            },
                            {
                              "key": "input",
                              "type": "file",
                              "src": [
                                ""
                              ]
                            }
                          ]
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/import/exported?workspace={{workspaceId}}",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "import",
                            "exported"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}"
                            }
                          ],
                          "variable": [
                            {
                              "key": "import_type",
                              "value": "openapi"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"collections\": [\n        {\n            \"id\": \"b31be584-1b1e-4444-b581-761edf88fe77\",\n            \"name\": \"Swagger Petstore\",\n            \"uid\": \"2282-b31be584-1b1e-4444-b581-761edf88fe77\"\n        }\n    ]\n}"
                    }
                  ]
                }
              ],
              "id": "8e45c8e9-1d0c-4a84-8f25-8c3e35df777a",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "24dcc194-a4a3-4fca-807f-57847ab0f043",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "720d8a1d-5c17-4ecd-89b0-c3ec6473de1d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ]
            },
            {
              "name": "API",
              "item": [
                {
                  "name": "API Version",
                  "item": [
                    {
                      "name": "Create API Version",
                      "id": "17b97d47-7a3f-4399-9fd5-1848df00699e",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"version\": {\n\t\t\"name\": \"1.0\",\n\t\t\"source\": {\n\t\t\t\"id\": \"{{apiVersionId}}\",\n\t\t\t\"schema\": true,\n\t\t\t\"relations\": {\n\t\t\t\t\"monitor\": true,\n\t\t\t\t\"mock\": true,\n\t\t\t\t\"documentation\": true\n\t\t\t}\n\t\t}\n\t}\n}"
                        },
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions",
                        "description": "This call creates a new API version in the specified API.  \n\nRequest body should contain a `version` object which should have fields:\n\n<table>\n<tr>\n\t<td>name</td>\n\t<td>Required. Name of the API Version</td>\n</tr>\n<tr>\n\t<td>source</td>\n\t<td>\n\t\tIf specified, it will copy the contents of the specified api version to create a new api verison.\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<td>id</td>\n\t\t\t\t<td>Required. Id of the apiversion from where the details are to be copied</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>schema</td>\n\t\t\t\t<td>Boolean. If true then copies the schema from the specified api version</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>relations</td>\n\t\t\t\t<td>Object. {\"&lt;relationType&gt;\": true/false}.  \n\t\t\t\t\tAllowed relation types are `mock`, `monitor`, `documentation`, `contracttest`, `integrationtest`, `testsuite`, `environment`\n\t\t\t\tRelation types which should be copied over to the new api verison</td>\n\t\t\t</tr>\n\t\t</table>\n\t</td>\n</tr>\n</table>\n\nResponse contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "521719ae-7640-4f5d-828e-3cf3cabfc378",
                          "name": "Create API version",
                          "originalRequest": {
                            "method": "POST",
                            "header": [
                              {
                                "name": "Content-Type",
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n\t\"version\": {\n\t\t\"name\": \"1.0\",\n\t\t\"source\": {\n\t\t\t\"id\": \"{{apiVersionId}}\",\n\t\t\t\"schema\": true,\n\t\t\t\"relations\": {\n\t\t\t\t\"monitor\": true,\n\t\t\t\t\"mock\": true,\n\t\t\t\t\"documentation\": true\n\t\t\t}\n\t\t}\n\t}\n}"
                            },
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json",
                              "description": {
                                "content": "",
                                "type": "text/plain"
                              }
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n\t\"version\": {\n\t\t\"id\": \"d71cf403-c549-4c7c-9dc6-a6a105acf67c\",\n\t\t\"name\": \"1.0\",\n    \t\"api\": \"2b95d07c-8379-4bd1-924f-e7e1af185284\"\n\t}\n}"
                        }
                      ]
                    },
                    {
                      "name": "Update an API Version",
                      "id": "a34beb59-4d8f-4f09-947d-34881d68b61f",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"version\": {\n\t\t\"name\": \"2.0\"\n\t}\n}"
                        },
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}",
                        "description": "This call updates an existing API Version.  \n\nRequest body should contain a `version` object with the fields which need to be updated. Only field which can be updated is `name`.\n\nResponse contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api` etc.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "6943cdc0-918c-4de4-8966-6248ad63dc51",
                          "name": "Update an API version",
                          "originalRequest": {
                            "method": "PUT",
                            "header": [
                              {
                                "name": "Content-Type",
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n\t\"version\": {\n\t\t\"name\": \"2.0\"\n\t}\n}"
                            },
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{versionId}}"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json",
                              "description": {
                                "content": "",
                                "type": "text/plain"
                              }
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n\t\"version\": {\n\t\t\"id\": \"d71cf403-c549-4c7c-9dc6-a6a105acf67c\",\n\t    \"name\": \"2.0\",\n\t    \"createdAt\": \"2019-07-26T11:24:15.000Z\",\n\t    \"updatedAt\": \"2019-08-09T09:27:36.000Z\",\n\t    \"api\": \"2b95d07c-8379-4bd1-924f-e7e1af185284\",\n\t    \"createdBy\": \"12\",\n\t    \"updatedBy\": \"5665\"\n\t}\n}"
                        }
                      ]
                    },
                    {
                      "name": "Delete an API Version",
                      "id": "102cda05-8eff-4277-9a93-be1122533e99",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}",
                        "description": "This call deletes an existing API Version having the specified id.  \n\nResponse contains an `version` object with `id` of the API Version which was deleted.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "e535e27e-b7ef-48c5-b9cf-3e4e276cc1d1",
                          "name": "Delete an API version",
                          "originalRequest": {
                            "method": "DELETE",
                            "header": [],
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{versionId}}"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json",
                              "description": {
                                "content": "",
                                "type": "text/plain"
                              }
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n\t\"version\": {\n\t\t\"id\": \"03c17f53-7e2e-427d-b55a-006b244f29ff\"\n\t}\n}"
                        }
                      ]
                    },
                    {
                      "name": "Get an API Version",
                      "id": "daae847c-3fd7-45de-b3fc-2b34edd8ec4c",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}",
                        "description": "This call fetches details about the specified API Version.\n\nThe response will contain a `version` object which would contain all the details of the API Version.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "d5fc669d-6c74-4995-8738-673820097949",
                          "name": "Get an API version",
                          "originalRequest": {
                            "method": "GET",
                            "header": [],
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{versionId}}"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json",
                              "description": {
                                "content": "",
                                "type": "text/plain"
                              }
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n\t\"version\": {\n\t\t\"id\": \"03c17f53-7e2e-427d-b55a-006b244f29ff\",\n\t    \"name\": \"0.1\",\n\t    \"api\": \"06e41ca3-8bea-4bc5-a726-70338b9f1940\",\n\t    \"schema\": [\n\t      \"3484cd1e-e00d-4c39-aea4-539663afe898\"\n\t    ],\n\t    \"createdBy\": \"5665\",\n\t    \"updatedBy\": \"5665\",\n\t    \"createdAt\": \"2019-07-21T16:31:15.000Z\",\n\t    \"updatedAt\": \"2019-07-21T16:31:15.000Z\"\n\t}\n}"
                        }
                      ]
                    },
                    {
                      "name": "Get All API Versions",
                      "id": "831c7fe0-a03a-49a9-a762-f0c8c6e853fb",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions",
                        "description": "This call fetches details about the all the API Versions in the specified API.\n\nThe response will contain an array `versions` object which would be a list of all the API Version along with their details.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "a6fb5112-fa94-444d-b73a-7723a503ba0c",
                          "name": "Get All API versions",
                          "originalRequest": {
                            "method": "GET",
                            "header": [],
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json",
                              "description": {
                                "content": "",
                                "type": "text/plain"
                              }
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n\t\"versions\": [\n\t\t{\n\t      \"id\": \"024660a6-c837-46ca-91d8-7e8dd7c669de\",\n\t      \"name\": \"0.1\",\n\t      \"summary\": \"Summary\",\n\t      \"description\": \"Description\",\n\t      \"createdBy\": \"5665\",\n\t      \"createdAt\": \"2019-02-12 19:34:49\",\n\t      \"updatedAt\": \"2019-02-12 19:34:49\"\n\t    },\n\t    {\n\t      \"id\": \"00932d3b-20f1-454f-a77e-38b4023163ea\",\n\t      \"name\": \"0.2\",\n\t      \"summary\": \"Summary\",\n\t      \"description\": \"Description\",\n\t      \"createdBy\": \"5665\",\n\t      \"createdAt\": \"2019-02-12 19:34:49\",\n\t      \"updatedAt\": \"2019-02-12 19:34:49\"\n\t    }\n\t]\n}"
                        }
                      ]
                    }
                  ],
                  "id": "93576fa1-5b2d-4a60-8d3b-e3cda350a121",
                  "description": "This folder contains the requests around API versions.",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "2f7b7ea4-9a14-4ed2-8a58-8b7f51155ec3",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "070a979a-4368-47fa-857f-ceaa54fdbbda",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Schema",
                  "item": [
                    {
                      "name": "Create Schema",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "04ba1ed1-2caf-4d54-8de5-97440bb1ec1f",
                            "type": "text/javascript",
                            "exec": [
                              "const schema = {",
                              "  \"openapi\": \"3.0.0\",",
                              "  \"info\": null,",
                              "  \"version\": \"v1.0\",",
                              "  \"title\": \"APi\",",
                              "  \"servers\": [",
                              "    {",
                              "      \"url\": \"http://localhost:3000\"",
                              "    }",
                              "  ],",
                              "  \"paths\": {",
                              "    \"/user\": {",
                              "      \"get\": {",
                              "        \"summary\": \"Returns details about a particular user\",",
                              "        \"operationId\": \"listUser\",",
                              "        \"tags\": [",
                              "          \"user\"",
                              "        ],",
                              "        \"parameters\": [",
                              "          {",
                              "            \"name\": \"id\",",
                              "            \"in\": \"query\",",
                              "            \"description\": \"ID of the user\",",
                              "            \"required\": true,",
                              "            \"schema\": {",
                              "              \"type\": \"integer\",",
                              "              \"format\": \"int32\"",
                              "            }",
                              "          }",
                              "        ],",
                              "        \"responses\": {",
                              "          \"200\": {",
                              "            \"description\": \"Details about a user by ID\",",
                              "            \"headers\": {",
                              "              \"x-next\": {",
                              "                \"description\": \"A link to the next page of responses\",",
                              "                \"schema\": {",
                              "                  \"type\": \"string\"",
                              "                }",
                              "              }",
                              "            },",
                              "            \"content\": {",
                              "              \"application/json\": {",
                              "                \"schema\": {",
                              "                  \"$ref\": \"\\\\'#/components/schemas/User\\\\'\"",
                              "                }",
                              "              }",
                              "            }",
                              "          },",
                              "          \"default\": {",
                              "            \"description\": \"Unexpected error\",",
                              "            \"content\": {",
                              "              \"application/json\": {",
                              "                \"schema\": {",
                              "                  \"$ref\": \"\\\\'#/components/schemas/Error\\\\'\"",
                              "                }",
                              "              }",
                              "            }",
                              "          }",
                              "        }",
                              "      }",
                              "    }",
                              "  },",
                              "  \"components\": {",
                              "    \"schemas\": {",
                              "      \"User\": {",
                              "        \"type\": \"object\",",
                              "        \"required\": [",
                              "          \"id\",",
                              "          \"name\"",
                              "        ],",
                              "        \"properties\": {",
                              "          \"id\": {",
                              "            \"type\": \"integer\",",
                              "            \"format\": \"int64\"",
                              "          },",
                              "          \"name\": {",
                              "            \"type\": \"string\"",
                              "          },",
                              "          \"tag\": {",
                              "            \"type\": \"string\"",
                              "          }",
                              "        }",
                              "      },",
                              "      \"Error\": {",
                              "        \"type\": \"object\",",
                              "        \"required\": [",
                              "          \"code\",",
                              "          \"message\"",
                              "        ],",
                              "        \"properties\": {",
                              "          \"code\": {",
                              "            \"type\": \"integer\",",
                              "            \"format\": \"int32\"",
                              "          },",
                              "          \"message\": {",
                              "            \"type\": \"string\"",
                              "          }",
                              "        }",
                              "      }",
                              "    }",
                              "  }",
                              "};",
                              "",
                              "pm.environment.set('schema', JSON.stringify(JSON.stringify(schema)));"
                            ]
                          }
                        }
                      ],
                      "id": "e30dde40-16d1-4975-a7ec-6bc5c0b601ff",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"schema\": {\n\t\t\"language\": \"yaml\",\n\t\t\"schema\": \"{\\n  \\\"openapi\\\": \\\"3.0.0\\\",\\n  \\\"info\\\": null,\\n  \\\"version\\\": \\\"v1.0\\\",\\n  \\\"title\\\": \\\"APi\\\",\\n  \\\"servers\\\": [\\n    {\\n      \\\"url\\\": \\\"http:\\/\\/localhost:3000\\\"\\n    }\\n  ],\\n  \\\"paths\\\": {\\n    \\\"\\/user\\\": {\\n      \\\"get\\\": {\\n        \\\"summary\\\": \\\"Returns details about a particular user\\\",\\n        \\\"operationId\\\": \\\"listUser\\\",\\n        \\\"tags\\\": [\\n          \\\"user\\\"\\n        ],\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"in\\\": \\\"query\\\",\\n            \\\"description\\\": \\\"ID of the user\\\",\\n            \\\"required\\\": true,\\n            \\\"schema\\\": {\\n              \\\"type\\\": \\\"integer\\\",\\n              \\\"format\\\": \\\"int32\\\"\\n            }\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"Details about a user by ID\\\",\\n            \\\"headers\\\": {\\n              \\\"x-next\\\": {\\n                \\\"description\\\": \\\"A link to the next page of responses\\\",\\n                \\\"schema\\\": {\\n                  \\\"type\\\": \\\"string\\\"\\n                }\\n              }\\n            },\\n            \\\"content\\\": {\\n              \\\"application\\/json\\\": {\\n                \\\"schema\\\": {\\n                  \\\"$ref\\\": \\\"\\\\\\\\'#\\/components\\/schemas\\/User\\\\\\\\'\\\"\\n                }\\n              }\\n            }\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"Unexpected error\\\",\\n            \\\"content\\\": {\\n              \\\"application\\/json\\\": {\\n                \\\"schema\\\": {\\n                  \\\"$ref\\\": \\\"\\\\\\\\'#\\/components\\/schemas\\/Error\\\\\\\\'\\\"\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  },\\n  \\\"components\\\": {\\n    \\\"schemas\\\": {\\n      \\\"User\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"required\\\": [\\n          \\\"id\\\",\\n          \\\"name\\\"\\n        ],\\n        \\\"properties\\\": {\\n          \\\"id\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int64\\\"\\n          },\\n          \\\"name\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          },\\n          \\\"tag\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        }\\n      },\\n      \\\"Error\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"required\\\": [\\n          \\\"code\\\",\\n          \\\"message\\\"\\n        ],\\n        \\\"properties\\\": {\\n          \\\"code\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int32\\\"\\n          },\\n          \\\"message\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\",\n\t\t\"type\": \"openapi3\"\n\t}\n}"
                        },
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas",
                        "description": "This call creates a new schema.\n\nRequest body should contain a `schema` object which should atleast have these properties with `string` values:\n\n- **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.\n- **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.\n- **`schema`**: Optional. If passed, must be the content of the schema as a `string`.\n\nResponse contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "4073534b-1d02-4d1a-a924-bcbffe0d495e",
                          "name": "Create schema",
                          "originalRequest": {
                            "method": "POST",
                            "header": [
                              {
                                "name": "Content-Type",
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n\t\"schema\": {\n\t\t\"language\": \"yaml\",\n\t\t\"schema\": \"openapi: \\\"3.0.0\\\"↵info:↵  version: 1.0.0↵  title: Swagger Petstore↵  license:↵    name: MIT↵servers:↵  - url: http://petstore.swagger.io/v1↵paths:↵  /pets:↵    get:↵      summary: List all pets↵      operationId: listPets↵      tags:↵        - pets↵      parameters:↵        - name: limit↵          in: query↵          description: How many items to return at one time (max 100)↵          required: false↵          schema:↵            type: integer↵            format: int32↵      responses:↵        200:↵          description: An paged array of pets↵          headers:↵            x-next:↵              description: A link to the next page of responses↵              schema:↵                type: string↵          content:↵            application/json:    ↵              schema:↵                $ref: \\\"#/components/schemas/Pets\\\"↵        default:↵          description: unexpected error↵          content:↵            application/json:↵              schema:↵                $ref: \\\"#/components/schemas/Error\\\"↵    post:↵      summary: Create a pet↵      operationId: createPets↵      tags:↵        - pets↵      responses:↵        201:↵          description: Null response↵        default:↵          description: unexpected error↵          content:↵            application/json:↵              schema:↵                $ref: \\\"#/components/schemas/Error\\\"\",\n\t\t\"type\": \"openapi3\"\n\t}\n}"
                            },
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{versionId}}/schemas"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json",
                              "description": {
                                "content": "",
                                "type": "text/plain"
                              }
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n\t\"schema\": {\n\t\t\"id\": \"e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822\",\n\t\t\"language\": \"yaml\",\n\t\t\"apiVersion\": \"ad810c39-df60-434e-a76f-a2192cd8d81f\",\n\t\t\"type\": \"openapi3\",\n\t\t\"createdBy\": \"5665\",\n        \"updateBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t}\n}"
                        }
                      ]
                    },
                    {
                      "name": "Update Schema",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "479a99bf-5d21-4a6e-b350-8fb82b36e4b0",
                            "type": "text/javascript",
                            "exec": [
                              "const schema = {",
                              "  \"openapi\": \"3.0.0\",",
                              "  \"info\": null,",
                              "  \"version\": \"v1.0\",",
                              "  \"title\": \"APi\",",
                              "  \"servers\": [",
                              "    {",
                              "      \"url\": \"http://localhost:3000\"",
                              "    }",
                              "  ],",
                              "  \"paths\": {",
                              "    \"/user\": {",
                              "      \"get\": {",
                              "        \"summary\": \"Returns details about a particular user\",",
                              "        \"operationId\": \"listUser\",",
                              "        \"tags\": [",
                              "          \"user\"",
                              "        ],",
                              "        \"parameters\": [",
                              "          {",
                              "            \"name\": \"id\",",
                              "            \"in\": \"query\",",
                              "            \"description\": \"ID of the user\",",
                              "            \"required\": true,",
                              "            \"schema\": {",
                              "              \"type\": \"integer\",",
                              "              \"format\": \"int32\"",
                              "            }",
                              "          }",
                              "        ],",
                              "        \"responses\": {",
                              "          \"200\": {",
                              "            \"description\": \"Details about a user by ID\",",
                              "            \"headers\": {",
                              "              \"x-next\": {",
                              "                \"description\": \"A link to the next page of responses\",",
                              "                \"schema\": {",
                              "                  \"type\": \"string\"",
                              "                }",
                              "              }",
                              "            },",
                              "            \"content\": {",
                              "              \"application/json\": {",
                              "                \"schema\": {",
                              "                  \"$ref\": \"\\\\'#/components/schemas/User\\\\'\"",
                              "                }",
                              "              }",
                              "            }",
                              "          },",
                              "          \"default\": {",
                              "            \"description\": \"Unexpected error\",",
                              "            \"content\": {",
                              "              \"application/json\": {",
                              "                \"schema\": {",
                              "                  \"$ref\": \"\\\\'#/components/schemas/Error\\\\'\"",
                              "                }",
                              "              }",
                              "            }",
                              "          }",
                              "        }",
                              "      }",
                              "    }",
                              "  },",
                              "  \"components\": {",
                              "    \"schemas\": {",
                              "      \"User\": {",
                              "        \"type\": \"object\",",
                              "        \"required\": [",
                              "          \"id\",",
                              "          \"name\"",
                              "        ],",
                              "        \"properties\": {",
                              "          \"id\": {",
                              "            \"type\": \"integer\",",
                              "            \"format\": \"int64\"",
                              "          },",
                              "          \"name\": {",
                              "            \"type\": \"string\"",
                              "          },",
                              "          \"tag\": {",
                              "            \"type\": \"string\"",
                              "          }",
                              "        }",
                              "      },",
                              "      \"Error\": {",
                              "        \"type\": \"object\",",
                              "        \"required\": [",
                              "          \"code\",",
                              "          \"message\"",
                              "        ],",
                              "        \"properties\": {",
                              "          \"code\": {",
                              "            \"type\": \"integer\",",
                              "            \"format\": \"int32\"",
                              "          },",
                              "          \"message\": {",
                              "            \"type\": \"string\"",
                              "          }",
                              "        }",
                              "      }",
                              "    }",
                              "  }",
                              "};",
                              "",
                              "pm.environment.set('schema', JSON.stringify(JSON.stringify(schema)));"
                            ]
                          }
                        }
                      ],
                      "id": "12a2f268-5c91-42bf-b1cc-2ee0b229a186",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"schema\": {\n\t\t\"language\": \"json\",\n\t\t\"schema\": \"{\\n  \\\"openapi\\\": \\\"3.0.0\\\",\\n  \\\"info\\\": null,\\n  \\\"version\\\": \\\"v1.0\\\",\\n  \\\"title\\\": \\\"APi\\\",\\n  \\\"servers\\\": [\\n    {\\n      \\\"url\\\": \\\"http:\\/\\/localhost:3000\\\"\\n    }\\n  ],\\n  \\\"paths\\\": {\\n    \\\"\\/user\\\": {\\n      \\\"get\\\": {\\n        \\\"summary\\\": \\\"Returns details about a particular user\\\",\\n        \\\"operationId\\\": \\\"listUser\\\",\\n        \\\"tags\\\": [\\n          \\\"user\\\"\\n        ],\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"in\\\": \\\"query\\\",\\n            \\\"description\\\": \\\"ID of the user\\\",\\n            \\\"required\\\": true,\\n            \\\"schema\\\": {\\n              \\\"type\\\": \\\"integer\\\",\\n              \\\"format\\\": \\\"int32\\\"\\n            }\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"Details about a user by ID\\\",\\n            \\\"headers\\\": {\\n              \\\"x-next\\\": {\\n                \\\"description\\\": \\\"A link to the next page of responses\\\",\\n                \\\"schema\\\": {\\n                  \\\"type\\\": \\\"string\\\"\\n                }\\n              }\\n            },\\n            \\\"content\\\": {\\n              \\\"application\\/json\\\": {\\n                \\\"schema\\\": {\\n                  \\\"$ref\\\": \\\"\\\\\\\\'#\\/components\\/schemas\\/User\\\\\\\\'\\\"\\n                }\\n              }\\n            }\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"Unexpected error\\\",\\n            \\\"content\\\": {\\n              \\\"application\\/json\\\": {\\n                \\\"schema\\\": {\\n                  \\\"$ref\\\": \\\"\\\\\\\\'#\\/components\\/schemas\\/Error\\\\\\\\'\\\"\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  },\\n  \\\"components\\\": {\\n    \\\"schemas\\\": {\\n      \\\"User\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"required\\\": [\\n          \\\"id\\\",\\n          \\\"name\\\"\\n        ],\\n        \\\"properties\\\": {\\n          \\\"id\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int64\\\"\\n          },\\n          \\\"name\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          },\\n          \\\"tag\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        }\\n      },\\n      \\\"Error\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"required\\\": [\\n          \\\"code\\\",\\n          \\\"message\\\"\\n        ],\\n        \\\"properties\\\": {\\n          \\\"code\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int32\\\"\\n          },\\n          \\\"message\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\",\n\t\t\"type\": \"openapi3\"\n\t}\n}"
                        },
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}",
                        "description": "This call updates an existing schema.\n\nRequest body should contain a `schema` object which should atleast have these properties with `string` values:\n\n- **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.\n- **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.\n- **`schema`**: Optional. If passed, must be the content of the schema as a `string`.\n\nResponse contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "c6e4f230-46c1-49fd-b02d-64bc2dc251bd",
                          "name": "Update schema",
                          "originalRequest": {
                            "method": "PUT",
                            "header": [
                              {
                                "name": "Content-Type",
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n\t\"schema\": {\n\t\t\"language\": \"yaml\",\n\t\t\"schema\": \"new schema\",\n\t\t\"type\": \"openapi3\"\n\t}\n}"
                            },
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{versionId}}/schemas/{{schemaId}}"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json",
                              "description": {
                                "content": "",
                                "type": "text/plain"
                              }
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n\t\"schema\": {\n\t\t\"id\": \"e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822\",\n\t\t\"language\": \"yaml\",\n\t\t\"apiVersion\": \"ad810c39-df60-434e-a76f-a2192cd8d81f\",\n\t\t\"type\": \"openapi3\",\n\t\t\"createdBy\": \"5665\",\n        \"updateBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t}\n}"
                        }
                      ]
                    },
                    {
                      "name": "Get Schema",
                      "id": "002d92c6-df3f-4c1b-ac80-2edd6e4286b3",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}",
                        "description": "This call fetches a single schema having the specified id.\n\nResponse contains a `schema` object with all the details related to the schema, namely, `id`, `language`, `type`, `schema` etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "cb37cd59-20f9-4a22-a2e5-ed091433f291",
                          "name": "Get schema",
                          "originalRequest": {
                            "method": "GET",
                            "header": [],
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json",
                              "description": {
                                "content": "",
                                "type": "text/plain"
                              }
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n\t\"schema\": {\n\t\t\"id\": \"e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822\",\n\t\t\"language\": \"yaml\",\n\t\t\"apiVersion\": \"ad810c39-df60-434e-a76f-a2192cd8d81f\",\n\t\t\"type\": \"openapi3\",\n\t\t\"createdBy\": \"5665\",\n        \"updateBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t}\n}"
                        }
                      ]
                    },
                    {
                      "name": "Create collection from schema",
                      "id": "64e8a5bd-607f-4ccf-ab0f-29491d9cfd20",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"name\": \"My generated collection\",\n\t\"relations\": [\n\t\t{\n\t\t\t\"type\": \"contracttest\"\n\t\t}\t\n\t]\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}/collections?workspace={{workspaceId}}",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis",
                            "{{apiId}}",
                            "versions",
                            "{{apiVersionId}}",
                            "schemas",
                            "{{schemaId}}",
                            "collections"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}"
                            }
                          ]
                        },
                        "description": "This call creates a collection and links it to an API as one or multiple relations. \n\nRequest body requires two keys:\n- `name` - Name of the collection to be created.\n- `relations` - A list of relation(s) to be created.\n\nThe allowed relation types are `contracttest`, `integrationtest`, `testsuite`, and `documentation`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "2558d3c5-b5c1-4383-b1b9-64361998478a",
                          "name": "Create collection from schema",
                          "originalRequest": {
                            "method": "POST",
                            "header": [],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n\t\"name\": \"My generated collection\",\n\t\"relations\": [\n\t\t{\n\t\t\t\"type\": \"contracttest\"\n\t\t}\t\n\t]\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}/collections?workspace={{workspaceId}}",
                              "protocol": "https",
                              "host": [
                                "api",
                                "getpostman",
                                "com"
                              ],
                              "path": [
                                "apis",
                                "{{apiId}}",
                                "versions",
                                "{{apiVersionId}}",
                                "schemas",
                                "{{schemaId}}",
                                "collections"
                              ],
                              "query": [
                                {
                                  "key": "workspace",
                                  "value": "{{workspaceId}}"
                                }
                              ]
                            }
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n    \"collection\": {\n        \"id\": \"e6b0d46a-8722-4f42-ab86-f5f473187ddf\",\n        \"uid\": \"112098-e6b0d46a-8722-4f42-ab86-f5f473187ddf\"\n    },\n    \"relations\": [\n        {\n            \"type\": \"contracttest\",\n            \"id\": \"4b40f06a-5a6a-448f-bfcd-a6dbcb68da22\"\n        }\n    ]\n}"
                        }
                      ]
                    }
                  ],
                  "id": "fe717216-121c-4cab-9f29-5805c82619b3",
                  "description": "This folder contains all the endpoints related to Schemas."
                },
                {
                  "name": "Relations",
                  "item": [
                    {
                      "name": "Get linked relations",
                      "id": "6c48fd69-c428-41a2-8bdf-4cdf22eae852",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations",
                        "description": "This call fetches all the relations which are linked to the specified API version along with their details.\n\nThe response will contain a `relations` object which lists all the relation types which are linked to the API version. Each of the relation type will be an object which details the relations of this type. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "9e1f40d1-6c41-4826-b030-588d0ebed027",
                          "name": "Get linked relations for an API version",
                          "originalRequest": {
                            "method": "GET",
                            "header": [],
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json",
                              "description": {
                                "content": "",
                                "type": "text/plain"
                              }
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n\t\"relations\": {\n\t\t\"contracttest\": {\n            \"2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2\": {\n                \"id\": \"2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2\",\n                \"name\": \"C test\",\n                \"updatedAt\": \"2019-08-29T10:18:11.000Z\"\n            }\n        },\n        \"integrationtest\": {\n            \"521b0486-ab91-4d3a-9189-43c9380a0533\": {\n                \"id\": \"521b0486-ab91-4d3a-9189-43c9380a0533\",\n                \"name\": \"C1\",\n                \"updatedAt\": \"2019-08-29T11:40:39.000Z\"\n            },\n            \"a236b715-e682-460b-97b6-c1db24f7612e\": {\n                \"id\": \"a236b715-e682-460b-97b6-c1db24f7612e\",\n                \"name\": \"C test\",\n                \"updatedAt\": \"2019-08-29T10:18:11.000Z\"\n            }\n        },\n        \"mock\": {\n            \"4ccd755f-2c80-481b-a262-49b55e12f5e1\": {\n                \"id\": \"4ccd755f-2c80-481b-a262-49b55e12f5e1\",\n                \"name\": \"Mock\",\n                \"url\": \"https://4ccd755f-2c80-481b-a262-49b55e12f5e1.mock-beta.pstmn.io\",\n                \"updatedAt\": \"2019-08-20T10:18:13.000Z\"\n            }\n        }\n\t}\n}"
                        }
                      ]
                    },
                    {
                      "name": "Get  documentation relations",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c814eab4-847f-4c91-89ba-10a8e2b1e112",
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "id": "895a3a7c-cdfe-4a65-9f28-43e15b032d88",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/documentation",
                        "description": "This call fetches all the relations by type which are linked to the specified API version along with their details.\n\nThe response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "3ac8e104-6670-44af-806d-721095157b45",
                          "name": "Get documentation relations",
                          "originalRequest": {
                            "method": "GET",
                            "header": [],
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations/documentation"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json",
                              "description": {
                                "content": "",
                                "type": "text/plain"
                              }
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n    \"documentation\": [\n        {\n            \"id\": \"2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2\",\n            \"name\": \"C test\",\n            \"updatedAt\": \"2019-08-29T10:18:11.000Z\",\n            \"collectionId\": \"7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745\"\n        },\n        {\n            \"id\": \"521b0486-ab91-4d3a-9189-43c9380a0533\",\n            \"name\": \"C1\",\n            \"updatedAt\": \"2019-08-29T11:40:39.000Z\",\n            \"collectionId\": \"7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725\"\n        }\n    ]\n}"
                        }
                      ]
                    },
                    {
                      "name": "Get environment relations",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "f1139bba-4a74-49ea-887e-64d1b0021bb0",
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "id": "2305f62d-8d30-4082-9c5a-bc255f049a82",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/environment",
                        "description": "This call fetches all the relations by type which are linked to the specified API version along with their details.\n\nThe response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "8dfc9c7a-c1b1-4716-89e2-f7fcc3ffa7b0",
                          "name": "Get environment relations",
                          "originalRequest": {
                            "method": "GET",
                            "header": [],
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations/environment"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json",
                              "description": {
                                "content": "",
                                "type": "text/plain"
                              }
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n    \"environment\": [\n        {\n            \"id\": \"2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2\",\n            \"name\": \"C test\",\n            \"updatedAt\": \"2019-08-29T10:18:11.000Z\"\n        },\n        {\n            \"id\": \"521b0486-ab91-4d3a-9189-43c9380a0533\",\n            \"name\": \"C1\",\n            \"updatedAt\": \"2019-08-29T11:40:39.000Z\"\n        }\n    ]\n}"
                        }
                      ]
                    },
                    {
                      "name": "Get test suite relations",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "11c2098f-4622-4253-a5fc-a30cdfb7f64c",
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "id": "0c69094f-1f3f-447f-b83f-cf92e480aa9e",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/testsuite",
                        "description": "This call fetches all the relations by type which are linked to the specified API version along with their details.\n\nThe response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "47532add-5e4e-4dcd-a08c-edfa8b99c5fd",
                          "name": "Get test suite relations",
                          "originalRequest": {
                            "method": "GET",
                            "header": [],
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations/testsuite"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json",
                              "description": {
                                "content": "",
                                "type": "text/plain"
                              }
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n    \"testsuite\": [\n        {\n            \"id\": \"2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2\",\n            \"name\": \"C test\",\n            \"updatedAt\": \"2019-08-29T10:18:11.000Z\",\n            \"collectionId\": \"7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745\"\n        },\n        {\n            \"id\": \"521b0486-ab91-4d3a-9189-43c9380a0533\",\n            \"name\": \"C1\",\n            \"updatedAt\": \"2019-08-29T11:40:39.000Z\",\n            \"collectionId\": \"7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725\"\n        }\n    ]\n}"
                        }
                      ]
                    },
                    {
                      "name": "Get contract test relations",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "f06dcddd-ed27-43ba-b4c6-98aa8ab4e3b3",
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "id": "3f5fa84a-78b7-4cab-94b9-75cc1f73ed45",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/contracttest",
                        "description": "This call fetches all the relations by type which are linked to the specified API version along with their details.\n\nThe response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "e5fb6124-3dc4-4934-901c-0fdf3388cd91",
                          "name": "Get contract test relations",
                          "originalRequest": {
                            "method": "GET",
                            "header": [],
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations/contracttest"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json",
                              "description": {
                                "content": "",
                                "type": "text/plain"
                              }
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n    \"contracttest\": [\n        {\n            \"id\": \"2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2\",\n            \"name\": \"C test\",\n            \"updatedAt\": \"2019-08-29T10:18:11.000Z\",\n            \"collectionId\": \"7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745\"\n        },\n        {\n            \"id\": \"521b0486-ab91-4d3a-9189-43c9380a0533\",\n            \"name\": \"C1\",\n            \"updatedAt\": \"2019-08-29T11:40:39.000Z\",\n            \"collectionId\": \"7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725\"\n        }\n    ]\n}"
                        }
                      ]
                    },
                    {
                      "name": "Get integration test relations",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "dfe8d14f-90ec-4020-b18c-2404a50eb0a4",
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "id": "e71c3042-7961-4710-aae2-9c946440cc41",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/integrationtest",
                        "description": "This call fetches all the relations by type which are linked to the specified API version along with their details.\n\nThe response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "6a0e6f1b-0f6a-4d85-ba1e-0346cd1c086d",
                          "name": "Get integration test relations",
                          "originalRequest": {
                            "method": "GET",
                            "header": [],
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations/integrationtest"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json",
                              "description": {
                                "content": "",
                                "type": "text/plain"
                              }
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n    \"integrationtest\": [\n        {\n            \"id\": \"2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2\",\n            \"name\": \"C test\",\n            \"updatedAt\": \"2019-08-29T10:18:11.000Z\",\n            \"collectionId\": \"7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745\"\n        },\n        {\n            \"id\": \"521b0486-ab91-4d3a-9189-43c9380a0533\",\n            \"name\": \"C1\",\n            \"updatedAt\": \"2019-08-29T11:40:39.000Z\",\n            \"collectionId\": \"7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725\"\n        }\n    ]\n}"
                        }
                      ]
                    },
                    {
                      "name": "Get monitor relations",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "85315c45-2356-416f-98bb-a365fdb57300",
                            "type": "text/javascript",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ]
                          }
                        }
                      ],
                      "id": "fa8d3a2e-9967-4dc2-8aa4-20928552af4b",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/monitor",
                        "description": "This call fetches all the relations by type which are linked to the specified API version along with their details.\n\nThe response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "ee61a596-0cc1-4921-9a7d-5d349b748159",
                          "name": "Get monitor relations",
                          "originalRequest": {
                            "method": "GET",
                            "header": [],
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations/monitor"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json",
                              "description": {
                                "content": "",
                                "type": "text/plain"
                              }
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n    \"monitor\": [\n        {\n            \"id\": \"2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2\",\n            \"name\": \"C test\",\n            \"updatedAt\": \"2019-08-29T10:18:11.000Z\",\n            \"monitorId\": \"7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745\"\n        },\n        {\n            \"id\": \"521b0486-ab91-4d3a-9189-43c9380a0533\",\n            \"name\": \"C1\",\n            \"updatedAt\": \"2019-08-29T11:40:39.000Z\",\n            \"monitorId\": \"7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725\"\n        }\n    ]\n}"
                        }
                      ]
                    },
                    {
                      "name": "Create relations",
                      "id": "91209e43-5f2e-4b54-bc7a-7150e3841780",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"contracttest\": [\"collection-uid-1\"],\n\t\"testsuite\": [\"collection-uid-1\", \"collection-uid-2\"],\n\t\"documentation\": [\"collection-uid-3\"],\n\t\"mock\": [\"mock-uid-1\"]\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations",
                        "description": "This call allows you to add existing Postman entities as new relations to an API. The request body should contain the relations to be created along with an array of entity IDs. \n\n<table>\n  <tr>\n    <th>Relation</th>\n    <th>Entity ID type</th>\n  <tr>\n  <tr>\n    <td>contracttest</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>integrationtest</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>documentation</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>testsuite</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>environment</td>\n    <td>Environment UIDs</td>\n  </tr>\n  <tr>\n    <td>mock</td>\n    <td>Mock IDs</td>\n  </tr>\n  <tr>\n    <td>monitor</td>\n    <td>Monitor IDs</td>\n  </tr>\n</table>\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "2c50a85d-ff57-4f4f-8e80-da599a10ac63",
                          "name": "Create multiple relations from existing collections",
                          "originalRequest": {
                            "method": "POST",
                            "header": [],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n\t\"contracttest\": [\"112098-a173931c-3340-4c14-b30f-ae62e5fbeb52\"],\n\t\"testsuite\": [\"112098-a173931c-3340-4c14-b30f-ae62e5fbeb52\", \"112098-47958a5a-a2a5-4330-9c9d-60c5166115f2\"],\n\t\"documentation\": [\"112098-47958a5a-a2a5-4330-9c9d-60c5166115f2\"]\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations"
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "Text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n    \"contracttest\": [\n        \"5bcece87-ca4b-4e75-a967-2a6845626164\"\n    ],\n    \"testsuite\": [\n        \"e525fa71-035e-4620-acda-ce878524f1e7\",\n        \"17a974b2-ce79-4b95-9d3f-217d6ff7e979\"\n    ],\n    \"documentation\": [\n        \"2084eba6-a17b-4751-8f03-ea60f30ba19c\"\n    ]\n}"
                        }
                      ]
                    },
                    {
                      "name": "Sync relations with schema",
                      "id": "6d15aef3-b07d-456d-987b-0d499b925659",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis/:apiId/versions/:apiVersionId/:entityType/:entityId/syncWithSchema",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis",
                            ":apiId",
                            "versions",
                            ":apiVersionId",
                            ":entityType",
                            ":entityId",
                            "syncWithSchema"
                          ],
                          "variable": [
                            {
                              "id": "311a5b1d-eea7-4412-9128-3adf19013ee3",
                              "key": "apiId",
                              "value": "{{apiId}}",
                              "description": "Id of the API"
                            },
                            {
                              "id": "fb085958-00b6-4de1-ad30-472fc2a4f0e7",
                              "key": "apiVersionId",
                              "value": "{{apiVersionId}}",
                              "description": "Id of the API version"
                            },
                            {
                              "id": "88ab2b4b-7b8c-44ce-a46a-3c46456e5216",
                              "key": "entityType",
                              "value": "{{entityType}}",
                              "description": "Relation type (e.g documentation, contracttest, integrationtest, testsuite, mock, monitor)"
                            },
                            {
                              "id": "39f0f428-652e-4852-976f-42b944134375",
                              "key": "entityId",
                              "value": "{{entityId}}",
                              "description": "Relation id"
                            }
                          ]
                        },
                        "description": "This call allows you to keep the relation in sync with the API schema.\n\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                      },
                      "response": [
                        {
                          "id": "445a0b7e-bf12-4e61-aff4-5c486989bfa8",
                          "name": "Failed to sync",
                          "originalRequest": {
                            "method": "PUT",
                            "header": [],
                            "url": {
                              "raw": "https://api.getpostman.com/apis/:apiId/versions/:apiVersionId/:entityType/:entityId/syncWithSchema",
                              "protocol": "https",
                              "host": [
                                "api",
                                "getpostman",
                                "com"
                              ],
                              "path": [
                                "apis",
                                ":apiId",
                                "versions",
                                ":apiVersionId",
                                ":entityType",
                                ":entityId",
                                "syncWithSchema"
                              ],
                              "variable": [
                                {
                                  "key": "apiId",
                                  "value": ""
                                },
                                {
                                  "key": "apiVersionId",
                                  "value": ""
                                },
                                {
                                  "key": "entityType",
                                  "value": ""
                                },
                                {
                                  "key": "entityId",
                                  "value": ""
                                }
                              ]
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "_postman_previewlanguage": "json",
                          "header": null,
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n    \"error\": {\n        \"name\": \"validationFailed\",\n        \"message\": \"Unable to validate. Only the OpenAPI 3.0 schema format is supported.\"\n    }\n}"
                        },
                        {
                          "id": "80d4d605-9a46-4e43-bedf-ad1387cf14a5",
                          "name": "Successful sync",
                          "originalRequest": {
                            "method": "PUT",
                            "header": [],
                            "url": {
                              "raw": "https://api.getpostman.com/apis/:apiId/versions/:apiVersionId/:entityType/:entityId/syncWithSchema",
                              "protocol": "https",
                              "host": [
                                "api",
                                "getpostman",
                                "com"
                              ],
                              "path": [
                                "apis",
                                ":apiId",
                                "versions",
                                ":apiVersionId",
                                ":entityType",
                                ":entityId",
                                "syncWithSchema"
                              ],
                              "variable": [
                                {
                                  "key": "apiId",
                                  "value": "{{apiId}}",
                                  "description": "Id of the API"
                                },
                                {
                                  "key": "apiVersionId",
                                  "value": "{{apiVersionId}}",
                                  "description": "Id of the API version"
                                },
                                {
                                  "key": "entityType",
                                  "value": "{{entityType}}",
                                  "description": "Relation type (e.g documentation, contracttest, integrationtest, testsuite, mock, monitor)"
                                },
                                {
                                  "key": "entityId",
                                  "value": "{{entityId}}",
                                  "description": "Relation id"
                                }
                              ]
                            }
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "json",
                          "header": null,
                          "cookie": [],
                          "responseTime": null,
                          "body": "{\n    \"success\": true\n}"
                        }
                      ]
                    }
                  ],
                  "id": "6c08e178-829a-48b8-8649-5bc6a6cb213c",
                  "description": "This contains requests related to relations. \n\nRelations can be of the following types: \n- `contracttest`\n- `integrationtest`\n- `documentation`\n- `testsuite`\n- `environment`\n- `mock`\n- `monitor`"
                },
                {
                  "name": "Create API",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "87827205-2a9c-4982-9e36-6cbd1e3cb125",
                        "type": "text/javascript",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Should have valid response\", function () {",
                          "    pm.expect(jsonData.data).to.include.all.keys('id', 'name', 'createdAt', 'createdBy', 'updatedAt', 'updatedBy');",
                          "    ",
                          "    pm.expect(jsonData.data.name).to.be.equal('New API');",
                          "    pm.expect(jsonData.data.id).to.be.ok;",
                          "    pm.expect(jsonData.data.createdAt).to.be.ok;",
                          "    pm.expect(jsonData.data.createdBy).to.be.ok;",
                          "    pm.expect(jsonData.data.updatedAt).to.be.ok;",
                          "    pm.expect(jsonData.data.updatedBy).to.be.ok;",
                          "});",
                          "",
                          "pm.environment.set(\"apiId\", jsonData.data.id); "
                        ]
                      }
                    }
                  ],
                  "id": "24278606-6a2b-4d19-859a-a098ff0c6e3b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "name": "Content-Type",
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"api\": {\n\t\t\"name\": \"Sync Service API\",\n\t\t\"summary\": \"This is supposed to be a short summary.\",\n\t\t\"description\": \"This is description.\"\n\t}\n}"
                    },
                    "url": {
                      "raw": "https://api.getpostman.com/apis?workspace={{workspaceId}}",
                      "protocol": "https",
                      "host": [
                        "api",
                        "getpostman",
                        "com"
                      ],
                      "path": [
                        "apis"
                      ],
                      "query": [
                        {
                          "key": "workspace",
                          "value": "{{workspaceId}}"
                        }
                      ]
                    },
                    "description": "This call creates a new API with a default API Version.  \n\nRequest body should contain an `api` object which should atleast have a property `name`.\n\nResponse contains an `api` object with all the details related to the created API, namely, `id`, `name`, `summary`, `description`, etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "2026efe5-fe1e-494a-9235-1efc599c778c",
                      "name": "Create API",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"api\": {\n\t\t\"name\": \"Sync Service API\",\n\t\t\"summary\": \"This is supposed to be a short summary.\",\n\t\t\"description\": \"This is description.\"\n\t}\n}"
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/apis?workspace={{workspaceId}}",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n\t\"api\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t}\n}"
                    }
                  ]
                },
                {
                  "name": "Update an API",
                  "id": "f2bc9746-5bd3-472c-9471-b1af13b4b3ee",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "name": "Content-Type",
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"api\": {\n\t\t\"name\": \"New name\",\n\t\t\"description\": \"This is an updated Description\"\n\t}\n}"
                    },
                    "url": "https://api.getpostman.com/apis/{{apiId}}",
                    "description": "This call updates an existing API .  \n\nRequest body should contain an `api` object which should have the fields to be updated. Only `name`, `summary` and `description` fields can be edited for an API.\n\nResponse contains an `api` object with all the details related to the created API, namely, `id`, `name`, `summary`, `description` etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "c3777733-e551-4dd5-bb65-f52c3f3c6c22",
                      "name": "Update an API",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [
                          {
                            "name": "Content-Type",
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"api\": {\n\t\t\"name\": \"New name\",\n\t\t\"description\": \"This is an updated Description\"\n\t}\n}"
                        },
                        "url": "https://api.getpostman.com/apis/{{apiId}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n\t\"api\":{\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t}\n}"
                    }
                  ]
                },
                {
                  "name": "Delete an API",
                  "id": "827dc39b-5b6c-4d06-8812-79473fa0cb29",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "url": "https://api.getpostman.com/apis/{{apiId}}",
                    "description": "This call deletes an existing API having the specified id.  \n\nResponse contains an `api` object with `id` of the API which was deleted.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "cd71b19c-f747-4a8b-9932-748a6162e372",
                      "name": "Delete an API",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": "https://api.getpostman.com/apis/{{apiId}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n\t\"api\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\"\n\t}\n}"
                    }
                  ]
                },
                {
                  "name": "Get all APIs",
                  "id": "4de027fa-c2b1-4981-b949-e03b1620d8ad",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://api.getpostman.com/apis",
                      "protocol": "https",
                      "host": [
                        "api",
                        "getpostman",
                        "com"
                      ],
                      "path": [
                        "apis"
                      ],
                      "query": [
                        {
                          "key": "workspace",
                          "value": "{{workspaceId}}",
                          "description": "Only return APIs that are inside the given workspace.",
                          "disabled": true
                        },
                        {
                          "key": "since",
                          "value": "{{since}}",
                          "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
                          "disabled": true
                        },
                        {
                          "key": "until",
                          "value": "{{until}}",
                          "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                          "disabled": true
                        },
                        {
                          "key": "createdBy",
                          "value": "{{createdBy}}",
                          "description": "Only return APIs that have been created by the user ID represented by the given value.",
                          "disabled": true
                        },
                        {
                          "key": "updatedBy",
                          "value": "{{updatedBy}}",
                          "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                          "disabled": true
                        },
                        {
                          "key": "isPublic",
                          "value": "{{isPublic}}",
                          "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false.",
                          "disabled": true
                        },
                        {
                          "key": "name",
                          "value": "{{name}}",
                          "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                          "disabled": true
                        },
                        {
                          "key": "summary",
                          "value": "{{summary}}",
                          "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                          "disabled": true
                        },
                        {
                          "key": "description",
                          "value": "{{description}}",
                          "description": "Only return APIs whose description includes the given value. Matching is case insensitive.",
                          "disabled": true
                        },
                        {
                          "key": "sort",
                          "value": "{{sort}}",
                          "description": "The value of sort can be one of the names of the fields included in the response.",
                          "disabled": true
                        },
                        {
                          "key": "direction",
                          "value": "{{direction}}",
                          "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                          "disabled": true
                        }
                      ]
                    },
                    "description": "This call fetches all the APIs present in the specified workspace\n\nResponse contains an array named `apis` which would contain all the details of APIs present in the workspace.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "4e6f1c6f-410d-4eb7-85d7-0d0616f7e211",
                      "name": "Get all public APIs",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis?isPublic=true",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}",
                              "description": "Only return APIs that are inside the given workspace.",
                              "disabled": true
                            },
                            {
                              "key": "since",
                              "value": "{{since}}",
                              "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "until",
                              "value": "{{until}}",
                              "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "createdBy",
                              "value": "{{createdBy}}",
                              "description": "Only return APIs that have been created by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "updatedBy",
                              "value": "{{updatedBy}}",
                              "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "isPublic",
                              "value": "true",
                              "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false."
                            },
                            {
                              "key": "name",
                              "value": "{{name}}",
                              "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "summary",
                              "value": "{{summary}}",
                              "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "description",
                              "value": "{{description}}",
                              "description": "Only return APIs whose description includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "sort",
                              "value": "{{sort}}",
                              "description": "The value of sort can be one of the names of the fields included in the response.",
                              "disabled": true
                            },
                            {
                              "key": "direction",
                              "value": "{{direction}}",
                              "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n    {\n        \"createdBy\": 61102,\n        \"updatedBy\": 35772,\n        \"id\": \"b65a5533-4fac-41c6-8627-2614e6cebf88\",\n        \"name\": \"Practical Rubber Towels\",\n        \"summary\": \"Ergonomic Incredible Plastic Shoes\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design\",\n        \"createdAt\": \"2020-06-13T04:50:53.093Z\",\n        \"updatedAt\": \"2020-06-14T01:24:42.093Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 39818,\n        \"updatedBy\": 54916,\n        \"id\": \"b8f05ac0-90be-4246-8355-d80a8132e57a\",\n        \"name\": \"Intelligent Fresh Gloves\",\n        \"summary\": \"Awesome Licensed Fresh Towels\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design\",\n        \"createdAt\": \"2020-11-13T09:18:29.729Z\",\n        \"updatedAt\": \"2020-11-13T19:52:06.729Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 86586,\n        \"updatedBy\": 34941,\n        \"id\": \"fd11603e-7e83-4104-9e39-071c7b806b4d\",\n        \"name\": \"Fantastic Wooden Bacon\",\n        \"summary\": \"Licensed Licensed Plastic Chicken\",\n        \"description\": \"The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality\",\n        \"createdAt\": \"2020-07-28T08:57:26.015Z\",\n        \"updatedAt\": \"2020-07-29T12:23:13.015Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 12175,\n        \"updatedBy\": 96569,\n        \"id\": \"8110a9fc-c89e-414b-baf0-5c38465ca607\",\n        \"name\": \"Licensed Wooden Soap\",\n        \"summary\": \"Incredible Handcrafted Fresh Fish\",\n        \"description\": \"New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016\",\n        \"createdAt\": \"2020-09-13T00:21:31.460Z\",\n        \"updatedAt\": \"2020-09-13T19:51:41.460Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 98903,\n        \"updatedBy\": 49619,\n        \"id\": \"32eae81a-7587-45d0-a311-730c4e60545f\",\n        \"name\": \"Licensed Granite Hat\",\n        \"summary\": \"Generic Awesome Steel Computer\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J\",\n        \"createdAt\": \"2020-10-03T07:36:24.741Z\",\n        \"updatedAt\": \"2020-10-03T10:38:19.741Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 37518,\n        \"updatedBy\": 7722,\n        \"id\": \"1278f755-c1c9-4337-9b46-e39fbaadf0e4\",\n        \"name\": \"Small Granite Shirt\",\n        \"summary\": \"Ergonomic Awesome Frozen Keyboard\",\n        \"description\": \"New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016\",\n        \"createdAt\": \"2020-03-08T21:19:07.713Z\",\n        \"updatedAt\": \"2020-03-09T09:23:25.713Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 87168,\n        \"updatedBy\": 82273,\n        \"id\": \"b5ff6adb-57e1-42ff-ad1d-21d9408b1091\",\n        \"name\": \"Fantastic Concrete Gloves\",\n        \"summary\": \"Refined Handcrafted Plastic Pants\",\n        \"description\": \"The Football Is Good For Training And Recreational Purposes\",\n        \"createdAt\": \"2020-03-15T04:42:45.360Z\",\n        \"updatedAt\": \"2020-03-16T01:53:28.360Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 90422,\n        \"updatedBy\": 52184,\n        \"id\": \"99cd555e-66c6-4563-9f7e-a54ae4734565\",\n        \"name\": \"Practical Fresh Cheese\",\n        \"summary\": \"Licensed Handmade Metal Shoes\",\n        \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals\",\n        \"createdAt\": \"2020-06-29T02:21:59.073Z\",\n        \"updatedAt\": \"2020-06-29T16:37:47.073Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 24503,\n        \"updatedBy\": 71987,\n        \"id\": \"184b2518-9951-49a3-ba83-841b98a598bb\",\n        \"name\": \"Ergonomic Frozen Chips\",\n        \"summary\": \"Awesome Rustic Concrete Computer\",\n        \"description\": \"Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles\",\n        \"createdAt\": \"2020-10-01T09:35:48.800Z\",\n        \"updatedAt\": \"2020-10-02T08:48:34.800Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 20040,\n        \"updatedBy\": 18249,\n        \"id\": \"d67dcc32-52f8-4a8c-ab53-876c0a0011a5\",\n        \"name\": \"Practical Frozen Keyboard\",\n        \"summary\": \"Sleek Fantastic Concrete Cheese\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design\",\n        \"createdAt\": \"2020-05-24T17:49:12.370Z\",\n        \"updatedAt\": \"2020-05-25T06:10:50.370Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 42120,\n        \"updatedBy\": 70682,\n        \"id\": \"35df7243-e757-4e10-8bd7-6790c0657fc9\",\n        \"name\": \"Licensed Cotton Mouse\",\n        \"summary\": \"Generic Licensed Concrete Shoes\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive\",\n        \"createdAt\": \"2020-12-17T17:45:34.153Z\",\n        \"updatedAt\": \"2020-12-17T19:38:07.153Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 86335,\n        \"updatedBy\": 30494,\n        \"id\": \"874ef2da-5cfd-4f16-aa96-a40164b42692\",\n        \"name\": \"Small Frozen Chair\",\n        \"summary\": \"Ergonomic Sleek Rubber Pizza\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J\",\n        \"createdAt\": \"2020-10-23T13:33:26.335Z\",\n        \"updatedAt\": \"2020-10-23T22:44:45.335Z\",\n        \"isPublic\": true\n    }\n]"
                    },
                    {
                      "id": "21bfd88a-18cc-4202-a2c2-6fdd340a99be",
                      "name": "Get all private APIs",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis?isPublic=false",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}",
                              "description": "Only return APIs that are inside the given workspace.",
                              "disabled": true
                            },
                            {
                              "key": "since",
                              "value": "{{since}}",
                              "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "until",
                              "value": "{{until}}",
                              "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "createdBy",
                              "value": "{{createdBy}}",
                              "description": "Only return APIs that have been created by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "updatedBy",
                              "value": "{{updatedBy}}",
                              "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "isPublic",
                              "value": "false",
                              "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false."
                            },
                            {
                              "key": "name",
                              "value": "{{name}}",
                              "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "summary",
                              "value": "{{summary}}",
                              "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "description",
                              "value": "{{description}}",
                              "description": "Only return APIs whose description includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "sort",
                              "value": "{{sort}}",
                              "description": "The value of sort can be one of the names of the fields included in the response.",
                              "disabled": true
                            },
                            {
                              "key": "direction",
                              "value": "{{direction}}",
                              "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n    {\n        \"createdBy\": 28613,\n        \"updatedBy\": 42847,\n        \"id\": \"3b8bb76c-f6a9-4726-a5ab-5730b69ba272\",\n        \"name\": \"Ergonomic Granite Fish\",\n        \"summary\": \"Awesome Practical Rubber Gloves\",\n        \"description\": \"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients\",\n        \"createdAt\": \"2020-06-23T10:01:14.961Z\",\n        \"updatedAt\": \"2020-06-24T05:49:29.961Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 25045,\n        \"updatedBy\": 10892,\n        \"id\": \"77f3869c-17dc-4948-a504-56bade487a49\",\n        \"name\": \"Refined Rubber Ball\",\n        \"summary\": \"Handcrafted Awesome Fresh Mouse\",\n        \"description\": \"Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support\",\n        \"createdAt\": \"2020-04-22T10:13:21.954Z\",\n        \"updatedAt\": \"2020-04-23T11:41:10.954Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 24366,\n        \"updatedBy\": 18033,\n        \"id\": \"379318e2-aebf-4079-8882-42cb158be836\",\n        \"name\": \"Fantastic Frozen Pizza\",\n        \"summary\": \"Refined Handmade Plastic Shirt\",\n        \"description\": \"Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support\",\n        \"createdAt\": \"2020-05-29T21:13:45.397Z\",\n        \"updatedAt\": \"2020-05-30T21:58:55.397Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 35426,\n        \"updatedBy\": 86857,\n        \"id\": \"26d05788-9984-40ef-ae53-84784e4f94b9\",\n        \"name\": \"Sleek Soft Pants\",\n        \"summary\": \"Fantastic Generic Soft Pizza\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive\",\n        \"createdAt\": \"2020-11-09T00:01:43.741Z\",\n        \"updatedAt\": \"2020-11-09T22:30:15.741Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 11139,\n        \"updatedBy\": 19017,\n        \"id\": \"a7e8b672-70c9-4941-a99d-752e0c295c71\",\n        \"name\": \"Handcrafted Fresh Mouse\",\n        \"summary\": \"Licensed Generic Frozen Sausages\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive\",\n        \"createdAt\": \"2020-07-04T19:24:01.576Z\",\n        \"updatedAt\": \"2020-07-05T06:39:19.576Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 13841,\n        \"updatedBy\": 69856,\n        \"id\": \"616d8617-37c5-47ec-90a8-7e99634b46ba\",\n        \"name\": \"Refined Steel Soap\",\n        \"summary\": \"Generic Practical Steel Chicken\",\n        \"description\": \"Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles\",\n        \"createdAt\": \"2021-02-02T18:41:49.713Z\",\n        \"updatedAt\": \"2021-02-03T08:10:48.713Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 21401,\n        \"updatedBy\": 98392,\n        \"id\": \"193a46ab-465c-40f5-a872-89644a60dea0\",\n        \"name\": \"Tasty Wooden Shoes\",\n        \"summary\": \"Licensed Refined Steel Bacon\",\n        \"description\": \"Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles\",\n        \"createdAt\": \"2020-10-19T00:17:28.568Z\",\n        \"updatedAt\": \"2020-10-19T09:15:04.568Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 22546,\n        \"updatedBy\": 96751,\n        \"id\": \"94a3416e-70e7-490f-a858-a057eeb310b6\",\n        \"name\": \"Refined Cotton Hat\",\n        \"summary\": \"Refined Tasty Steel Shoes\",\n        \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals\",\n        \"createdAt\": \"2020-08-09T06:30:24.270Z\",\n        \"updatedAt\": \"2020-08-09T23:57:32.270Z\",\n        \"isPublic\": false\n    }\n]"
                    },
                    {
                      "id": "a262ff71-be4f-4ec2-bce8-42be8513cfd2",
                      "name": "Get APIs updated since a given time",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis?since=2020-10-23T00:00:00.00Z",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}",
                              "description": "Only return APIs that are inside the given workspace.",
                              "disabled": true
                            },
                            {
                              "key": "since",
                              "value": "2020-10-23T00:00:00.00Z",
                              "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format."
                            },
                            {
                              "key": "until",
                              "value": "{{until}}",
                              "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "createdBy",
                              "value": "{{createdBy}}",
                              "description": "Only return APIs that have been created by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "updatedBy",
                              "value": "{{updatedBy}}",
                              "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "isPublic",
                              "value": "{{isPublic}}",
                              "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false.",
                              "disabled": true
                            },
                            {
                              "key": "name",
                              "value": "{{name}}",
                              "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "summary",
                              "value": "{{summary}}",
                              "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "description",
                              "value": "{{description}}",
                              "description": "Only return APIs whose description includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "sort",
                              "value": "{{sort}}",
                              "description": "The value of sort can be one of the names of the fields included in the response.",
                              "disabled": true
                            },
                            {
                              "key": "direction",
                              "value": "{{direction}}",
                              "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n    {\n        \"createdBy\": 39818,\n        \"updatedBy\": 54916,\n        \"id\": \"b8f05ac0-90be-4246-8355-d80a8132e57a\",\n        \"name\": \"Intelligent Fresh Gloves\",\n        \"summary\": \"Awesome Licensed Fresh Towels\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design\",\n        \"createdAt\": \"2020-11-13T09:23:55.733Z\",\n        \"updatedAt\": \"2020-11-13T19:57:32.733Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 35426,\n        \"updatedBy\": 86857,\n        \"id\": \"26d05788-9984-40ef-ae53-84784e4f94b9\",\n        \"name\": \"Sleek Soft Pants\",\n        \"summary\": \"Fantastic Generic Soft Pizza\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive\",\n        \"createdAt\": \"2020-11-09T00:06:18.575Z\",\n        \"updatedAt\": \"2020-11-09T22:34:50.575Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 13841,\n        \"updatedBy\": 69856,\n        \"id\": \"616d8617-37c5-47ec-90a8-7e99634b46ba\",\n        \"name\": \"Refined Steel Soap\",\n        \"summary\": \"Generic Practical Steel Chicken\",\n        \"description\": \"Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles\",\n        \"createdAt\": \"2021-02-02T18:46:24.548Z\",\n        \"updatedAt\": \"2021-02-03T08:15:23.548Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 42120,\n        \"updatedBy\": 70682,\n        \"id\": \"35df7243-e757-4e10-8bd7-6790c0657fc9\",\n        \"name\": \"Licensed Cotton Mouse\",\n        \"summary\": \"Generic Licensed Concrete Shoes\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive\",\n        \"createdAt\": \"2020-12-17T17:51:00.157Z\",\n        \"updatedAt\": \"2020-12-17T19:43:33.157Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 86335,\n        \"updatedBy\": 30494,\n        \"id\": \"874ef2da-5cfd-4f16-aa96-a40164b42692\",\n        \"name\": \"Small Frozen Chair\",\n        \"summary\": \"Ergonomic Sleek Rubber Pizza\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J\",\n        \"createdAt\": \"2020-10-23T13:38:52.339Z\",\n        \"updatedAt\": \"2020-10-23T22:50:11.339Z\",\n        \"isPublic\": true\n    }\n]"
                    },
                    {
                      "id": "a62a7280-72b9-4179-a160-201c95fc159f",
                      "name": "Get APIs updated between dates",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis?since=2020-10-23T00:00:00.00Z&until=2020-12-01T00:00:00.00Z",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}",
                              "description": "Only return APIs that are inside the given workspace.",
                              "disabled": true
                            },
                            {
                              "key": "since",
                              "value": "2020-10-23T00:00:00.00Z",
                              "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format."
                            },
                            {
                              "key": "until",
                              "value": "2020-12-01T00:00:00.00Z",
                              "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format."
                            },
                            {
                              "key": "createdBy",
                              "value": "{{createdBy}}",
                              "description": "Only return APIs that have been created by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "updatedBy",
                              "value": "{{updatedBy}}",
                              "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "isPublic",
                              "value": "{{isPublic}}",
                              "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false.",
                              "disabled": true
                            },
                            {
                              "key": "name",
                              "value": "{{name}}",
                              "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "summary",
                              "value": "{{summary}}",
                              "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "description",
                              "value": "{{description}}",
                              "description": "Only return APIs whose description includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "sort",
                              "value": "{{sort}}",
                              "description": "The value of sort can be one of the names of the fields included in the response.",
                              "disabled": true
                            },
                            {
                              "key": "direction",
                              "value": "{{direction}}",
                              "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n    {\n        \"createdBy\": 39818,\n        \"updatedBy\": 54916,\n        \"id\": \"b8f05ac0-90be-4246-8355-d80a8132e57a\",\n        \"name\": \"Intelligent Fresh Gloves\",\n        \"summary\": \"Awesome Licensed Fresh Towels\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design\",\n        \"createdAt\": \"2020-11-13T09:26:03.622Z\",\n        \"updatedAt\": \"2020-11-13T19:59:40.622Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 35426,\n        \"updatedBy\": 86857,\n        \"id\": \"26d05788-9984-40ef-ae53-84784e4f94b9\",\n        \"name\": \"Sleek Soft Pants\",\n        \"summary\": \"Fantastic Generic Soft Pizza\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive\",\n        \"createdAt\": \"2020-11-09T00:08:26.464Z\",\n        \"updatedAt\": \"2020-11-09T22:36:58.464Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 86335,\n        \"updatedBy\": 30494,\n        \"id\": \"874ef2da-5cfd-4f16-aa96-a40164b42692\",\n        \"name\": \"Small Frozen Chair\",\n        \"summary\": \"Ergonomic Sleek Rubber Pizza\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J\",\n        \"createdAt\": \"2020-10-23T13:41:00.227Z\",\n        \"updatedAt\": \"2020-10-23T22:52:19.227Z\",\n        \"isPublic\": true\n    }\n]"
                    },
                    {
                      "id": "aba798d5-d92d-4a5e-857b-82e37aaadd07",
                      "name": "Get all APIs",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}",
                              "description": "Only return APIs that are inside the given workspace.",
                              "disabled": true
                            },
                            {
                              "key": "since",
                              "value": "{{since}}",
                              "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "until",
                              "value": "{{until}}",
                              "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "createdBy",
                              "value": "{{createdBy}}",
                              "description": "Only return APIs that have been created by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "updatedBy",
                              "value": "{{updatedBy}}",
                              "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "isPublic",
                              "value": "{{isPublic}}",
                              "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false.",
                              "disabled": true
                            },
                            {
                              "key": "name",
                              "value": "{{name}}",
                              "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "summary",
                              "value": "{{summary}}",
                              "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "description",
                              "value": "{{description}}",
                              "description": "Only return APIs whose description includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "sort",
                              "value": "{{sort}}",
                              "description": "The value of sort can be one of the names of the fields included in the response.",
                              "disabled": true
                            },
                            {
                              "key": "direction",
                              "value": "{{direction}}",
                              "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n    {\n        \"createdBy\": 28613,\n        \"updatedBy\": 42847,\n        \"id\": \"3b8bb76c-f6a9-4726-a5ab-5730b69ba272\",\n        \"name\": \"Ergonomic Granite Fish\",\n        \"summary\": \"Awesome Practical Rubber Gloves\",\n        \"description\": \"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients\",\n        \"createdAt\": \"2020-06-23T09:58:56.442Z\",\n        \"updatedAt\": \"2020-06-24T05:47:11.442Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 61102,\n        \"updatedBy\": 35772,\n        \"id\": \"b65a5533-4fac-41c6-8627-2614e6cebf88\",\n        \"name\": \"Practical Rubber Towels\",\n        \"summary\": \"Ergonomic Incredible Plastic Shoes\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design\",\n        \"createdAt\": \"2020-06-13T04:49:25.743Z\",\n        \"updatedAt\": \"2020-06-14T01:23:14.743Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 25045,\n        \"updatedBy\": 10892,\n        \"id\": \"77f3869c-17dc-4948-a504-56bade487a49\",\n        \"name\": \"Refined Rubber Ball\",\n        \"summary\": \"Handcrafted Awesome Fresh Mouse\",\n        \"description\": \"Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support\",\n        \"createdAt\": \"2020-04-22T10:11:03.434Z\",\n        \"updatedAt\": \"2020-04-23T11:38:52.434Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 24366,\n        \"updatedBy\": 18033,\n        \"id\": \"379318e2-aebf-4079-8882-42cb158be836\",\n        \"name\": \"Fantastic Frozen Pizza\",\n        \"summary\": \"Refined Handmade Plastic Shirt\",\n        \"description\": \"Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support\",\n        \"createdAt\": \"2020-05-29T21:11:26.877Z\",\n        \"updatedAt\": \"2020-05-30T21:56:36.877Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 39818,\n        \"updatedBy\": 54916,\n        \"id\": \"b8f05ac0-90be-4246-8355-d80a8132e57a\",\n        \"name\": \"Intelligent Fresh Gloves\",\n        \"summary\": \"Awesome Licensed Fresh Towels\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design\",\n        \"createdAt\": \"2020-11-13T09:17:02.379Z\",\n        \"updatedAt\": \"2020-11-13T19:50:39.379Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 35426,\n        \"updatedBy\": 86857,\n        \"id\": \"26d05788-9984-40ef-ae53-84784e4f94b9\",\n        \"name\": \"Sleek Soft Pants\",\n        \"summary\": \"Fantastic Generic Soft Pizza\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive\",\n        \"createdAt\": \"2020-11-08T23:59:25.221Z\",\n        \"updatedAt\": \"2020-11-09T22:27:57.221Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 86586,\n        \"updatedBy\": 34941,\n        \"id\": \"fd11603e-7e83-4104-9e39-071c7b806b4d\",\n        \"name\": \"Fantastic Wooden Bacon\",\n        \"summary\": \"Licensed Licensed Plastic Chicken\",\n        \"description\": \"The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality\",\n        \"createdAt\": \"2020-07-28T08:55:58.665Z\",\n        \"updatedAt\": \"2020-07-29T12:21:45.665Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 11139,\n        \"updatedBy\": 19017,\n        \"id\": \"a7e8b672-70c9-4941-a99d-752e0c295c71\",\n        \"name\": \"Handcrafted Fresh Mouse\",\n        \"summary\": \"Licensed Generic Frozen Sausages\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive\",\n        \"createdAt\": \"2020-07-04T19:21:43.057Z\",\n        \"updatedAt\": \"2020-07-05T06:37:01.057Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 13841,\n        \"updatedBy\": 69856,\n        \"id\": \"616d8617-37c5-47ec-90a8-7e99634b46ba\",\n        \"name\": \"Refined Steel Soap\",\n        \"summary\": \"Generic Practical Steel Chicken\",\n        \"description\": \"Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles\",\n        \"createdAt\": \"2021-02-02T18:39:31.194Z\",\n        \"updatedAt\": \"2021-02-03T08:08:30.194Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 12175,\n        \"updatedBy\": 96569,\n        \"id\": \"8110a9fc-c89e-414b-baf0-5c38465ca607\",\n        \"name\": \"Licensed Wooden Soap\",\n        \"summary\": \"Incredible Handcrafted Fresh Fish\",\n        \"description\": \"New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016\",\n        \"createdAt\": \"2020-09-13T00:20:04.111Z\",\n        \"updatedAt\": \"2020-09-13T19:50:14.111Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 98903,\n        \"updatedBy\": 49619,\n        \"id\": \"32eae81a-7587-45d0-a311-730c4e60545f\",\n        \"name\": \"Licensed Granite Hat\",\n        \"summary\": \"Generic Awesome Steel Computer\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J\",\n        \"createdAt\": \"2020-10-03T07:34:57.392Z\",\n        \"updatedAt\": \"2020-10-03T10:36:52.392Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 37518,\n        \"updatedBy\": 7722,\n        \"id\": \"1278f755-c1c9-4337-9b46-e39fbaadf0e4\",\n        \"name\": \"Small Granite Shirt\",\n        \"summary\": \"Ergonomic Awesome Frozen Keyboard\",\n        \"description\": \"New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016\",\n        \"createdAt\": \"2020-03-08T21:17:40.364Z\",\n        \"updatedAt\": \"2020-03-09T09:21:58.364Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 21401,\n        \"updatedBy\": 98392,\n        \"id\": \"193a46ab-465c-40f5-a872-89644a60dea0\",\n        \"name\": \"Tasty Wooden Shoes\",\n        \"summary\": \"Licensed Refined Steel Bacon\",\n        \"description\": \"Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles\",\n        \"createdAt\": \"2020-10-19T00:15:10.049Z\",\n        \"updatedAt\": \"2020-10-19T09:12:46.049Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 87168,\n        \"updatedBy\": 82273,\n        \"id\": \"b5ff6adb-57e1-42ff-ad1d-21d9408b1091\",\n        \"name\": \"Fantastic Concrete Gloves\",\n        \"summary\": \"Refined Handcrafted Plastic Pants\",\n        \"description\": \"The Football Is Good For Training And Recreational Purposes\",\n        \"createdAt\": \"2020-03-15T04:41:18.011Z\",\n        \"updatedAt\": \"2020-03-16T01:52:01.011Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 22546,\n        \"updatedBy\": 96751,\n        \"id\": \"94a3416e-70e7-490f-a858-a057eeb310b6\",\n        \"name\": \"Refined Cotton Hat\",\n        \"summary\": \"Refined Tasty Steel Shoes\",\n        \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals\",\n        \"createdAt\": \"2020-08-09T06:28:05.750Z\",\n        \"updatedAt\": \"2020-08-09T23:55:13.750Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 90422,\n        \"updatedBy\": 52184,\n        \"id\": \"99cd555e-66c6-4563-9f7e-a54ae4734565\",\n        \"name\": \"Practical Fresh Cheese\",\n        \"summary\": \"Licensed Handmade Metal Shoes\",\n        \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals\",\n        \"createdAt\": \"2020-06-29T02:20:31.723Z\",\n        \"updatedAt\": \"2020-06-29T16:36:19.723Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 24503,\n        \"updatedBy\": 71987,\n        \"id\": \"184b2518-9951-49a3-ba83-841b98a598bb\",\n        \"name\": \"Ergonomic Frozen Chips\",\n        \"summary\": \"Awesome Rustic Concrete Computer\",\n        \"description\": \"Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles\",\n        \"createdAt\": \"2020-10-01T09:34:21.450Z\",\n        \"updatedAt\": \"2020-10-02T08:47:07.450Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 20040,\n        \"updatedBy\": 18249,\n        \"id\": \"d67dcc32-52f8-4a8c-ab53-876c0a0011a5\",\n        \"name\": \"Practical Frozen Keyboard\",\n        \"summary\": \"Sleek Fantastic Concrete Cheese\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design\",\n        \"createdAt\": \"2020-05-24T17:47:45.020Z\",\n        \"updatedAt\": \"2020-05-25T06:09:23.020Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 42120,\n        \"updatedBy\": 70682,\n        \"id\": \"35df7243-e757-4e10-8bd7-6790c0657fc9\",\n        \"name\": \"Licensed Cotton Mouse\",\n        \"summary\": \"Generic Licensed Concrete Shoes\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive\",\n        \"createdAt\": \"2020-12-17T17:44:06.803Z\",\n        \"updatedAt\": \"2020-12-17T19:36:39.803Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 86335,\n        \"updatedBy\": 30494,\n        \"id\": \"874ef2da-5cfd-4f16-aa96-a40164b42692\",\n        \"name\": \"Small Frozen Chair\",\n        \"summary\": \"Ergonomic Sleek Rubber Pizza\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J\",\n        \"createdAt\": \"2020-10-23T13:31:58.985Z\",\n        \"updatedAt\": \"2020-10-23T22:43:17.985Z\",\n        \"isPublic\": true\n    }\n]"
                    },
                    {
                      "id": "50afe9d4-e92d-431a-917e-555066109aad",
                      "name": "Filter APIs by name",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis?name=granite",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}",
                              "description": "Only return APIs that are inside the given workspace.",
                              "disabled": true
                            },
                            {
                              "key": "since",
                              "value": "{{since}}",
                              "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "until",
                              "value": "{{until}}",
                              "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "createdBy",
                              "value": "{{createdBy}}",
                              "description": "Only return APIs that have been created by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "updatedBy",
                              "value": "{{updatedBy}}",
                              "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "isPublic",
                              "value": "{{isPublic}}",
                              "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false.",
                              "disabled": true
                            },
                            {
                              "key": "name",
                              "value": "granite",
                              "description": "Only return APIs whose name includes the given value. Matching is case insensitive."
                            },
                            {
                              "key": "summary",
                              "value": "{{summary}}",
                              "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "description",
                              "value": "{{description}}",
                              "description": "Only return APIs whose description includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "sort",
                              "value": "{{sort}}",
                              "description": "The value of sort can be one of the names of the fields included in the response.",
                              "disabled": true
                            },
                            {
                              "key": "direction",
                              "value": "{{direction}}",
                              "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n    {\n        \"createdBy\": 28613,\n        \"updatedBy\": 42847,\n        \"id\": \"3b8bb76c-f6a9-4726-a5ab-5730b69ba272\",\n        \"name\": \"Ergonomic Granite Fish\",\n        \"summary\": \"Awesome Practical Rubber Gloves\",\n        \"description\": \"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients\",\n        \"createdAt\": \"2020-06-23T10:11:35.822Z\",\n        \"updatedAt\": \"2020-06-24T05:59:50.822Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 98903,\n        \"updatedBy\": 49619,\n        \"id\": \"32eae81a-7587-45d0-a311-730c4e60545f\",\n        \"name\": \"Licensed Granite Hat\",\n        \"summary\": \"Generic Awesome Steel Computer\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J\",\n        \"createdAt\": \"2020-10-03T07:47:36.772Z\",\n        \"updatedAt\": \"2020-10-03T10:49:31.772Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 37518,\n        \"updatedBy\": 7722,\n        \"id\": \"1278f755-c1c9-4337-9b46-e39fbaadf0e4\",\n        \"name\": \"Small Granite Shirt\",\n        \"summary\": \"Ergonomic Awesome Frozen Keyboard\",\n        \"description\": \"New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016\",\n        \"createdAt\": \"2020-03-08T21:30:19.744Z\",\n        \"updatedAt\": \"2020-03-09T09:34:37.744Z\",\n        \"isPublic\": true\n    }\n]"
                    },
                    {
                      "id": "3ce74007-dcb4-44e7-bdbc-e71f8f73195b",
                      "name": "Sort all APIs by updated date",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis?sort=updatedAt",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}",
                              "description": "Only return APIs that are inside the given workspace.",
                              "disabled": true
                            },
                            {
                              "key": "since",
                              "value": "{{since}}",
                              "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "until",
                              "value": "{{until}}",
                              "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "createdBy",
                              "value": "{{createdBy}}",
                              "description": "Only return APIs that have been created by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "updatedBy",
                              "value": "{{updatedBy}}",
                              "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "isPublic",
                              "value": "{{isPublic}}",
                              "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false.",
                              "disabled": true
                            },
                            {
                              "key": "name",
                              "value": "{{name}}",
                              "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "summary",
                              "value": "{{summary}}",
                              "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "description",
                              "value": "{{description}}",
                              "description": "Only return APIs whose description includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "sort",
                              "value": "updatedAt",
                              "description": "The value of sort can be one of the names of the fields included in the response."
                            },
                            {
                              "key": "direction",
                              "value": "{{direction}}",
                              "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n    {\n        \"createdBy\": 13841,\n        \"updatedBy\": 69856,\n        \"id\": \"616d8617-37c5-47ec-90a8-7e99634b46ba\",\n        \"name\": \"Refined Steel Soap\",\n        \"summary\": \"Generic Practical Steel Chicken\",\n        \"description\": \"Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles\",\n        \"createdAt\": \"2021-02-02T19:06:51.256Z\",\n        \"updatedAt\": \"2021-02-03T08:35:50.256Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 42120,\n        \"updatedBy\": 70682,\n        \"id\": \"35df7243-e757-4e10-8bd7-6790c0657fc9\",\n        \"name\": \"Licensed Cotton Mouse\",\n        \"summary\": \"Generic Licensed Concrete Shoes\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive\",\n        \"createdAt\": \"2020-12-17T18:11:26.866Z\",\n        \"updatedAt\": \"2020-12-17T20:03:59.866Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 39818,\n        \"updatedBy\": 54916,\n        \"id\": \"b8f05ac0-90be-4246-8355-d80a8132e57a\",\n        \"name\": \"Intelligent Fresh Gloves\",\n        \"summary\": \"Awesome Licensed Fresh Towels\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design\",\n        \"createdAt\": \"2020-11-13T09:44:22.442Z\",\n        \"updatedAt\": \"2020-11-13T20:17:59.442Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 35426,\n        \"updatedBy\": 86857,\n        \"id\": \"26d05788-9984-40ef-ae53-84784e4f94b9\",\n        \"name\": \"Sleek Soft Pants\",\n        \"summary\": \"Fantastic Generic Soft Pizza\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive\",\n        \"createdAt\": \"2020-11-09T00:26:45.284Z\",\n        \"updatedAt\": \"2020-11-09T22:55:17.284Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 86335,\n        \"updatedBy\": 30494,\n        \"id\": \"874ef2da-5cfd-4f16-aa96-a40164b42692\",\n        \"name\": \"Small Frozen Chair\",\n        \"summary\": \"Ergonomic Sleek Rubber Pizza\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J\",\n        \"createdAt\": \"2020-10-23T13:59:19.048Z\",\n        \"updatedAt\": \"2020-10-23T23:10:38.048Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 21401,\n        \"updatedBy\": 98392,\n        \"id\": \"193a46ab-465c-40f5-a872-89644a60dea0\",\n        \"name\": \"Tasty Wooden Shoes\",\n        \"summary\": \"Licensed Refined Steel Bacon\",\n        \"description\": \"Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles\",\n        \"createdAt\": \"2020-10-19T00:42:30.111Z\",\n        \"updatedAt\": \"2020-10-19T09:40:06.111Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 98903,\n        \"updatedBy\": 49619,\n        \"id\": \"32eae81a-7587-45d0-a311-730c4e60545f\",\n        \"name\": \"Licensed Granite Hat\",\n        \"summary\": \"Generic Awesome Steel Computer\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J\",\n        \"createdAt\": \"2020-10-03T08:02:17.454Z\",\n        \"updatedAt\": \"2020-10-03T11:04:12.454Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 24503,\n        \"updatedBy\": 71987,\n        \"id\": \"184b2518-9951-49a3-ba83-841b98a598bb\",\n        \"name\": \"Ergonomic Frozen Chips\",\n        \"summary\": \"Awesome Rustic Concrete Computer\",\n        \"description\": \"Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles\",\n        \"createdAt\": \"2020-10-01T10:01:41.512Z\",\n        \"updatedAt\": \"2020-10-02T09:14:27.512Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 12175,\n        \"updatedBy\": 96569,\n        \"id\": \"8110a9fc-c89e-414b-baf0-5c38465ca607\",\n        \"name\": \"Licensed Wooden Soap\",\n        \"summary\": \"Incredible Handcrafted Fresh Fish\",\n        \"description\": \"New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016\",\n        \"createdAt\": \"2020-09-13T00:47:24.173Z\",\n        \"updatedAt\": \"2020-09-13T20:17:34.173Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 22546,\n        \"updatedBy\": 96751,\n        \"id\": \"94a3416e-70e7-490f-a858-a057eeb310b6\",\n        \"name\": \"Refined Cotton Hat\",\n        \"summary\": \"Refined Tasty Steel Shoes\",\n        \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals\",\n        \"createdAt\": \"2020-08-09T06:55:25.812Z\",\n        \"updatedAt\": \"2020-08-10T00:22:33.812Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 86586,\n        \"updatedBy\": 34941,\n        \"id\": \"fd11603e-7e83-4104-9e39-071c7b806b4d\",\n        \"name\": \"Fantastic Wooden Bacon\",\n        \"summary\": \"Licensed Licensed Plastic Chicken\",\n        \"description\": \"The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality\",\n        \"createdAt\": \"2020-07-28T09:23:18.728Z\",\n        \"updatedAt\": \"2020-07-29T12:49:05.728Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 11139,\n        \"updatedBy\": 19017,\n        \"id\": \"a7e8b672-70c9-4941-a99d-752e0c295c71\",\n        \"name\": \"Handcrafted Fresh Mouse\",\n        \"summary\": \"Licensed Generic Frozen Sausages\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive\",\n        \"createdAt\": \"2020-07-04T19:49:03.119Z\",\n        \"updatedAt\": \"2020-07-05T07:04:21.119Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 90422,\n        \"updatedBy\": 52184,\n        \"id\": \"99cd555e-66c6-4563-9f7e-a54ae4734565\",\n        \"name\": \"Practical Fresh Cheese\",\n        \"summary\": \"Licensed Handmade Metal Shoes\",\n        \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals\",\n        \"createdAt\": \"2020-06-29T02:47:51.785Z\",\n        \"updatedAt\": \"2020-06-29T17:03:39.785Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 28613,\n        \"updatedBy\": 42847,\n        \"id\": \"3b8bb76c-f6a9-4726-a5ab-5730b69ba272\",\n        \"name\": \"Ergonomic Granite Fish\",\n        \"summary\": \"Awesome Practical Rubber Gloves\",\n        \"description\": \"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients\",\n        \"createdAt\": \"2020-06-23T10:26:16.504Z\",\n        \"updatedAt\": \"2020-06-24T06:14:31.504Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 61102,\n        \"updatedBy\": 35772,\n        \"id\": \"b65a5533-4fac-41c6-8627-2614e6cebf88\",\n        \"name\": \"Practical Rubber Towels\",\n        \"summary\": \"Ergonomic Incredible Plastic Shoes\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design\",\n        \"createdAt\": \"2020-06-13T05:16:45.806Z\",\n        \"updatedAt\": \"2020-06-14T01:50:34.806Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 24366,\n        \"updatedBy\": 18033,\n        \"id\": \"379318e2-aebf-4079-8882-42cb158be836\",\n        \"name\": \"Fantastic Frozen Pizza\",\n        \"summary\": \"Refined Handmade Plastic Shirt\",\n        \"description\": \"Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support\",\n        \"createdAt\": \"2020-05-29T21:38:46.940Z\",\n        \"updatedAt\": \"2020-05-30T22:23:56.940Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 20040,\n        \"updatedBy\": 18249,\n        \"id\": \"d67dcc32-52f8-4a8c-ab53-876c0a0011a5\",\n        \"name\": \"Practical Frozen Keyboard\",\n        \"summary\": \"Sleek Fantastic Concrete Cheese\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design\",\n        \"createdAt\": \"2020-05-24T18:15:05.082Z\",\n        \"updatedAt\": \"2020-05-25T06:36:43.082Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 25045,\n        \"updatedBy\": 10892,\n        \"id\": \"77f3869c-17dc-4948-a504-56bade487a49\",\n        \"name\": \"Refined Rubber Ball\",\n        \"summary\": \"Handcrafted Awesome Fresh Mouse\",\n        \"description\": \"Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support\",\n        \"createdAt\": \"2020-04-22T10:38:23.497Z\",\n        \"updatedAt\": \"2020-04-23T12:06:12.497Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 87168,\n        \"updatedBy\": 82273,\n        \"id\": \"b5ff6adb-57e1-42ff-ad1d-21d9408b1091\",\n        \"name\": \"Fantastic Concrete Gloves\",\n        \"summary\": \"Refined Handcrafted Plastic Pants\",\n        \"description\": \"The Football Is Good For Training And Recreational Purposes\",\n        \"createdAt\": \"2020-03-15T05:08:38.073Z\",\n        \"updatedAt\": \"2020-03-16T02:19:21.073Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 37518,\n        \"updatedBy\": 7722,\n        \"id\": \"1278f755-c1c9-4337-9b46-e39fbaadf0e4\",\n        \"name\": \"Small Granite Shirt\",\n        \"summary\": \"Ergonomic Awesome Frozen Keyboard\",\n        \"description\": \"New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016\",\n        \"createdAt\": \"2020-03-08T21:45:00.426Z\",\n        \"updatedAt\": \"2020-03-09T09:49:18.426Z\",\n        \"isPublic\": true\n    }\n]"
                    },
                    {
                      "id": "4e62c1e4-98c3-4520-b50d-016beffd1495",
                      "name": "Sort public APIs by updated date",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis?isPublic=true&sort=updatedAt",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}",
                              "description": "Only return APIs that are inside the given workspace.",
                              "disabled": true
                            },
                            {
                              "key": "since",
                              "value": "{{since}}",
                              "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "until",
                              "value": "{{until}}",
                              "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "createdBy",
                              "value": "{{createdBy}}",
                              "description": "Only return APIs that have been created by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "updatedBy",
                              "value": "{{updatedBy}}",
                              "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "isPublic",
                              "value": "true",
                              "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false."
                            },
                            {
                              "key": "name",
                              "value": "{{name}}",
                              "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "summary",
                              "value": "{{summary}}",
                              "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "description",
                              "value": "{{description}}",
                              "description": "Only return APIs whose description includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "sort",
                              "value": "updatedAt",
                              "description": "The value of sort can be one of the names of the fields included in the response."
                            },
                            {
                              "key": "direction",
                              "value": "{{direction}}",
                              "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n    {\n        \"createdBy\": 42120,\n        \"updatedBy\": 70682,\n        \"id\": \"35df7243-e757-4e10-8bd7-6790c0657fc9\",\n        \"name\": \"Licensed Cotton Mouse\",\n        \"summary\": \"Generic Licensed Concrete Shoes\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive\",\n        \"createdAt\": \"2020-12-17T18:13:34.665Z\",\n        \"updatedAt\": \"2020-12-17T20:06:07.665Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 39818,\n        \"updatedBy\": 54916,\n        \"id\": \"b8f05ac0-90be-4246-8355-d80a8132e57a\",\n        \"name\": \"Intelligent Fresh Gloves\",\n        \"summary\": \"Awesome Licensed Fresh Towels\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design\",\n        \"createdAt\": \"2020-11-13T09:46:30.241Z\",\n        \"updatedAt\": \"2020-11-13T20:20:07.241Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 86335,\n        \"updatedBy\": 30494,\n        \"id\": \"874ef2da-5cfd-4f16-aa96-a40164b42692\",\n        \"name\": \"Small Frozen Chair\",\n        \"summary\": \"Ergonomic Sleek Rubber Pizza\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J\",\n        \"createdAt\": \"2020-10-23T14:01:26.847Z\",\n        \"updatedAt\": \"2020-10-23T23:12:45.847Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 98903,\n        \"updatedBy\": 49619,\n        \"id\": \"32eae81a-7587-45d0-a311-730c4e60545f\",\n        \"name\": \"Licensed Granite Hat\",\n        \"summary\": \"Generic Awesome Steel Computer\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J\",\n        \"createdAt\": \"2020-10-03T08:04:25.253Z\",\n        \"updatedAt\": \"2020-10-03T11:06:20.253Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 24503,\n        \"updatedBy\": 71987,\n        \"id\": \"184b2518-9951-49a3-ba83-841b98a598bb\",\n        \"name\": \"Ergonomic Frozen Chips\",\n        \"summary\": \"Awesome Rustic Concrete Computer\",\n        \"description\": \"Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles\",\n        \"createdAt\": \"2020-10-01T10:03:49.312Z\",\n        \"updatedAt\": \"2020-10-02T09:16:35.312Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 12175,\n        \"updatedBy\": 96569,\n        \"id\": \"8110a9fc-c89e-414b-baf0-5c38465ca607\",\n        \"name\": \"Licensed Wooden Soap\",\n        \"summary\": \"Incredible Handcrafted Fresh Fish\",\n        \"description\": \"New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016\",\n        \"createdAt\": \"2020-09-13T00:49:31.972Z\",\n        \"updatedAt\": \"2020-09-13T20:19:41.972Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 86586,\n        \"updatedBy\": 34941,\n        \"id\": \"fd11603e-7e83-4104-9e39-071c7b806b4d\",\n        \"name\": \"Fantastic Wooden Bacon\",\n        \"summary\": \"Licensed Licensed Plastic Chicken\",\n        \"description\": \"The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality\",\n        \"createdAt\": \"2020-07-28T09:25:26.527Z\",\n        \"updatedAt\": \"2020-07-29T12:51:13.527Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 90422,\n        \"updatedBy\": 52184,\n        \"id\": \"99cd555e-66c6-4563-9f7e-a54ae4734565\",\n        \"name\": \"Practical Fresh Cheese\",\n        \"summary\": \"Licensed Handmade Metal Shoes\",\n        \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals\",\n        \"createdAt\": \"2020-06-29T02:49:59.585Z\",\n        \"updatedAt\": \"2020-06-29T17:05:47.585Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 61102,\n        \"updatedBy\": 35772,\n        \"id\": \"b65a5533-4fac-41c6-8627-2614e6cebf88\",\n        \"name\": \"Practical Rubber Towels\",\n        \"summary\": \"Ergonomic Incredible Plastic Shoes\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design\",\n        \"createdAt\": \"2020-06-13T05:18:53.605Z\",\n        \"updatedAt\": \"2020-06-14T01:52:42.605Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 20040,\n        \"updatedBy\": 18249,\n        \"id\": \"d67dcc32-52f8-4a8c-ab53-876c0a0011a5\",\n        \"name\": \"Practical Frozen Keyboard\",\n        \"summary\": \"Sleek Fantastic Concrete Cheese\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design\",\n        \"createdAt\": \"2020-05-24T18:17:12.882Z\",\n        \"updatedAt\": \"2020-05-25T06:38:50.882Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 87168,\n        \"updatedBy\": 82273,\n        \"id\": \"b5ff6adb-57e1-42ff-ad1d-21d9408b1091\",\n        \"name\": \"Fantastic Concrete Gloves\",\n        \"summary\": \"Refined Handcrafted Plastic Pants\",\n        \"description\": \"The Football Is Good For Training And Recreational Purposes\",\n        \"createdAt\": \"2020-03-15T05:10:45.873Z\",\n        \"updatedAt\": \"2020-03-16T02:21:28.873Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 37518,\n        \"updatedBy\": 7722,\n        \"id\": \"1278f755-c1c9-4337-9b46-e39fbaadf0e4\",\n        \"name\": \"Small Granite Shirt\",\n        \"summary\": \"Ergonomic Awesome Frozen Keyboard\",\n        \"description\": \"New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016\",\n        \"createdAt\": \"2020-03-08T21:47:08.226Z\",\n        \"updatedAt\": \"2020-03-09T09:51:26.226Z\",\n        \"isPublic\": true\n    }\n]"
                    },
                    {
                      "id": "f3d64d4a-940e-4c44-9be7-b7ff05fade0e",
                      "name": "Get LIVE APIs",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis?description=LIVE",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}",
                              "description": "Only return APIs that are inside the given workspace.",
                              "disabled": true
                            },
                            {
                              "key": "since",
                              "value": "{{since}}",
                              "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "until",
                              "value": "{{until}}",
                              "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "createdBy",
                              "value": "{{createdBy}}",
                              "description": "Only return APIs that have been created by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "updatedBy",
                              "value": "{{updatedBy}}",
                              "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "isPublic",
                              "value": "{{isPublic}}",
                              "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false.",
                              "disabled": true
                            },
                            {
                              "key": "name",
                              "value": "{{name}}",
                              "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "summary",
                              "value": "{{summary}}",
                              "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "description",
                              "value": "LIVE",
                              "description": "Only return APIs whose description includes the given value. Matching is case insensitive."
                            },
                            {
                              "key": "sort",
                              "value": "{{sort}}",
                              "description": "The value of sort can be one of the names of the fields included in the response.",
                              "disabled": true
                            },
                            {
                              "key": "direction",
                              "value": "{{direction}}",
                              "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n    {\n        \"createdBy\": 413,\n        \"updatedBy\": 35591,\n        \"id\": \"ac090be2-46c3-455d-80a8-132e57a3d48d\",\n        \"name\": \"Refined Rubber Shirt\",\n        \"summary\": \"Handcrafted Incredible Soft Pants\",\n        \"description\": \"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients (LIVE)\",\n        \"createdAt\": \"2020-06-21T08:04:00.609Z\",\n        \"updatedAt\": \"2020-06-21T23:31:51.609Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 76939,\n        \"updatedBy\": 51131,\n        \"id\": \"9e14b7af-05c3-4846-9ca6-07c295adb286\",\n        \"name\": \"Ergonomic Frozen Shoes\",\n        \"summary\": \"Gorgeous Rustic Frozen Chicken\",\n        \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals (LIVE)\",\n        \"createdAt\": \"2020-08-03T00:28:24.978Z\",\n        \"updatedAt\": \"2020-08-04T04:08:32.978Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 90,\n        \"updatedBy\": 94825,\n        \"id\": \"e858a057-eeb3-410b-ae58-df07e0a8e899\",\n        \"name\": \"Licensed Fresh Pants\",\n        \"summary\": \"Incredible Incredible Frozen Shirt\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design (LIVE)\",\n        \"createdAt\": \"2020-03-30T08:06:51.867Z\",\n        \"updatedAt\": \"2020-03-30T21:45:58.867Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 82371,\n        \"updatedBy\": 48388,\n        \"id\": \"6790c065-7fc9-4c52-9c37-2e55d4874ef2\",\n        \"name\": \"Licensed Metal Gloves\",\n        \"summary\": \"Licensed Tasty Fresh Chips\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive (LIVE)\",\n        \"createdAt\": \"2021-02-17T19:09:48.650Z\",\n        \"updatedAt\": \"2021-02-18T09:43:20.650Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 40565,\n        \"updatedBy\": 65205,\n        \"id\": \"40164b42-6920-4f01-bad7-e645fd94101e\",\n        \"name\": \"Awesome Fresh Cheese\",\n        \"summary\": \"Gorgeous Rustic Granite Pants\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive (LIVE)\",\n        \"createdAt\": \"2020-07-02T01:49:27.147Z\",\n        \"updatedAt\": \"2020-07-02T20:02:39.147Z\",\n        \"isPublic\": true\n    }\n]"
                    },
                    {
                      "id": "e1d4fbf4-6dae-4b41-99f4-3f6a42eb55ca",
                      "name": "Get PREVIEW APIs",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis?description=PREVIEW",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}",
                              "description": "Only return APIs that are inside the given workspace.",
                              "disabled": true
                            },
                            {
                              "key": "since",
                              "value": "{{since}}",
                              "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "until",
                              "value": "{{until}}",
                              "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "createdBy",
                              "value": "{{createdBy}}",
                              "description": "Only return APIs that have been created by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "updatedBy",
                              "value": "{{updatedBy}}",
                              "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "isPublic",
                              "value": "{{isPublic}}",
                              "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false.",
                              "disabled": true
                            },
                            {
                              "key": "name",
                              "value": "{{name}}",
                              "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "summary",
                              "value": "{{summary}}",
                              "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "description",
                              "value": "PREVIEW",
                              "description": "Only return APIs whose description includes the given value. Matching is case insensitive."
                            },
                            {
                              "key": "sort",
                              "value": "{{sort}}",
                              "description": "The value of sort can be one of the names of the fields included in the response.",
                              "disabled": true
                            },
                            {
                              "key": "direction",
                              "value": "{{direction}}",
                              "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n    {\n        \"createdBy\": 42847,\n        \"updatedBy\": 22685,\n        \"id\": \"b8bb76cf-6a97-4266-9ab5-730b69ba2721\",\n        \"name\": \"Awesome Metal Hat\",\n        \"summary\": \"Practical Generic Plastic Pizza\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J (PREVIEW)\",\n        \"createdAt\": \"2020-06-24T10:26:59.664Z\",\n        \"updatedAt\": \"2020-06-25T06:15:14.664Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 72244,\n        \"updatedBy\": 41720,\n        \"id\": \"5a55334f-ac1c-4606-a726-14e6cebf8879\",\n        \"name\": \"Awesome Wooden Gloves\",\n        \"summary\": \"Incredible Sleek Cotton Chicken\",\n        \"description\": \"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients (PREVIEW)\",\n        \"createdAt\": \"2020-06-08T10:31:25.143Z\",\n        \"updatedAt\": \"2020-06-09T03:29:47.143Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 49549,\n        \"updatedBy\": 98555,\n        \"id\": \"3869c17d-c948-4650-856b-ade487a49d94\",\n        \"name\": \"Handcrafted Granite Pizza\",\n        \"summary\": \"Rustic Ergonomic Plastic Cheese\",\n        \"description\": \"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients (PREVIEW)\",\n        \"createdAt\": \"2020-12-04T05:31:51.082Z\",\n        \"updatedAt\": \"2020-12-04T08:33:23.082Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 57245,\n        \"updatedBy\": 21229,\n        \"id\": \"18e2aebf-0794-4882-82cb-158be8365edd\",\n        \"name\": \"Handmade Plastic Shirt\",\n        \"summary\": \"Small Intelligent Plastic Shirt\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design (PREVIEW)\",\n        \"createdAt\": \"2020-12-29T19:46:26.418Z\",\n        \"updatedAt\": \"2020-12-30T01:10:08.418Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 33867,\n        \"updatedBy\": 47845,\n        \"id\": \"8899840e-fae5-4384-b84e-4f94b98c56ab\",\n        \"name\": \"Refined Wooden Mouse\",\n        \"summary\": \"Generic Tasty Fresh Pants\",\n        \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals (PREVIEW)\",\n        \"createdAt\": \"2020-10-04T01:54:21.589Z\",\n        \"updatedAt\": \"2020-10-05T00:56:12.589Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 535,\n        \"updatedBy\": 20454,\n        \"id\": \"e7e83104-de39-4071-87b8-06b4d62ccc4a\",\n        \"name\": \"Incredible Frozen Tuna\",\n        \"summary\": \"Fantastic Ergonomic Concrete Tuna\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J (PREVIEW)\",\n        \"createdAt\": \"2021-02-04T16:16:31.768Z\",\n        \"updatedAt\": \"2021-02-04T18:05:37.768Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 44032,\n        \"updatedBy\": 18109,\n        \"id\": \"70c9941e-99d7-452e-8c29-5c71ad3d9ee2\",\n        \"name\": \"Ergonomic Steel Shoes\",\n        \"summary\": \"Rustic Handcrafted Cotton Car\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J (PREVIEW)\",\n        \"createdAt\": \"2020-09-03T06:45:42.651Z\",\n        \"updatedAt\": \"2020-09-04T02:06:13.651Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 49433,\n        \"updatedBy\": 20139,\n        \"id\": \"7c57ecd0-a87e-4996-b4b4-6bad09a70ab6\",\n        \"name\": \"Sleek Metal Computer\",\n        \"summary\": \"Tasty Awesome Steel Car\",\n        \"description\": \"Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support (PREVIEW)\",\n        \"createdAt\": \"2020-08-12T10:29:12.912Z\",\n        \"updatedAt\": \"2020-08-12T22:31:02.912Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 31514,\n        \"updatedBy\": 50221,\n        \"id\": \"75d02311-730c-44e6-8545-fd88a8017cf6\",\n        \"name\": \"Fantastic Steel Computer\",\n        \"summary\": \"Intelligent Practical Granite Chips\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J (PREVIEW)\",\n        \"createdAt\": \"2021-01-31T07:45:49.926Z\",\n        \"updatedAt\": \"2021-02-01T01:07:51.926Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 79884,\n        \"updatedBy\": 59655,\n        \"id\": \"3379b46e-39fb-4aad-b0e4-08619f239553\",\n        \"name\": \"Tasty Wooden Towels\",\n        \"summary\": \"Intelligent Generic Plastic Shirt\",\n        \"description\": \"Carbonite web goalkeeper gloves are ergonomically designed to give easy fit (PREVIEW)\",\n        \"createdAt\": \"2020-11-11T04:53:15.745Z\",\n        \"updatedAt\": \"2020-11-12T03:04:47.745Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 76547,\n        \"updatedBy\": 594,\n        \"id\": \"f5287289-644a-460d-aa0f-27ce0cb4fcdd\",\n        \"name\": \"Handmade Plastic Chips\",\n        \"summary\": \"Tasty Practical Metal Pizza\",\n        \"description\": \"Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles (PREVIEW)\",\n        \"createdAt\": \"2020-11-22T23:54:11.340Z\",\n        \"updatedAt\": \"2020-11-23T11:02:49.340Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 14877,\n        \"updatedBy\": 99798,\n        \"id\": \"fad1d21d-9408-4b10-9153-5ea558b9a3f9\",\n        \"name\": \"Gorgeous Metal Bike\",\n        \"summary\": \"Incredible Ergonomic Cotton Salad\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J (PREVIEW)\",\n        \"createdAt\": \"2020-09-18T21:27:03.307Z\",\n        \"updatedAt\": \"2020-09-19T23:16:39.307Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 24221,\n        \"updatedBy\": 10399,\n        \"id\": \"f7ea54ae-4734-4565-aecd-bb7f86d3b184\",\n        \"name\": \"Handmade Wooden Pants\",\n        \"summary\": \"Ergonomic Awesome Rubber Towels\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design (PREVIEW)\",\n        \"createdAt\": \"2020-10-14T09:29:17.481Z\",\n        \"updatedAt\": \"2020-10-14T19:44:46.481Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 72035,\n        \"updatedBy\": 67690,\n        \"id\": \"83841b98-a598-4bb1-af91-31b8c732d67d\",\n        \"name\": \"Licensed Soft Bike\",\n        \"summary\": \"Rustic Incredible Wooden Sausages\",\n        \"description\": \"The Football Is Good For Training And Recreational Purposes (PREVIEW)\",\n        \"createdAt\": \"2020-08-11T13:53:01.550Z\",\n        \"updatedAt\": \"2020-08-12T08:45:24.550Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 68837,\n        \"updatedBy\": 36056,\n        \"id\": \"3876c0a0-011a-456f-a754-c5b316b35df7\",\n        \"name\": \"Rustic Plastic Mouse\",\n        \"summary\": \"Unbranded Sleek Plastic Shoes\",\n        \"description\": \"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients (PREVIEW)\",\n        \"createdAt\": \"2020-08-12T09:35:27.919Z\",\n        \"updatedAt\": \"2020-08-13T07:03:34.919Z\",\n        \"isPublic\": false\n    }\n]"
                    },
                    {
                      "id": "211b348b-7b55-4b46-83cd-1078ebcdb8c4",
                      "name": "Get LIVE public APIs",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis?isPublic=true&description=LIVE",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}",
                              "description": "Only return APIs that are inside the given workspace.",
                              "disabled": true
                            },
                            {
                              "key": "since",
                              "value": "{{since}}",
                              "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "until",
                              "value": "{{until}}",
                              "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "createdBy",
                              "value": "{{createdBy}}",
                              "description": "Only return APIs that have been created by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "updatedBy",
                              "value": "{{updatedBy}}",
                              "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "isPublic",
                              "value": "true",
                              "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false."
                            },
                            {
                              "key": "name",
                              "value": "{{name}}",
                              "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "summary",
                              "value": "{{summary}}",
                              "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "description",
                              "value": "LIVE",
                              "description": "Only return APIs whose description includes the given value. Matching is case insensitive."
                            },
                            {
                              "key": "sort",
                              "value": "{{sort}}",
                              "description": "The value of sort can be one of the names of the fields included in the response.",
                              "disabled": true
                            },
                            {
                              "key": "direction",
                              "value": "{{direction}}",
                              "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n    {\n        \"createdBy\": 76939,\n        \"updatedBy\": 51131,\n        \"id\": \"9e14b7af-05c3-4846-9ca6-07c295adb286\",\n        \"name\": \"Ergonomic Frozen Shoes\",\n        \"summary\": \"Gorgeous Rustic Frozen Chicken\",\n        \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals (LIVE)\",\n        \"createdAt\": \"2020-08-03T00:31:23.046Z\",\n        \"updatedAt\": \"2020-08-04T04:11:31.046Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 90,\n        \"updatedBy\": 94825,\n        \"id\": \"e858a057-eeb3-410b-ae58-df07e0a8e899\",\n        \"name\": \"Licensed Fresh Pants\",\n        \"summary\": \"Incredible Incredible Frozen Shirt\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design (LIVE)\",\n        \"createdAt\": \"2020-03-30T08:09:49.935Z\",\n        \"updatedAt\": \"2020-03-30T21:48:56.935Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 40565,\n        \"updatedBy\": 65205,\n        \"id\": \"40164b42-6920-4f01-bad7-e645fd94101e\",\n        \"name\": \"Awesome Fresh Cheese\",\n        \"summary\": \"Gorgeous Rustic Granite Pants\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive (LIVE)\",\n        \"createdAt\": \"2020-07-02T01:52:25.215Z\",\n        \"updatedAt\": \"2020-07-02T20:05:37.215Z\",\n        \"isPublic\": true\n    }\n]"
                    },
                    {
                      "id": "56808da7-3df8-474d-8a1c-35bb91e6c6b5",
                      "name": "Get LIVE private APIs",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis?isPublic=false&description=LIVE",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}",
                              "description": "Only return APIs that are inside the given workspace.",
                              "disabled": true
                            },
                            {
                              "key": "since",
                              "value": "{{since}}",
                              "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "until",
                              "value": "{{until}}",
                              "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "createdBy",
                              "value": "{{createdBy}}",
                              "description": "Only return APIs that have been created by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "updatedBy",
                              "value": "{{updatedBy}}",
                              "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "isPublic",
                              "value": "false",
                              "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false."
                            },
                            {
                              "key": "name",
                              "value": "{{name}}",
                              "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "summary",
                              "value": "{{summary}}",
                              "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "description",
                              "value": "LIVE",
                              "description": "Only return APIs whose description includes the given value. Matching is case insensitive."
                            },
                            {
                              "key": "sort",
                              "value": "{{sort}}",
                              "description": "The value of sort can be one of the names of the fields included in the response.",
                              "disabled": true
                            },
                            {
                              "key": "direction",
                              "value": "{{direction}}",
                              "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n    {\n        \"createdBy\": 413,\n        \"updatedBy\": 35591,\n        \"id\": \"ac090be2-46c3-455d-80a8-132e57a3d48d\",\n        \"name\": \"Refined Rubber Shirt\",\n        \"summary\": \"Handcrafted Incredible Soft Pants\",\n        \"description\": \"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients (LIVE)\",\n        \"createdAt\": \"2020-06-21T08:07:37.935Z\",\n        \"updatedAt\": \"2020-06-21T23:35:28.935Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 82371,\n        \"updatedBy\": 48388,\n        \"id\": \"6790c065-7fc9-4c52-9c37-2e55d4874ef2\",\n        \"name\": \"Licensed Metal Gloves\",\n        \"summary\": \"Licensed Tasty Fresh Chips\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive (LIVE)\",\n        \"createdAt\": \"2021-02-17T19:13:25.976Z\",\n        \"updatedAt\": \"2021-02-18T09:46:57.976Z\",\n        \"isPublic\": false\n    }\n]"
                    },
                    {
                      "id": "68bfb3d8-6f93-4a70-a5cd-2e5c3a3dd730",
                      "name": "Sort all APIs by name",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis?sort=name",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}",
                              "description": "Only return APIs that are inside the given workspace.",
                              "disabled": true
                            },
                            {
                              "key": "since",
                              "value": "{{since}}",
                              "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "until",
                              "value": "{{until}}",
                              "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "createdBy",
                              "value": "{{createdBy}}",
                              "description": "Only return APIs that have been created by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "updatedBy",
                              "value": "{{updatedBy}}",
                              "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "isPublic",
                              "value": "{{isPublic}}",
                              "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false.",
                              "disabled": true
                            },
                            {
                              "key": "name",
                              "value": "{{name}}",
                              "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "summary",
                              "value": "{{summary}}",
                              "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "description",
                              "value": "{{description}}",
                              "description": "Only return APIs whose description includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "sort",
                              "value": "name",
                              "description": "The value of sort can be one of the names of the fields included in the response."
                            },
                            {
                              "key": "direction",
                              "value": "{{direction}}",
                              "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n    {\n        \"createdBy\": 40565,\n        \"updatedBy\": 65205,\n        \"id\": \"40164b42-6920-4f01-bad7-e645fd94101e\",\n        \"name\": \"Awesome Fresh Cheese\",\n        \"summary\": \"Gorgeous Rustic Granite Pants\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive (LIVE)\",\n        \"createdAt\": \"2020-07-02T01:55:14.478Z\",\n        \"updatedAt\": \"2020-07-02T20:08:26.478Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 42847,\n        \"updatedBy\": 22685,\n        \"id\": \"b8bb76cf-6a97-4266-9ab5-730b69ba2721\",\n        \"name\": \"Awesome Metal Hat\",\n        \"summary\": \"Practical Generic Plastic Pizza\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J (PREVIEW)\",\n        \"createdAt\": \"2020-06-24T10:31:57.238Z\",\n        \"updatedAt\": \"2020-06-25T06:20:12.238Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 72244,\n        \"updatedBy\": 41720,\n        \"id\": \"5a55334f-ac1c-4606-a726-14e6cebf8879\",\n        \"name\": \"Awesome Wooden Gloves\",\n        \"summary\": \"Incredible Sleek Cotton Chicken\",\n        \"description\": \"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients (PREVIEW)\",\n        \"createdAt\": \"2020-06-08T10:36:22.716Z\",\n        \"updatedAt\": \"2020-06-09T03:34:44.716Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 76939,\n        \"updatedBy\": 51131,\n        \"id\": \"9e14b7af-05c3-4846-9ca6-07c295adb286\",\n        \"name\": \"Ergonomic Frozen Shoes\",\n        \"summary\": \"Gorgeous Rustic Frozen Chicken\",\n        \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals (LIVE)\",\n        \"createdAt\": \"2020-08-03T00:34:12.310Z\",\n        \"updatedAt\": \"2020-08-04T04:14:20.310Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 44032,\n        \"updatedBy\": 18109,\n        \"id\": \"70c9941e-99d7-452e-8c29-5c71ad3d9ee2\",\n        \"name\": \"Ergonomic Steel Shoes\",\n        \"summary\": \"Rustic Handcrafted Cotton Car\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J (PREVIEW)\",\n        \"createdAt\": \"2020-09-03T06:50:40.225Z\",\n        \"updatedAt\": \"2020-09-04T02:11:11.225Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 31514,\n        \"updatedBy\": 50221,\n        \"id\": \"75d02311-730c-44e6-8545-fd88a8017cf6\",\n        \"name\": \"Fantastic Steel Computer\",\n        \"summary\": \"Intelligent Practical Granite Chips\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J (PREVIEW)\",\n        \"createdAt\": \"2021-01-31T07:50:47.500Z\",\n        \"updatedAt\": \"2021-02-01T01:12:49.500Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 14877,\n        \"updatedBy\": 99798,\n        \"id\": \"fad1d21d-9408-4b10-9153-5ea558b9a3f9\",\n        \"name\": \"Gorgeous Metal Bike\",\n        \"summary\": \"Incredible Ergonomic Cotton Salad\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J (PREVIEW)\",\n        \"createdAt\": \"2020-09-18T21:32:00.881Z\",\n        \"updatedAt\": \"2020-09-19T23:21:36.881Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 49549,\n        \"updatedBy\": 98555,\n        \"id\": \"3869c17d-c948-4650-856b-ade487a49d94\",\n        \"name\": \"Handcrafted Granite Pizza\",\n        \"summary\": \"Rustic Ergonomic Plastic Cheese\",\n        \"description\": \"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients (PREVIEW)\",\n        \"createdAt\": \"2020-12-04T05:36:48.656Z\",\n        \"updatedAt\": \"2020-12-04T08:38:20.656Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 76547,\n        \"updatedBy\": 594,\n        \"id\": \"f5287289-644a-460d-aa0f-27ce0cb4fcdd\",\n        \"name\": \"Handmade Plastic Chips\",\n        \"summary\": \"Tasty Practical Metal Pizza\",\n        \"description\": \"Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles (PREVIEW)\",\n        \"createdAt\": \"2020-11-22T23:59:08.914Z\",\n        \"updatedAt\": \"2020-11-23T11:07:46.914Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 57245,\n        \"updatedBy\": 21229,\n        \"id\": \"18e2aebf-0794-4882-82cb-158be8365edd\",\n        \"name\": \"Handmade Plastic Shirt\",\n        \"summary\": \"Small Intelligent Plastic Shirt\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design (PREVIEW)\",\n        \"createdAt\": \"2020-12-29T19:51:23.992Z\",\n        \"updatedAt\": \"2020-12-30T01:15:05.992Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 24221,\n        \"updatedBy\": 10399,\n        \"id\": \"f7ea54ae-4734-4565-aecd-bb7f86d3b184\",\n        \"name\": \"Handmade Wooden Pants\",\n        \"summary\": \"Ergonomic Awesome Rubber Towels\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design (PREVIEW)\",\n        \"createdAt\": \"2020-10-14T09:34:15.055Z\",\n        \"updatedAt\": \"2020-10-14T19:49:44.055Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 535,\n        \"updatedBy\": 20454,\n        \"id\": \"e7e83104-de39-4071-87b8-06b4d62ccc4a\",\n        \"name\": \"Incredible Frozen Tuna\",\n        \"summary\": \"Fantastic Ergonomic Concrete Tuna\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J (PREVIEW)\",\n        \"createdAt\": \"2021-02-04T16:21:29.342Z\",\n        \"updatedAt\": \"2021-02-04T18:10:35.342Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 90,\n        \"updatedBy\": 94825,\n        \"id\": \"e858a057-eeb3-410b-ae58-df07e0a8e899\",\n        \"name\": \"Licensed Fresh Pants\",\n        \"summary\": \"Incredible Incredible Frozen Shirt\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design (LIVE)\",\n        \"createdAt\": \"2020-03-30T08:12:39.199Z\",\n        \"updatedAt\": \"2020-03-30T21:51:46.199Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 82371,\n        \"updatedBy\": 48388,\n        \"id\": \"6790c065-7fc9-4c52-9c37-2e55d4874ef2\",\n        \"name\": \"Licensed Metal Gloves\",\n        \"summary\": \"Licensed Tasty Fresh Chips\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive (LIVE)\",\n        \"createdAt\": \"2021-02-17T19:15:35.981Z\",\n        \"updatedAt\": \"2021-02-18T09:49:07.981Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 72035,\n        \"updatedBy\": 67690,\n        \"id\": \"83841b98-a598-4bb1-af91-31b8c732d67d\",\n        \"name\": \"Licensed Soft Bike\",\n        \"summary\": \"Rustic Incredible Wooden Sausages\",\n        \"description\": \"The Football Is Good For Training And Recreational Purposes (PREVIEW)\",\n        \"createdAt\": \"2020-08-11T13:57:59.124Z\",\n        \"updatedAt\": \"2020-08-12T08:50:22.124Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 413,\n        \"updatedBy\": 35591,\n        \"id\": \"ac090be2-46c3-455d-80a8-132e57a3d48d\",\n        \"name\": \"Refined Rubber Shirt\",\n        \"summary\": \"Handcrafted Incredible Soft Pants\",\n        \"description\": \"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients (LIVE)\",\n        \"createdAt\": \"2020-06-21T08:09:47.941Z\",\n        \"updatedAt\": \"2020-06-21T23:37:38.941Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 33867,\n        \"updatedBy\": 47845,\n        \"id\": \"8899840e-fae5-4384-b84e-4f94b98c56ab\",\n        \"name\": \"Refined Wooden Mouse\",\n        \"summary\": \"Generic Tasty Fresh Pants\",\n        \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals (PREVIEW)\",\n        \"createdAt\": \"2020-10-04T01:59:19.163Z\",\n        \"updatedAt\": \"2020-10-05T01:01:10.163Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 68837,\n        \"updatedBy\": 36056,\n        \"id\": \"3876c0a0-011a-456f-a754-c5b316b35df7\",\n        \"name\": \"Rustic Plastic Mouse\",\n        \"summary\": \"Unbranded Sleek Plastic Shoes\",\n        \"description\": \"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients (PREVIEW)\",\n        \"createdAt\": \"2020-08-12T09:40:25.493Z\",\n        \"updatedAt\": \"2020-08-13T07:08:32.493Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 49433,\n        \"updatedBy\": 20139,\n        \"id\": \"7c57ecd0-a87e-4996-b4b4-6bad09a70ab6\",\n        \"name\": \"Sleek Metal Computer\",\n        \"summary\": \"Tasty Awesome Steel Car\",\n        \"description\": \"Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support (PREVIEW)\",\n        \"createdAt\": \"2020-08-12T10:34:10.486Z\",\n        \"updatedAt\": \"2020-08-12T22:36:00.486Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 79884,\n        \"updatedBy\": 59655,\n        \"id\": \"3379b46e-39fb-4aad-b0e4-08619f239553\",\n        \"name\": \"Tasty Wooden Towels\",\n        \"summary\": \"Intelligent Generic Plastic Shirt\",\n        \"description\": \"Carbonite web goalkeeper gloves are ergonomically designed to give easy fit (PREVIEW)\",\n        \"createdAt\": \"2020-11-11T04:58:13.319Z\",\n        \"updatedAt\": \"2020-11-12T03:09:45.319Z\",\n        \"isPublic\": true\n    }\n]"
                    },
                    {
                      "id": "47686478-8917-49f3-b917-0c7adfe584fb",
                      "name": "Sort public APIs by name",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis?isPublic=true&sort=name",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}",
                              "description": "Only return APIs that are inside the given workspace.",
                              "disabled": true
                            },
                            {
                              "key": "since",
                              "value": "{{since}}",
                              "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "until",
                              "value": "{{until}}",
                              "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "createdBy",
                              "value": "{{createdBy}}",
                              "description": "Only return APIs that have been created by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "updatedBy",
                              "value": "{{updatedBy}}",
                              "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "isPublic",
                              "value": "true",
                              "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false."
                            },
                            {
                              "key": "name",
                              "value": "{{name}}",
                              "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "summary",
                              "value": "{{summary}}",
                              "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "description",
                              "value": "{{description}}",
                              "description": "Only return APIs whose description includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "sort",
                              "value": "name",
                              "description": "The value of sort can be one of the names of the fields included in the response."
                            },
                            {
                              "key": "direction",
                              "value": "{{direction}}",
                              "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n    {\n        \"createdBy\": 40565,\n        \"updatedBy\": 65205,\n        \"id\": \"40164b42-6920-4f01-bad7-e645fd94101e\",\n        \"name\": \"Awesome Fresh Cheese\",\n        \"summary\": \"Gorgeous Rustic Granite Pants\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive (LIVE)\",\n        \"createdAt\": \"2020-07-02T01:56:24.300Z\",\n        \"updatedAt\": \"2020-07-02T20:09:36.300Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 42847,\n        \"updatedBy\": 22685,\n        \"id\": \"b8bb76cf-6a97-4266-9ab5-730b69ba2721\",\n        \"name\": \"Awesome Metal Hat\",\n        \"summary\": \"Practical Generic Plastic Pizza\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J (PREVIEW)\",\n        \"createdAt\": \"2020-06-24T10:33:07.060Z\",\n        \"updatedAt\": \"2020-06-25T06:21:22.060Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 72244,\n        \"updatedBy\": 41720,\n        \"id\": \"5a55334f-ac1c-4606-a726-14e6cebf8879\",\n        \"name\": \"Awesome Wooden Gloves\",\n        \"summary\": \"Incredible Sleek Cotton Chicken\",\n        \"description\": \"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients (PREVIEW)\",\n        \"createdAt\": \"2020-06-08T10:37:32.538Z\",\n        \"updatedAt\": \"2020-06-09T03:35:54.538Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 76939,\n        \"updatedBy\": 51131,\n        \"id\": \"9e14b7af-05c3-4846-9ca6-07c295adb286\",\n        \"name\": \"Ergonomic Frozen Shoes\",\n        \"summary\": \"Gorgeous Rustic Frozen Chicken\",\n        \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals (LIVE)\",\n        \"createdAt\": \"2020-08-03T00:35:22.131Z\",\n        \"updatedAt\": \"2020-08-04T04:15:30.131Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 44032,\n        \"updatedBy\": 18109,\n        \"id\": \"70c9941e-99d7-452e-8c29-5c71ad3d9ee2\",\n        \"name\": \"Ergonomic Steel Shoes\",\n        \"summary\": \"Rustic Handcrafted Cotton Car\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J (PREVIEW)\",\n        \"createdAt\": \"2020-09-03T06:51:50.046Z\",\n        \"updatedAt\": \"2020-09-04T02:12:21.046Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 57245,\n        \"updatedBy\": 21229,\n        \"id\": \"18e2aebf-0794-4882-82cb-158be8365edd\",\n        \"name\": \"Handmade Plastic Shirt\",\n        \"summary\": \"Small Intelligent Plastic Shirt\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design (PREVIEW)\",\n        \"createdAt\": \"2020-12-29T19:52:33.813Z\",\n        \"updatedAt\": \"2020-12-30T01:16:15.813Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 535,\n        \"updatedBy\": 20454,\n        \"id\": \"e7e83104-de39-4071-87b8-06b4d62ccc4a\",\n        \"name\": \"Incredible Frozen Tuna\",\n        \"summary\": \"Fantastic Ergonomic Concrete Tuna\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J (PREVIEW)\",\n        \"createdAt\": \"2021-02-04T16:22:39.163Z\",\n        \"updatedAt\": \"2021-02-04T18:11:45.163Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 90,\n        \"updatedBy\": 94825,\n        \"id\": \"e858a057-eeb3-410b-ae58-df07e0a8e899\",\n        \"name\": \"Licensed Fresh Pants\",\n        \"summary\": \"Incredible Incredible Frozen Shirt\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design (LIVE)\",\n        \"createdAt\": \"2020-03-30T08:13:49.021Z\",\n        \"updatedAt\": \"2020-03-30T21:52:56.021Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 72035,\n        \"updatedBy\": 67690,\n        \"id\": \"83841b98-a598-4bb1-af91-31b8c732d67d\",\n        \"name\": \"Licensed Soft Bike\",\n        \"summary\": \"Rustic Incredible Wooden Sausages\",\n        \"description\": \"The Football Is Good For Training And Recreational Purposes (PREVIEW)\",\n        \"createdAt\": \"2020-08-11T13:59:08.946Z\",\n        \"updatedAt\": \"2020-08-12T08:51:31.946Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 33867,\n        \"updatedBy\": 47845,\n        \"id\": \"8899840e-fae5-4384-b84e-4f94b98c56ab\",\n        \"name\": \"Refined Wooden Mouse\",\n        \"summary\": \"Generic Tasty Fresh Pants\",\n        \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals (PREVIEW)\",\n        \"createdAt\": \"2020-10-04T02:00:28.984Z\",\n        \"updatedAt\": \"2020-10-05T01:02:19.984Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 49433,\n        \"updatedBy\": 20139,\n        \"id\": \"7c57ecd0-a87e-4996-b4b4-6bad09a70ab6\",\n        \"name\": \"Sleek Metal Computer\",\n        \"summary\": \"Tasty Awesome Steel Car\",\n        \"description\": \"Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support (PREVIEW)\",\n        \"createdAt\": \"2020-08-12T10:35:20.307Z\",\n        \"updatedAt\": \"2020-08-12T22:37:10.307Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 79884,\n        \"updatedBy\": 59655,\n        \"id\": \"3379b46e-39fb-4aad-b0e4-08619f239553\",\n        \"name\": \"Tasty Wooden Towels\",\n        \"summary\": \"Intelligent Generic Plastic Shirt\",\n        \"description\": \"Carbonite web goalkeeper gloves are ergonomically designed to give easy fit (PREVIEW)\",\n        \"createdAt\": \"2020-11-11T04:59:23.140Z\",\n        \"updatedAt\": \"2020-11-12T03:10:55.140Z\",\n        \"isPublic\": true\n    }\n]"
                    },
                    {
                      "id": "381ca795-6400-4c73-919a-88fc54cc029f",
                      "name": "Sort public LIVE APIs by name",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://api.getpostman.com/apis?isPublic=true&description=LIVE&sort=name",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "apis"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspaceId}}",
                              "description": "Only return APIs that are inside the given workspace.",
                              "disabled": true
                            },
                            {
                              "key": "since",
                              "value": "{{since}}",
                              "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "until",
                              "value": "{{until}}",
                              "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                              "disabled": true
                            },
                            {
                              "key": "createdBy",
                              "value": "{{createdBy}}",
                              "description": "Only return APIs that have been created by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "updatedBy",
                              "value": "{{updatedBy}}",
                              "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                              "disabled": true
                            },
                            {
                              "key": "isPublic",
                              "value": "true",
                              "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false."
                            },
                            {
                              "key": "name",
                              "value": "{{name}}",
                              "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "summary",
                              "value": "{{summary}}",
                              "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                              "disabled": true
                            },
                            {
                              "key": "description",
                              "value": "LIVE",
                              "description": "Only return APIs whose description includes the given value. Matching is case insensitive."
                            },
                            {
                              "key": "sort",
                              "value": "name",
                              "description": "The value of sort can be one of the names of the fields included in the response."
                            },
                            {
                              "key": "direction",
                              "value": "{{direction}}",
                              "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n    {\n        \"createdBy\": 40565,\n        \"updatedBy\": 65205,\n        \"id\": \"40164b42-6920-4f01-bad7-e645fd94101e\",\n        \"name\": \"Awesome Fresh Cheese\",\n        \"summary\": \"Gorgeous Rustic Granite Pants\",\n        \"description\": \"The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive (LIVE)\",\n        \"createdAt\": \"2020-07-02T01:57:06.475Z\",\n        \"updatedAt\": \"2020-07-02T20:10:18.475Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 76939,\n        \"updatedBy\": 51131,\n        \"id\": \"9e14b7af-05c3-4846-9ca6-07c295adb286\",\n        \"name\": \"Ergonomic Frozen Shoes\",\n        \"summary\": \"Gorgeous Rustic Frozen Chicken\",\n        \"description\": \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals (LIVE)\",\n        \"createdAt\": \"2020-08-03T00:36:04.306Z\",\n        \"updatedAt\": \"2020-08-04T04:16:12.306Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 90,\n        \"updatedBy\": 94825,\n        \"id\": \"e858a057-eeb3-410b-ae58-df07e0a8e899\",\n        \"name\": \"Licensed Fresh Pants\",\n        \"summary\": \"Incredible Incredible Frozen Shirt\",\n        \"description\": \"The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design (LIVE)\",\n        \"createdAt\": \"2020-03-30T08:14:31.195Z\",\n        \"updatedAt\": \"2020-03-30T21:53:38.195Z\",\n        \"isPublic\": true\n    }\n]"
                    }
                  ]
                },
                {
                  "name": "Single API",
                  "id": "499df033-fe59-4b4e-b0cd-4b4feb817f3c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://api.getpostman.com/apis/{{apiId}}",
                    "description": "This call fetches a single API having the specified id.\n\nResponse contains an `api` object with all the details related to the queried API, namely, `id`, `name`, `summary`, `description` etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                  },
                  "response": [
                    {
                      "id": "8f9b6b5a-c185-4cfc-98ed-80e5e0f9675b",
                      "name": "Get single API",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://api.getpostman.com/apis/{{apiId}}"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "Text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n\t\"api\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t}\n}"
                    }
                  ]
                }
              ],
              "id": "10c17848-e4c8-492d-9106-3c42d70495ae"
            },
            {
              "name": "Webhooks",
              "item": [
                {
                  "name": "Create Webhook",
                  "id": "591e1e8e-6288-4bcb-899b-ef65453f1c85",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"webhook\":{\n        \"name\": \"{{webhook_name}}\",\n        \"collection\": \"{{collection_id}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "https://api.getpostman.com/webhooks?workspace={{workspace_id}}",
                      "protocol": "https",
                      "host": [
                        "api",
                        "getpostman",
                        "com"
                      ],
                      "path": [
                        "webhooks"
                      ],
                      "query": [
                        {
                          "key": "workspace",
                          "value": "{{workspace_id}}"
                        }
                      ]
                    },
                    "description": "Create a webhook that triggers a collection with your custom payload.\n\nYou can specify the webhook name and the collection to trigger by using the following attributes of the `webhook` object on your JSON body:\n\n* `name`: the name of the webhook that you're creating.\n* `collection`: the ID of the collection that you want to trigger once this webhook is called.\n\nOnce created, the webhook URL can be retrieved by accessing the `webhookUrl` attribute of the `webhook` object on the response JSON payload."
                  },
                  "response": [
                    {
                      "id": "68ca40f5-660e-412a-8526-8c1748fd5b9b",
                      "name": "Create Webhook",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "x-workspace-id",
                            "value": "{{workspaceId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"webhook\":{\n        \"name\": \"Sample Webhook\",\n        \"collection\": \"13223329-78f7e7dd-e9f4-4607-9610-098524f06589\"\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "https://api.getpostman.com/webhooks?workspace={{workspace_id}}",
                          "protocol": "https",
                          "host": [
                            "api",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "webhooks"
                          ],
                          "query": [
                            {
                              "key": "workspace",
                              "value": "{{workspace_id}}"
                            }
                          ]
                        }
                      },
                      "_postman_previewlanguage": "json",
                      "header": null,
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"webhook\": {\n        \"id\": \"1eba1c36-c343-4eb0-a25a-37117650e628\",\n        \"name\": \"Sample Webhook\",\n        \"collection\": \"13323329-78f7e7dd-e9f4-4607-9610-098524f06589\",\n        \"webhookUrl\": \"https://example.com/webhookUrl\",\n        \"uid\": \"13323329-1eba1c36-c343-4eb0-a25a-37117650e628\"\n    }\n}"
                    }
                  ]
                }
              ],
              "id": "54c5ff1b-96cf-45f9-9fdd-79a75e382108",
              "description": "With webhooks you can trigger a collection at a specific time with your own custom payload which can then be accessed in the collection.\n\nLearn more about webhooks in our [learning center](https://learning.postman.com/docs/designing-and-developing-your-api/monitoring-your-api/integrations-for-alerts/)."
            }
          ],
          "id": "c2c949c4-156e-4070-93a7-0f3ecbc2f184",
          "description": "The Postman API allows you to programmatically access data stored in Postman account with ease.\n\nThe easiest way to get started with the API is to **fork** the \"10 Postman Features\" collection into your own workspace and use Postman to send requests.\n\n# Overview\n\n1. You need a valid <a href=\"#authentication\">API Key</a> to send requests to the API endpoints. You can get your key from the [integrations dashboard](https://go.postman.co/settings/me/api-keys).\n\n1. The API has an access <a href=\"#rate-limits\">rate limit</a> applied to it.\n\n1. The Postman API will only respond to secured communication done over HTTPS. HTTP requests will be sent a `301` redirect to corresponding HTTPS resources.\n\n1. Response to every request is sent in [JSON format](https://en.wikipedia.org/wiki/JSON). In case the API request results in an error, it is represented by an `\"error\": {}` key in the JSON response.\n\n1. The request method (verb) determines the nature of action you intend to perform. A request made using the `GET` method implies that you want to fetch something from Postman, and `POST` implies you want to save something new to Postman.\n\n1. The API calls will respond with appropriate [HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for all requests. Within Postman Client, when a response is received, the status code is highlighted and is accompanied by a help text that indicates the possible meaning of the response code. A `200 OK` indicates all went well, while `4XX` or `5XX` response codes indicate an error from the requesting client or our API servers respectively.\n\n1. Individual resources in your Postman Account is accessible using its unique id (`uid`). The `uid` is a simple concatenation of the resource owner's user-id and the resource-id. For example, a collection's `uid` is `{{owner_id}}-{{collection_id}}`.\n\n# Authentication\n\nAn API Key is required to be sent as part of every request to the Postman API, in the form of an `X-Api-Key` request header.\n\n> If you do not have an API Key, you can easily generate one by heading over to the [Postman Integrations Dashboard](https://go.postman.co/integrations/services/pm_pro_api).\n\nAn API Key tells our API server that the request it received came from you. Everything that you have access to in Postman is accessible with an API Key that is generated by you.\n\nFor ease of use inside Postman, you could store your API key in an [environment variable](https://www.getpostman.com/docs/environments) called `postman_api_key` and this [Collection](https://www.getpostman.com/docs/collections) will automatically use it to make API calls.\n\n## API Key related error response\n\nIf an API Key is missing, malformed, or invalid, you will receive a `401 Unauthorised` response code and the following JSON response:\n\n```\n{\n  \"error\": { \n    \"name\": \"AuthenticationError\",\n    \"message\": \"API Key missing. Every request requires an API Key to be sent.\"\n  }\n}\n```\n\n## Using the API Key as a query parameter\n\nEvery request that accepts API Key as `X-Api-Key` request header, also accepts the key when sent as `apikey` URL query parameter.\n\nAPI key sent as part of the header has a higher priority in case you send the key using both request header and query parameter.\n\n\n# Rate Limits\n\nAPI access rate limits are applied at a per-key basis in unit time. Access to the API using a key is limited to **60 requests per minute**. In addition, every API response is accompanied by the following set of headers to identify the status of your consumption.\n\n\n| Header                  | Description |\n|-------------------------|-------------|\n| `X-RateLimit-Limit`     | The maximum number of requests that the consumer is permitted to make per minute. |\n| `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. |\n| `X-RateLimit-Reset`     | The time at which the current rate limit window resets in UTC epoch seconds. |\n\n\nOnce you hit the rate limit, you will receive a response similar to the following JSON, with a status code of `429 Too Many Requests`.\n\n```json\n{\n  \"error\": {\n    \"name\": \"rateLimitError\",\n    \"message\": \"Rate Limit exceeded. Please retry at 1465452702843\"\n  }\n}\n```\n\n\n# Support\n\nFor help regarding accessing the Postman API, feel free to discuss it in our [Discourse Community](https://community.getpostman.com). You can also drop in a line at [help@getpostman.com](mailto:help@getpostman.com).\n\nIn the event you receive a `503` response from our servers, it implies that we have hit an unexpected spike in API access traffic and would usually be operational within the next 5 minutes. If the outage persists, or your receive any other form of `5XX` error, kindly let us know.\n\n\n# Terms of Use\n\nFor information on API terms of use and privacy, refer to our terms at [http://postman.com/legal/terms/](http://postman.com/legal/terms/) and our privacy policy at [https://www.postman.com/legal/privacy-policy/](https://www.postman.com/legal/privacy-policy/).\n\n\n# API Reference",
          "auth": {
            "type": "apikey",
            "apikey": {
              "value": "{{postman_api_key}}",
              "key": "X-API-Key"
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b5733bbd-26d9-41fa-8455-530def09ef6d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "71a75f37-50e9-4bc8-8351-b4ea42bc7a9c",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "2. Postman Echo",
          "item": [
            {
              "name": "Request Methods",
              "item": [
                {
                  "name": "GET Request",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "fb587c68-31e7-4d18-8378-8b0719a2ecda",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response body has json with request queries\", function () {",
                          "    pm.response.to.have.jsonBody('args.foo1', 'bar1')",
                          "        .and.have.jsonBody('args.foo2', 'bar2');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "dfa3558b-01e6-4657-a064-0f3be66a16ee",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
                      "protocol": "https",
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "path": [
                        "get"
                      ],
                      "query": [
                        {
                          "key": "foo1",
                          "value": "bar1"
                        },
                        {
                          "key": "foo2",
                          "value": "bar2",
                          "type": "text"
                        }
                      ]
                    },
                    "description": "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested."
                  },
                  "response": [
                    {
                      "id": "ae9e2cf6-9307-4053-84d6-18ff4f31fea9",
                      "name": "GET Request Woops",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
                          "protocol": "https",
                          "host": [
                            "postman-echo",
                            "com"
                          ],
                          "path": [
                            "get"
                          ],
                          "query": [
                            {
                              "key": "foo1",
                              "value": "bar1"
                            },
                            {
                              "key": "foo2",
                              "value": "bar2"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Encoding",
                          "value": "gzip"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json; charset=utf-8"
                        },
                        {
                          "key": "Date",
                          "value": "Tue, 11 Jun 2019 10:43:13 GMT"
                        },
                        {
                          "key": "ETag",
                          "value": "W/\"161-aLhNcsGArlgLSKbxPqfBW3viHPI\""
                        },
                        {
                          "key": "Server",
                          "value": "nginx"
                        },
                        {
                          "key": "set-cookie",
                          "value": "sails.sid=s%3AGz-wblZgXE8FCDq7aJpx_tUgZUcG3Nsw.LdNEN8L0C7nGWkvGLwvdw6R2s6Syjr%2FzkvyevA8qR0c; Path=/; HttpOnly"
                        },
                        {
                          "key": "Vary",
                          "value": "Accept-Encoding"
                        },
                        {
                          "key": "Content-Length",
                          "value": "249"
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n    \"args\": {\n        \"foo1\": \"bar1\",\n        \"foo2\": \"bar2\"\n    },\n    \"headers\": {\n        \"x-forwarded-proto\": \"https\",\n        \"host\": \"postman-echo.com\",\n        \"accept\": \"*/*\",\n        \"accept-encoding\": \"gzip, deflate\",\n        \"cache-control\": \"no-cache\",\n        \"postman-token\": \"5c27cd7d-6b16-4e5a-a0ef-191c9a3a275f\",\n        \"user-agent\": \"PostmanRuntime/7.6.1\",\n        \"x-forwarded-port\": \"443\"\n    },\n    \"url\": \"https://postman-echo.com/get?foo1=bar1&foo2=bar2\"\n}"
                    }
                  ]
                },
                {
                  "name": "POST Raw Text",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response body has json with request body\", function () {",
                          "    pm.response.to.have.jsonBody('data', ",
                          "        'This is expected to be sent back as part of response body.');",
                          "});"
                        ],
                        "id": "ebeb837b-6a8f-46e4-99ed-596a8de895d8"
                      }
                    }
                  ],
                  "id": "2818070b-4ed4-4688-9738-2d50301ad4cc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "This is expected to be sent back as part of response body."
                    },
                    "url": "https://postman-echo.com/post",
                    "description": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested."
                  },
                  "response": []
                },
                {
                  "name": "POST Form Data",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response body has json with form data\", function () {",
                          "    pm.response.to.have.jsonBody('form.foo1', 'bar1')",
                          "        .and.have.jsonBody('form.foo2', 'bar2');",
                          "});"
                        ],
                        "id": "3b387fc6-5d80-46a8-bd7f-9e0168bdd373"
                      }
                    }
                  ],
                  "id": "9cd06432-68f2-4972-b26e-909178e85518",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "key": "foo1",
                          "value": "bar1",
                          "type": "text"
                        },
                        {
                          "key": "foo2",
                          "value": "bar2",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "https://postman-echo.com/post",
                    "description": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter."
                  },
                  "response": []
                },
                {
                  "name": "PUT Request",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response body has json with form data\", function () {",
                          "    pm.response.to.have.jsonBody('data', ",
                          "        'This is expected to be sent back as part of response body.');",
                          "});"
                        ],
                        "id": "c32385e2-3e8a-4e83-a21b-0dec4d68c4c9"
                      }
                    }
                  ],
                  "id": "9cb3bc84-4bea-4557-a367-ddd3dc02d368",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "This is expected to be sent back as part of response body."
                    },
                    "url": "https://postman-echo.com/put",
                    "description": "The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \ntransfer data to a server (and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `PUT` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following \nraw HTTP request,\n\n> PUT /hi/there?hand=wave\n>\n> <request-body>\n\n\n"
                  },
                  "response": []
                },
                {
                  "name": "PATCH Request",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response body has json with form data\", function () {",
                          "    pm.response.to.have.jsonBody('data', ",
                          "        'This is expected to be sent back as part of response body.');",
                          "});"
                        ],
                        "id": "61c65dc3-d2c5-4e47-8809-a22c6488e1d9"
                      }
                    }
                  ],
                  "id": "72767302-7edd-4e48-933a-6e2798bbedeb",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "This is expected to be sent back as part of response body."
                    },
                    "url": "https://postman-echo.com/patch",
                    "description": "The HTTP `PATCH` method is used to update resources on a server. The exact\nuse of `PATCH` requests depends on the server in question. There are a number\nof server implementations which handle `PATCH` differently. Technically, \n`PATCH` supports both Query String parameters and a Request Body.\n\nThis endpoint accepts an HTTP `PATCH` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body."
                  },
                  "response": []
                },
                {
                  "name": "DELETE Request",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response body has json with form data\", function () {",
                          "    pm.response.to.have.jsonBody('data', ",
                          "        'This is expected to be sent back as part of response body.');",
                          "});"
                        ],
                        "id": "d7d05bb1-e1c8-4ba8-b007-5c2abedf7d02"
                      }
                    }
                  ],
                  "id": "168c77b0-277c-47e7-9a33-214ab4ac2c7a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "This is expected to be sent back as part of response body."
                    },
                    "url": "https://postman-echo.com/delete",
                    "description": "The HTTP `DELETE` method is used to delete resources on a server. The exact\nuse of `DELETE` requests depends on the server implementation. In general, \n`DELETE` requests support both, Query String parameters as well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body."
                  },
                  "response": []
                }
              ],
              "id": "6e35d305-c05a-41ba-a640-11bb55d854d4",
              "description": "HTTP has multiple request \"verbs\", such as `GET`, `PUT`, `POST`, `DELETE`,\n`PATCH`, `HEAD`, etc. \n\nAn HTTP Method (verb) defines how a request should be interpreted by a server. \nThe endpoints in this section demonstrate various HTTP Verbs. Postman supports \nall the HTTP Verbs, including some rarely used ones, such as `PROPFIND`, `UNLINK`, \netc.\n\nFor details about HTTP Verbs, refer to [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9)\n"
            },
            {
              "name": "Headers",
              "item": [
                {
                  "name": "Request Headers",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "// we check to ensire that the headers we sent as request is returned as part of",
                          "// the response body. if you change the request headers, make sure to add them",
                          "// to the tests here",
                          "pm.test(\"sample request header should be returned in response body\", function () {",
                          "    pm.response.to.have.jsonBody('headers.my-sample-header', 'Lorem ipsum dolor sit amet');",
                          "});"
                        ],
                        "id": "3991a185-5262-4a8b-aa59-1aae7a950f4b"
                      }
                    }
                  ],
                  "id": "a66437ad-f1a5-4501-bf94-4231137e9331",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "my-sample-header",
                        "value": "Lorem ipsum dolor sit amet"
                      }
                    ],
                    "url": "https://postman-echo.com/headers",
                    "description": "A `GET` request to this endpoint returns the list of all request headers as part of the response JSON.\nIn Postman, sending your own set of headers through the [Headers tab](https://www.getpostman.com/docs/requests#headers?source=echo-collection-app-onboarding) will reveal the headers as part of the response."
                  },
                  "response": [
                    {
                      "id": "0a56e236-e2fc-4d90-89ee-b196e5db42ef",
                      "name": "my-sample-header",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "my-sample-header",
                            "value": "Lorem ipsum dolor sit amet"
                          }
                        ],
                        "url": "https://echo.getpostman.com/headers"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "name": "Access-Control-Allow-Credentials",
                          "key": "Access-Control-Allow-Credentials",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Headers",
                          "key": "Access-Control-Allow-Headers",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Methods",
                          "key": "Access-Control-Allow-Methods",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Origin",
                          "key": "Access-Control-Allow-Origin",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Connection",
                          "key": "Connection",
                          "value": "keep-alive",
                          "description": ""
                        },
                        {
                          "name": "Content-Encoding",
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "description": ""
                        },
                        {
                          "name": "Content-Length",
                          "key": "Content-Length",
                          "value": "342",
                          "description": ""
                        },
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json; charset=utf-8",
                          "description": ""
                        },
                        {
                          "name": "Date",
                          "key": "Date",
                          "value": "Thu, 31 Mar 2016 11:14:00 GMT",
                          "description": ""
                        },
                        {
                          "name": "Server",
                          "key": "Server",
                          "value": "nginx/1.6.2",
                          "description": ""
                        },
                        {
                          "name": "Vary",
                          "key": "Vary",
                          "value": "Accept-Encoding",
                          "description": ""
                        },
                        {
                          "name": "X-Powered-By",
                          "key": "X-Powered-By",
                          "value": "Sails <sailsjs.org>",
                          "description": ""
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": true,
                          "httpOnly": true,
                          "domain": "echo.getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": true,
                          "value": "s%3A9stja5zKmIILxq9Jvtha7Lp9LIz1VIdK.Vp8MHC%2BEUJe4ICZPXn2JAoXaV2bTgtoQd%2B3XJLNr51Y",
                          "key": "sails.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\n    \"headers\": {\n        \"host\": \"echo.getpostman.com\",\n        \"accept\": \"*/*\",\n        \"accept-encoding\": \"gzip, deflate, sdch\",\n        \"accept-language\": \"en-US,en;q=0.8\",\n        \"cache-control\": \"no-cache\",\n        \"my-sample-header\": \"Lorem ipsum dolor sit amet\",\n        \"postman-token\": \"3c8ea80b-f599-fba6-e0b4-a0910440e7b6\",\n        \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36\",\n        \"x-forwarded-port\": \"443\",\n        \"x-forwarded-proto\": \"https\"\n    }\n}"
                    }
                  ]
                },
                {
                  "name": "Response Headers",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response has the headers sent as part of request query\", function () {",
                          "    pm.response.to.have.header('foo1', 'bar1')",
                          "        .and.have.header('foo2', 'bar2');",
                          "});",
                          "",
                          "pm.test(\"sample request param should be returned in response body\", function () {",
                          "    pm.response.to.have.jsonBody('foo1', 'bar1')",
                          "        .and.have.jsonBody('foo2', 'bar2');",
                          "});"
                        ],
                        "id": "43e6ca99-faf4-4184-bf24-b16ac4973442"
                      }
                    }
                  ],
                  "id": "dc97eca1-6a8d-43c2-82a9-53d3d0cd1580",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://postman-echo.com/response-headers?foo1=bar1&foo2=bar2",
                      "protocol": "https",
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "path": [
                        "response-headers"
                      ],
                      "query": [
                        {
                          "key": "foo1",
                          "value": "bar1"
                        },
                        {
                          "key": "foo2",
                          "value": "bar2"
                        }
                      ]
                    },
                    "description": "This endpoint causes the server to send custom set of response headers. Providing header values as part of the URL parameters of a `GET` request to this endpoint returns the same as part of response header.\n\nTo send your own set of headers, simply add or replace the the URL parameters with your own set."
                  },
                  "response": [
                    {
                      "id": "d6fe85e7-afda-4223-bd3b-d170fc6009ab",
                      "name": "Response headers",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://echo.getpostman.com/response-headers?Content-Type=text/html&test=response_headers",
                          "protocol": "https",
                          "host": [
                            "echo",
                            "getpostman",
                            "com"
                          ],
                          "path": [
                            "response-headers"
                          ],
                          "query": [
                            {
                              "key": "Content-Type",
                              "value": "text/html"
                            },
                            {
                              "key": "test",
                              "value": "response_headers"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "html",
                      "header": [
                        {
                          "name": "Access-Control-Allow-Credentials",
                          "key": "Access-Control-Allow-Credentials",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Headers",
                          "key": "Access-Control-Allow-Headers",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Methods",
                          "key": "Access-Control-Allow-Methods",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Origin",
                          "key": "Access-Control-Allow-Origin",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Connection",
                          "key": "Connection",
                          "value": "keep-alive",
                          "description": ""
                        },
                        {
                          "name": "Content-Encoding",
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "description": ""
                        },
                        {
                          "name": "Content-Length",
                          "key": "Content-Length",
                          "value": "71",
                          "description": ""
                        },
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "text/html; charset=utf-8",
                          "description": ""
                        },
                        {
                          "name": "Date",
                          "key": "Date",
                          "value": "Thu, 31 Mar 2016 11:14:18 GMT",
                          "description": ""
                        },
                        {
                          "name": "Server",
                          "key": "Server",
                          "value": "nginx/1.6.2",
                          "description": ""
                        },
                        {
                          "name": "Vary",
                          "key": "Vary",
                          "value": "Accept-Encoding",
                          "description": ""
                        },
                        {
                          "name": "X-Powered-By",
                          "key": "X-Powered-By",
                          "value": "Sails <sailsjs.org>",
                          "description": ""
                        },
                        {
                          "name": "test",
                          "key": "test",
                          "value": "response_headers",
                          "description": ""
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": true,
                          "httpOnly": true,
                          "domain": "echo.getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": true,
                          "value": "s%3A9stja5zKmIILxq9Jvtha7Lp9LIz1VIdK.Vp8MHC%2BEUJe4ICZPXn2JAoXaV2bTgtoQd%2B3XJLNr51Y",
                          "key": "sails.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"Content-Type\":\"text/html\",\"test\":\"response_headers\"}"
                    }
                  ]
                }
              ],
              "id": "a4f0e4bd-f995-465d-8a2f-378deb6e17e2",
              "description": "The following set of endpoints allow one to see the headers being sent as part of a request and to get a custom set of headers as part of response.\n\nHTTP header fields provide required information about the request or response, or about the object sent in the message body. Both request headers and response headers can be controlled using these endpoints."
            },
            {
              "name": "Authentication Methods",
              "item": [
                {
                  "name": "Basic Auth",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response body has json saying 'authenticated'\", function () {",
                          "    pm.response.to.have.jsonBody('authenticated', true);",
                          "});"
                        ],
                        "id": "4d9e7fa1-0af4-4297-921e-0b90e86e1396"
                      }
                    }
                  ],
                  "id": "39f809c6-c278-4683-bc51-df0357228bd3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "basic",
                      "basic": {
                        "username": "postman",
                        "password": "password",
                        "showPassword": false
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "url": "https://postman-echo.com/basic-auth",
                    "description": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app."
                  },
                  "response": [
                    {
                      "id": "e47079af-9d2c-4b96-9a02-612fe51a5baf",
                      "name": "200",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": ""
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "javascript",
                      "header": [
                        {
                          "name": "Access-Control-Allow-Credentials",
                          "key": "Access-Control-Allow-Credentials",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Headers",
                          "key": "Access-Control-Allow-Headers",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Methods",
                          "key": "Access-Control-Allow-Methods",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Origin",
                          "key": "Access-Control-Allow-Origin",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Connection",
                          "key": "Connection",
                          "value": "keep-alive",
                          "description": ""
                        },
                        {
                          "name": "Content-Encoding",
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "description": ""
                        },
                        {
                          "name": "Content-Length",
                          "key": "Content-Length",
                          "value": "42",
                          "description": ""
                        },
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json; charset=utf-8",
                          "description": ""
                        },
                        {
                          "name": "Date",
                          "key": "Date",
                          "value": "Sat, 31 Oct 2015 06:38:25 GMT",
                          "description": ""
                        },
                        {
                          "name": "Server",
                          "key": "Server",
                          "value": "nginx/1.6.2",
                          "description": ""
                        },
                        {
                          "name": "Vary",
                          "key": "Vary",
                          "value": "Accept-Encoding",
                          "description": ""
                        },
                        {
                          "name": "X-Powered-By",
                          "key": "X-Powered-By",
                          "value": "Sails <sailsjs.org>",
                          "description": ""
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\"authenticated\":true}"
                    }
                  ]
                },
                {
                  "name": "DigestAuth Success",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "tests[\"response code is 200\"] = responseCode.code === 200;",
                          "tests[\"body contains authenticated\"] = responseBody.has(\"authenticated\");"
                        ],
                        "id": "dd06024d-6bda-41ac-8351-143622809855"
                      }
                    }
                  ],
                  "id": "fae34380-5b58-4b32-9fb7-68ed7d0fb2e5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "digest",
                      "digest": {
                        "algorithm": "MD5",
                        "username": "postman",
                        "realm": "",
                        "password": "password",
                        "nonce": "",
                        "nonceCount": "",
                        "clientNonce": "",
                        "opaque": "",
                        "qop": ""
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Digest username=\"postman\", realm=\"Users\", nonce=\"ni1LiL0O37PRRhofWdCLmwFsnEtH1lew\", uri=\"/digest-auth\", response=\"254679099562cf07df9b6f5d8d15db44\", opaque=\"\""
                      }
                    ],
                    "url": "https://postman-echo.com/digest-auth",
                    "description": "This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n\nWithin Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables."
                  },
                  "response": [
                    {
                      "id": "79c764f7-427a-4707-83f4-ede37dd865a9",
                      "name": "200",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": ""
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "javascript",
                      "header": [
                        {
                          "name": "Access-Control-Allow-Credentials",
                          "key": "Access-Control-Allow-Credentials",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Headers",
                          "key": "Access-Control-Allow-Headers",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Methods",
                          "key": "Access-Control-Allow-Methods",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Origin",
                          "key": "Access-Control-Allow-Origin",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Connection",
                          "key": "Connection",
                          "value": "keep-alive",
                          "description": ""
                        },
                        {
                          "name": "Content-Encoding",
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "description": ""
                        },
                        {
                          "name": "Content-Length",
                          "key": "Content-Length",
                          "value": "42",
                          "description": ""
                        },
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json; charset=utf-8",
                          "description": ""
                        },
                        {
                          "name": "Date",
                          "key": "Date",
                          "value": "Thu, 29 Oct 2015 06:17:51 GMT",
                          "description": ""
                        },
                        {
                          "name": "Server",
                          "key": "Server",
                          "value": "nginx/1.6.2",
                          "description": ""
                        },
                        {
                          "name": "Vary",
                          "key": "Vary",
                          "value": "Accept-Encoding",
                          "description": ""
                        },
                        {
                          "name": "X-Powered-By",
                          "key": "X-Powered-By",
                          "value": "Sails <sailsjs.org>",
                          "description": ""
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\"authenticated\":true}"
                    }
                  ]
                },
                {
                  "name": "Hawk Auth",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response body has json saying passed 'status'\", function () {",
                          "    pm.response.to.have.jsonBody('status', 'pass');",
                          "});"
                        ],
                        "id": "c551120b-cef8-4474-b6f9-f72554e58924"
                      }
                    }
                  ],
                  "id": "fd9d8d45-ebc7-46d1-af59-b711cf47a407",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "hawk",
                      "hawk": {
                        "authId": "dh37fgj492je",
                        "authKey": "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn",
                        "algorithm": "sha256",
                        "user": "",
                        "nonce": "RZKGNz",
                        "timestamp": ""
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "url": "https://postman-echo.com/auth/hawk",
                    "description": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK."
                  },
                  "response": [
                    {
                      "id": "17d369aa-b60f-46bd-8421-6121a7b3f9e8",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Authorization",
                            "type": "text",
                            "name": "Authorization",
                            "value": "Hawk id=\"dh37fgj492je\", ts=\"1459422734\", nonce=\"XiwiCU\", mac=\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\""
                          }
                        ],
                        "url": "https://echo.getpostman.com/auth/hawk"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "javascript",
                      "header": [
                        {
                          "name": "Access-Control-Allow-Credentials",
                          "key": "Access-Control-Allow-Credentials",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Headers",
                          "key": "Access-Control-Allow-Headers",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Methods",
                          "key": "Access-Control-Allow-Methods",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Origin",
                          "key": "Access-Control-Allow-Origin",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Connection",
                          "key": "Connection",
                          "value": "keep-alive",
                          "description": ""
                        },
                        {
                          "name": "Content-Encoding",
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "description": ""
                        },
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json",
                          "description": ""
                        },
                        {
                          "name": "Date",
                          "key": "Date",
                          "value": "Thu, 31 Mar 2016 11:12:16 GMT",
                          "description": ""
                        },
                        {
                          "name": "Server",
                          "key": "Server",
                          "value": "nginx/1.6.2",
                          "description": ""
                        },
                        {
                          "name": "Server-Authorization",
                          "key": "Server-Authorization",
                          "value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\"",
                          "description": ""
                        },
                        {
                          "name": "Vary",
                          "key": "Vary",
                          "value": "Accept-Encoding",
                          "description": ""
                        },
                        {
                          "name": "X-Powered-By",
                          "key": "X-Powered-By",
                          "value": "Sails <sailsjs.org>",
                          "description": ""
                        },
                        {
                          "name": "transfer-encoding",
                          "key": "transfer-encoding",
                          "value": "chunked",
                          "description": ""
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": ".getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": ".getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6",
                          "key": "postman.sid"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": true,
                          "httpOnly": true,
                          "domain": "echo.getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": true,
                          "value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4",
                          "key": "sails.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}"
                    }
                  ]
                },
                {
                  "name": "OAuth1.0 (verify signature)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response body has json saying passed 'status'\", function () {",
                          "    pm.response.to.have.jsonBody('status', 'pass');",
                          "});"
                        ],
                        "id": "2e2d70e6-43ee-42b2-8c09-f9181e6b56b7"
                      }
                    }
                  ],
                  "id": "d2edc1a3-a9ac-4996-82a2-f83beee0c3f0",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth1",
                      "oauth1": {
                        "consumerKey": "RKCGzna7bv9YD57c",
                        "consumerSecret": "D+EdQ-gs$-%@2Nu7",
                        "token": "",
                        "tokenSecret": "",
                        "signatureMethod": "HMAC-SHA1",
                        "timestamp": "",
                        "nonce": "",
                        "version": "",
                        "realm": "",
                        "addParamsToHeader": true,
                        "addEmptyParamsToSign": false
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "url": "https://postman-echo.com/oauth1",
                    "description": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes."
                  },
                  "response": [
                    {
                      "id": "104e27db-a891-4d8d-9260-5bdf5b88a3b2",
                      "name": "200",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Authorization",
                            "name": "Authorization",
                            "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121261\",oauth_nonce=\"ki0RQW\",oauth_version=\"1.0\",oauth_signature=\"s0rK92Myxx7ceUBVzlMaxiiXU00%3D\""
                          }
                        ],
                        "url": "https://echo.getpostman.com/oauth1"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "javascript",
                      "header": [
                        {
                          "name": "Access-Control-Allow-Credentials",
                          "key": "Access-Control-Allow-Credentials",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Headers",
                          "key": "Access-Control-Allow-Headers",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Methods",
                          "key": "Access-Control-Allow-Methods",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Origin",
                          "key": "Access-Control-Allow-Origin",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Expose-Headers",
                          "key": "Access-Control-Expose-Headers",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Connection",
                          "key": "Connection",
                          "value": "keep-alive",
                          "description": ""
                        },
                        {
                          "name": "Content-Encoding",
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "description": ""
                        },
                        {
                          "name": "Content-Length",
                          "key": "Content-Length",
                          "value": "95",
                          "description": ""
                        },
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json; charset=utf-8",
                          "description": ""
                        },
                        {
                          "name": "Date",
                          "key": "Date",
                          "value": "Thu, 25 Aug 2016 10:34:23 GMT",
                          "description": ""
                        },
                        {
                          "name": "ETag",
                          "key": "ETag",
                          "value": "W/\"4e-Cq3UhvpVSyl6R6204lPVIA\"",
                          "description": ""
                        },
                        {
                          "name": "Server",
                          "key": "Server",
                          "value": "nginx/1.8.1",
                          "description": ""
                        },
                        {
                          "name": "Vary",
                          "key": "Vary",
                          "value": "Accept-Encoding",
                          "description": ""
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\"status\":\"pass\",\"message\":\"OAuth-1.0a signature verification was successful\"}"
                    },
                    {
                      "id": "70deb7d7-8f28-4a84-849b-6e674851b616",
                      "name": "401",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Authorization",
                            "type": "text",
                            "name": "Authorization",
                            "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c_wrong\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121295\",oauth_nonce=\"8LTsU2\",oauth_version=\"1.0\",oauth_signature=\"tSUexpY%2B7EhSY7cFXiFN5EMx2zw%3D\""
                          }
                        ],
                        "url": "https://echo.getpostman.com/oauth1"
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "javascript",
                      "header": [
                        {
                          "name": "Access-Control-Allow-Credentials",
                          "key": "Access-Control-Allow-Credentials",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Headers",
                          "key": "Access-Control-Allow-Headers",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Methods",
                          "key": "Access-Control-Allow-Methods",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Origin",
                          "key": "Access-Control-Allow-Origin",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Expose-Headers",
                          "key": "Access-Control-Expose-Headers",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Connection",
                          "key": "Connection",
                          "value": "keep-alive",
                          "description": ""
                        },
                        {
                          "name": "Content-Length",
                          "key": "Content-Length",
                          "value": "536",
                          "description": ""
                        },
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json; charset=utf-8",
                          "description": ""
                        },
                        {
                          "name": "Date",
                          "key": "Date",
                          "value": "Thu, 25 Aug 2016 10:34:55 GMT",
                          "description": ""
                        },
                        {
                          "name": "ETag",
                          "key": "ETag",
                          "value": "W/\"218-SGnurnTsu5qV5cCYWxsJlg\"",
                          "description": ""
                        },
                        {
                          "name": "Server",
                          "key": "Server",
                          "value": "nginx/1.8.1",
                          "description": ""
                        },
                        {
                          "name": "Vary",
                          "key": "Vary",
                          "value": "Accept-Encoding",
                          "description": ""
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\"status\":\"fail\",\"message\":\"HMAC-SHA1 verification failed\",\"base_uri\":\"https://echo.getpostman.com/oauth1\",\"normalized_param_string\":\"oauth_consumer_key=RKCGzna7bv9YD57c_wrong&oauth_nonce=8LTsU2&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1472121295&oauth_version=1.0\",\"base_string\":\"GET&https%3A%2F%2Fecho.getpostman.com%2Foauth1&oauth_consumer_key%3DRKCGzna7bv9YD57c_wrong%26oauth_nonce%3D8LTsU2%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1472121295%26oauth_version%3D1.0\",\"signing_key\":\"D%2BEdQ-gs%24-%25%402Nu7&\"}"
                    }
                  ]
                }
              ],
              "id": "2cf1905f-4e5c-476c-a2d7-6c0ad8f62385"
            },
            {
              "name": "Cookie Manipulation",
              "item": [
                {
                  "name": "Set Cookies",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('response should be 200 or 302', function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
                          "});",
                          "",
                          "pm.test('the \"foo1\" cookie has correct value', function () {",
                          "    pm.expect(pm.cookies.toObject()).to.have.property('foo1', 'bar1');",
                          "});",
                          "",
                          "pm.test('the \"foo2\" cookie has correct value', function () {",
                          "    pm.expect(pm.cookies.toObject()).to.have.property('foo2', 'bar2');",
                          "});",
                          "",
                          "// response code could be either a 200 or a redirection based on the settings of ",
                          "// the http client. hence we need to handle both cases",
                          "pm.test('response body should be valid', function () {",
                          "    if (pm.response.code === 200) {",
                          "        pm.response.to.have.jsonBody('cookies.foo1', 'bar1')",
                          "            .and.have.jsonBody('cookies.foo2', 'bar2');",
                          "    }",
                          "    else {",
                          "        pm.response.to.have.body('Found. Redirecting to /cookies');",
                          "    }",
                          "});"
                        ],
                        "id": "dab825c4-1305-4033-b440-e0d96efe961f"
                      }
                    }
                  ],
                  "id": "daaa7d49-fffa-48ff-a433-d24602e7907b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://postman-echo.com/cookies/set?foo1=bar1&foo2=bar2",
                      "protocol": "https",
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "path": [
                        "cookies",
                        "set"
                      ],
                      "query": [
                        {
                          "key": "foo1",
                          "value": "bar1"
                        },
                        {
                          "key": "foo2",
                          "value": "bar2"
                        }
                      ]
                    },
                    "description": "The cookie setter endpoint accepts a list of cookies and their values as part of URL parameters of a `GET` request. These cookies are saved and can be subsequently retrieved or deleted. The response of this request returns a JSON with all cookies listed.\n\nTo set your own set of cookies, simply replace the URL parameters \"foo1=bar1&foo2=bar2\" with your own set of key-value pairs."
                  },
                  "response": [
                    {
                      "id": "8ceed56b-e14a-408b-9a43-4ee154e9a387",
                      "name": "Cookies",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": ""
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "javascript",
                      "header": [
                        {
                          "name": "Access-Control-Allow-Credentials",
                          "key": "Access-Control-Allow-Credentials",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Headers",
                          "key": "Access-Control-Allow-Headers",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Methods",
                          "key": "Access-Control-Allow-Methods",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Origin",
                          "key": "Access-Control-Allow-Origin",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Connection",
                          "key": "Connection",
                          "value": "keep-alive",
                          "description": ""
                        },
                        {
                          "name": "Content-Encoding",
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "description": ""
                        },
                        {
                          "name": "Content-Length",
                          "key": "Content-Length",
                          "value": "51",
                          "description": ""
                        },
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json; charset=utf-8",
                          "description": ""
                        },
                        {
                          "name": "Date",
                          "key": "Date",
                          "value": "Thu, 29 Oct 2015 06:15:28 GMT",
                          "description": ""
                        },
                        {
                          "name": "Server",
                          "key": "Server",
                          "value": "nginx/1.6.2",
                          "description": ""
                        },
                        {
                          "name": "Vary",
                          "key": "Vary",
                          "value": "Accept-Encoding",
                          "description": ""
                        },
                        {
                          "name": "X-Powered-By",
                          "key": "X-Powered-By",
                          "value": "Sails <sailsjs.org>",
                          "description": ""
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\"cookies\":{\"foo1\":\"bar\",\"foo2\":\"bar\"}}"
                    }
                  ]
                },
                {
                  "name": "Get Cookies",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('the \"foo1\" cookie has correct value', function () {",
                          "    pm.expect(pm.cookies.toObject()).to.have.property('foo1', 'bar1');",
                          "});",
                          "",
                          "pm.test('the \"foo2\" cookie has correct value', function () {",
                          "    pm.expect(pm.cookies.toObject()).to.have.property('foo2', 'bar2');",
                          "});",
                          "",
                          "pm.test('response body should be valid', function () {",
                          "    pm.response.to.have.jsonBody('cookies.foo1', 'bar1');",
                          "    pm.response.to.have.jsonBody('cookies.foo2', 'bar2');",
                          "});"
                        ],
                        "id": "7ef6eba8-3ec2-495b-bdad-c7450f2f092a"
                      }
                    }
                  ],
                  "id": "a305b826-54af-4b44-9f2d-914491566789",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://postman-echo.com/cookies",
                    "description": "Use this endpoint to get a list of all cookies that are stored with respect to this domain. Whatever key-value pairs that has been previously set by calling the \"Set Cookies\" endpoint, will be returned as response JSON."
                  },
                  "response": [
                    {
                      "id": "b4bddfe4-7abd-40ed-957a-fb610937cc68",
                      "name": "Cookies",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": ""
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "javascript",
                      "header": [
                        {
                          "name": "Access-Control-Allow-Credentials",
                          "key": "Access-Control-Allow-Credentials",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Headers",
                          "key": "Access-Control-Allow-Headers",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Methods",
                          "key": "Access-Control-Allow-Methods",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Origin",
                          "key": "Access-Control-Allow-Origin",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Connection",
                          "key": "Connection",
                          "value": "keep-alive",
                          "description": ""
                        },
                        {
                          "name": "Content-Encoding",
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "description": ""
                        },
                        {
                          "name": "Content-Length",
                          "key": "Content-Length",
                          "value": "46",
                          "description": ""
                        },
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json; charset=utf-8",
                          "description": ""
                        },
                        {
                          "name": "Date",
                          "key": "Date",
                          "value": "Thu, 29 Oct 2015 06:16:29 GMT",
                          "description": ""
                        },
                        {
                          "name": "Server",
                          "key": "Server",
                          "value": "nginx/1.6.2",
                          "description": ""
                        },
                        {
                          "name": "Vary",
                          "key": "Vary",
                          "value": "Accept-Encoding",
                          "description": ""
                        },
                        {
                          "name": "X-Powered-By",
                          "key": "X-Powered-By",
                          "value": "Sails <sailsjs.org>",
                          "description": ""
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\"cookies\":{\"foo2\":\"bar\"}}"
                    }
                  ]
                },
                {
                  "name": "Delete Cookies",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test('response should be 200 or 302', function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
                          "});",
                          "",
                          "pm.test('the \"foo1\" cookie should not be present', function () {",
                          "    pm.expect(pm.cookies.toObject()).to.not.have.property('foo1');",
                          "});",
                          "",
                          "pm.test('the \"foo2\" cookie should not be present', function () {",
                          "    pm.expect(pm.cookies.toObject()).to.not.have.property('foo2');",
                          "});",
                          "",
                          "// response code could be either a 200 or a redirection based on the settings of ",
                          "// the http client. hence we need to handle both cases",
                          "pm.test('response body should be valid', function () {",
                          "    if (pm.response.code === 200) {",
                          "        pm.response.to.not.have.jsonBody('cookies.foo1');",
                          "        pm.response.to.not.have.jsonBody('cookies.foo2');",
                          "    }",
                          "    else {",
                          "        pm.response.to.have.body('Found. Redirecting to /cookies');",
                          "    }",
                          "});"
                        ],
                        "id": "785f5035-ae5e-4f4b-b9b0-aef33461a11c"
                      }
                    }
                  ],
                  "id": "3818c8a1-b8f4-4735-a767-022e60aa4f0a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://postman-echo.com/cookies/delete?foo1&foo2",
                      "protocol": "https",
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "path": [
                        "cookies",
                        "delete"
                      ],
                      "query": [
                        {
                          "key": "foo1",
                          "value": ""
                        },
                        {
                          "key": "foo2",
                          "value": ""
                        }
                      ]
                    },
                    "description": "One or more cookies that has been set for this domain can be deleted by providing the cookie names as part of the URL parameter. The response of this request is a JSON containing the list of currently set cookies."
                  },
                  "response": [
                    {
                      "id": "cf56633b-c93a-4750-b765-8155fd3e011e",
                      "name": "Cookies Response",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": ""
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "javascript",
                      "header": [
                        {
                          "name": "Access-Control-Allow-Credentials",
                          "key": "Access-Control-Allow-Credentials",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Headers",
                          "key": "Access-Control-Allow-Headers",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Methods",
                          "key": "Access-Control-Allow-Methods",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Origin",
                          "key": "Access-Control-Allow-Origin",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Connection",
                          "key": "Connection",
                          "value": "keep-alive",
                          "description": ""
                        },
                        {
                          "name": "Content-Encoding",
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "description": ""
                        },
                        {
                          "name": "Content-Length",
                          "key": "Content-Length",
                          "value": "46",
                          "description": ""
                        },
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json; charset=utf-8",
                          "description": ""
                        },
                        {
                          "name": "Date",
                          "key": "Date",
                          "value": "Thu, 29 Oct 2015 06:16:00 GMT",
                          "description": ""
                        },
                        {
                          "name": "Server",
                          "key": "Server",
                          "value": "nginx/1.6.2",
                          "description": ""
                        },
                        {
                          "name": "Vary",
                          "key": "Vary",
                          "value": "Accept-Encoding",
                          "description": ""
                        },
                        {
                          "name": "X-Powered-By",
                          "key": "X-Powered-By",
                          "value": "Sails <sailsjs.org>",
                          "description": ""
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\"cookies\":{\"foo2\":\"bar\"}}"
                    }
                  ]
                }
              ],
              "id": "27c0d344-c15c-4f17-a7bc-e8c529b060ab",
              "description": "The cookie related endpoints allow one to get, set and delete simple cookies.\n\nCookies are small snippets of information that is stored in the browser and sent back to the server with every subsequent requests in order to store useful information between requests.\nIf you want to know more about cookies, read the [HTTP Cookie](https://en.wikipedia.org/wiki/HTTP_cookie) article on wikipedia."
            },
            {
              "name": "Utilities",
              "item": [
                {
                  "name": "Response Status Code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response has valid json body\", function () {",
                          "    pm.response.to.have.jsonBody('status');",
                          "});",
                          "",
                          "// additional sanity tests",
                          "pm.test(\"status in response body must match the one in request\", function () {",
                          "    pm.response.to.have.jsonBody('status', Number(_.get(pm.request, 'url.path[1]')));",
                          "});"
                        ],
                        "id": "d1465dbb-3d9f-4636-9c4f-436936fa6d4f"
                      }
                    }
                  ],
                  "id": "ebac0c6d-7ef5-4080-92e3-adb034ea70ae",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://postman-echo.com/status/200",
                    "description": "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`."
                  },
                  "response": [
                    {
                      "id": "ff1ec7da-9c46-43a0-9a8c-9367b094ce89",
                      "name": "200",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://echo.getpostman.com/status/200"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "javascript",
                      "header": [
                        {
                          "name": "Access-Control-Allow-Credentials",
                          "key": "Access-Control-Allow-Credentials",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Headers",
                          "key": "Access-Control-Allow-Headers",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Methods",
                          "key": "Access-Control-Allow-Methods",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Access-Control-Allow-Origin",
                          "key": "Access-Control-Allow-Origin",
                          "value": "",
                          "description": ""
                        },
                        {
                          "name": "Connection",
                          "key": "Connection",
                          "value": "keep-alive",
                          "description": ""
                        },
                        {
                          "name": "Content-Length",
                          "key": "Content-Length",
                          "value": "14",
                          "description": ""
                        },
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json; charset=utf-8",
                          "description": ""
                        },
                        {
                          "name": "Date",
                          "key": "Date",
                          "value": "Thu, 31 Mar 2016 11:58:47 GMT",
                          "description": ""
                        },
                        {
                          "name": "ETag",
                          "key": "ETag",
                          "value": "W/\"e-1056260003\"",
                          "description": ""
                        },
                        {
                          "name": "Server",
                          "key": "Server",
                          "value": "nginx/1.6.2",
                          "description": ""
                        },
                        {
                          "name": "Vary",
                          "key": "Vary",
                          "value": "Accept-Encoding",
                          "description": ""
                        },
                        {
                          "name": "X-Powered-By",
                          "key": "X-Powered-By",
                          "value": "Sails <sailsjs.org>",
                          "description": ""
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": ".getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "yes",
                          "key": "getpostmanlogin"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": ".getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "df0c0256028d7ec4d641f766104a9571a8e249685bbc667d7cee030bbf44d3209495c70c03248e31e678a93812591d5e12187a8e99bf6bc5e80c40903f6ff6226938f24e413c0ffa613a7372064ec44a8594e8d3ede6945e34394f369573feeebc4a73a3e24b8c9ac18a53704addb5fd3f71f1ede488ff551feb059e9c1fb208164814e45e0312c4df8ea6e83c26702f42ae634c6afbe82d57c857bbf5598b5527961c1c28688dc2580070a4389f0cf4ec0a179b5b9c11b2ecbaa5460d374065bf5c7a3add9505df0fa89acb9f227f05ed2d4c6b58c39d6d728bd49f6f323ae67d4a75882aa7682f5d6fc5b981ba411d94aa93970bfaefa1953a73e440d50d012b5f288975c888e2345ee7777e746fb5aed3a7b2dbc087c6456621aa78c24a3c17c5f96cf59844933249a352f631e2008cffac6faf06d0e253dcc01cf0067bf56c1fbc5ed61fec1861b60c5accf35ffc2e56154a113004fa1db9d7171c3af8fc063918554092f5",
                          "key": "postman.sid"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": false,
                          "httpOnly": false,
                          "domain": ".echo.getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": false,
                          "value": "GA1.3.1703443399.1459422978",
                          "key": "_ga"
                        },
                        {
                          "expires": "Invalid Date",
                          "hostOnly": true,
                          "httpOnly": true,
                          "domain": "echo.getpostman.com",
                          "path": "/",
                          "secure": false,
                          "session": true,
                          "value": "s%3AvuHU0EKeDbyNjVrEc7U30dMPzVu8CRaD.GOV1H9olcVzXqrwqP%2BC%2B6MVj2UczXivcN00jgPoDYfs",
                          "key": "sails.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"status\":200}"
                    }
                  ]
                },
                {
                  "name": "Streamed Response",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response has chunked transfer encoding header\", function () {",
                          "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                          "});"
                        ],
                        "id": "f66c6e95-81ef-4d05-a445-bce08e9159cc"
                      }
                    }
                  ],
                  "id": "9d951478-6473-4204-a44f-8482dd7c1949",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://postman-echo.com/stream/5",
                    "description": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data."
                  },
                  "response": []
                },
                {
                  "name": "Delay Response",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "997b65b9-28ab-43fa-a9d1-aca912318703",
                        "exec": [
                          "var _ = require('lodash');",
                          "",
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response has valid json body\", function () {",
                          "    pm.response.to.have.jsonBody('delay');",
                          "});",
                          "",
                          "// additional sanity tests",
                          "pm.test(\"request must have a valid delay\", function () {",
                          "    pm.expect(Number(_.get(pm.request, 'url.path[1]'))).to.be.above(0).and.below(10);",
                          "});",
                          "pm.test(\"response should take more time than the delay specified\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.above(Number(_.get(pm.request, 'url.path[1]')));",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "92e958d3-cddd-4860-9b80-e6098b23d6c5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://postman-echo.com/delay/5",
                    "description": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server."
                  },
                  "response": [
                    {
                      "id": "800e3369-b4e6-44f4-8ebf-2297b09f435d",
                      "name": "success-response",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://echo.getpostman.com/delay/3"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "",
                          "name": "Access-Control-Allow-Credentials",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Allow-Headers",
                          "value": "",
                          "name": "Access-Control-Allow-Headers",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Allow-Methods",
                          "value": "",
                          "name": "Access-Control-Allow-Methods",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Allow-Origin",
                          "value": "",
                          "name": "Access-Control-Allow-Origin",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Expose-Headers",
                          "value": "",
                          "name": "Access-Control-Expose-Headers",
                          "description": ""
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive",
                          "name": "Connection",
                          "description": ""
                        },
                        {
                          "key": "Content-Length",
                          "value": "13",
                          "name": "Content-Length",
                          "description": ""
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json; charset=utf-8",
                          "name": "Content-Type",
                          "description": ""
                        },
                        {
                          "key": "Date",
                          "value": "Mon, 02 Jan 2017 09:19:03 GMT",
                          "name": "Date",
                          "description": ""
                        },
                        {
                          "key": "ETag",
                          "value": "W/\"d-t/L/D5c0SDl+MoXtKdSVOg\"",
                          "name": "ETag",
                          "description": ""
                        },
                        {
                          "key": "Server",
                          "value": "nginx/1.10.1",
                          "name": "Server",
                          "description": ""
                        },
                        {
                          "key": "Vary",
                          "value": "Accept-Encoding",
                          "name": "Vary",
                          "description": ""
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "httpOnly": true,
                          "domain": "echo.getpostman.com",
                          "path": "/",
                          "secure": false,
                          "value": "s%3AYjUiFBtGiJVL2a-qzZQZ1DFlAMhgXN9O.WaAjRUV0OteZxwmhbNibuB7VKse068JJIh6PwLQUKmQ",
                          "key": "sails.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"delay\":\"3\"}"
                    }
                  ]
                },
                {
                  "name": "Get UTF8 Encoded Response",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response has charset in content-type header\", function () {",
                          "    pm.response.to.have.header('content-type', 'text/html; charset=utf-8');",
                          "});",
                          "",
                          "pm.test(\"response has chunked transfer encoding header\", function () {",
                          "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                          "});"
                        ],
                        "id": "3c56e0cb-189e-4c2b-a4eb-d38a0595f576"
                      }
                    }
                  ],
                  "id": "828774be-70b7-4c9a-8b8a-f33d3721ebb0",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://postman-echo.com/encoding/utf8",
                    "description": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses."
                  },
                  "response": []
                },
                {
                  "name": "GZip Compressed Response",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response has valid json body\", function () {",
                          "    pm.response.to.have.jsonBody('gzipped', true);",
                          "});",
                          "",
                          "pm.test('response headers should indicate valid content encoding', function  () {",
                          "    pm.response.to.have.header('content-encoding', 'gzip')",
                          "        .and.have.header('content-type', 'application/json');",
                          "});",
                          "",
                          "pm.test('requesting http client should accept compressed response', function () {",
                          "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                          "        .and.to.match(/.*gzip.*/);",
                          "});"
                        ],
                        "id": "dbdfc638-d56b-49f5-af95-8ee12ac399b6"
                      }
                    }
                  ],
                  "id": "cd16f6f2-70cd-4a45-9648-ce4cfdc86325",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://postman-echo.com/gzip",
                    "description": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article."
                  },
                  "response": []
                },
                {
                  "name": "Deflate Compressed Response",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response has valid json body\", function () {",
                          "    pm.response.to.have.jsonBody('deflated', true);",
                          "});",
                          "",
                          "pm.test('response headers should indicate valid content encoding', function  () {",
                          "    pm.response.to.have.header('content-encoding', 'deflate')",
                          "        .and.have.header('content-type', 'application/json');",
                          "});",
                          "",
                          "pm.test('requesting http client should accept compressed response', function () {",
                          "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                          "        .and.to.match(/.*deflate.*/);",
                          "});"
                        ],
                        "id": "a98dd93b-bb87-49d6-b720-9a819ced13ba"
                      }
                    }
                  ],
                  "id": "5309ec75-7dd7-4bba-a0a8-ae2abe4a8a17",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://postman-echo.com/deflate",
                    "description": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article."
                  },
                  "response": []
                },
                {
                  "name": "IP address in JSON format",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response has valid json body\", function () {",
                          "    pm.response.to.have.jsonBody('ip');",
                          "});",
                          "",
                          "pm.test(\"response must return a valid ip address\", function () {",
                          "    pm.expect(pm.response.json().ip).to",
                          "        // a really gnarly regular expression to ensure that ip address is in correct format",
                          "        .match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);",
                          "});"
                        ],
                        "id": "7d365bb2-ed70-445a-8fcf-e237208f3635"
                      }
                    }
                  ],
                  "id": "08940b3e-8638-4790-aafc-432df941f75a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://postman-echo.com/ip",
                    "description": "A simple `GET` request to return the IP address of the source request in the following `JSON` format:\n\n```json\n{\n  ip: \"request-ip-address\"\n}\n```"
                  },
                  "response": []
                }
              ],
              "id": "7d7e3563-c0b9-46b9-a328-4d95b2482250"
            },
            {
              "name": "Utilities / Date and Time",
              "item": [
                {
                  "name": "Current UTC time",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response time matches server response 'date' header\", function () {",
                          "    pm.expect(pm.response.text()).to.eql(pm.response.headers.get('date'))",
                          "});"
                        ],
                        "id": "6d47872d-2d41-4ba9-9728-ca1ec5ded5b4"
                      }
                    }
                  ],
                  "id": "5e1ed3b0-06a3-4e33-95ac-1fe8a0a64ee2",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://postman-echo.com/time/now",
                    "description": "A simple `GET` request to `/time/now` to return the current timestamp as a UTC string.\n\n```\nFri, 04 Nov 2016 09:00:46 GMT\n```"
                  },
                  "response": [
                    {
                      "id": "5c8a006f-9e6c-4ccc-83d9-cdc9806c18b0",
                      "name": "time as text",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "https://postman-echo.com/time/now"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "html",
                      "header": [
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "",
                          "name": "Access-Control-Allow-Credentials",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Allow-Headers",
                          "value": "",
                          "name": "Access-Control-Allow-Headers",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Allow-Methods",
                          "value": "",
                          "name": "Access-Control-Allow-Methods",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Allow-Origin",
                          "value": "",
                          "name": "Access-Control-Allow-Origin",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Expose-Headers",
                          "value": "",
                          "name": "Access-Control-Expose-Headers",
                          "description": ""
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive",
                          "name": "Connection",
                          "description": ""
                        },
                        {
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "name": "Content-Encoding",
                          "description": ""
                        },
                        {
                          "key": "Content-Length",
                          "value": "49",
                          "name": "Content-Length",
                          "description": ""
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/html; charset=utf-8",
                          "name": "Content-Type",
                          "description": ""
                        },
                        {
                          "key": "Date",
                          "value": "Wed, 11 Jan 2017 10:27:12 GMT",
                          "name": "Date",
                          "description": ""
                        },
                        {
                          "key": "ETag",
                          "value": "W/\"1d-2jJhkzratfVX9VZ0+raHbw\"",
                          "name": "ETag",
                          "description": ""
                        },
                        {
                          "key": "Server",
                          "value": "nginx/1.10.1",
                          "name": "Server",
                          "description": ""
                        },
                        {
                          "key": "Vary",
                          "value": "Accept-Encoding",
                          "name": "Vary",
                          "description": ""
                        },
                        {
                          "key": "set-cookie",
                          "value": "sails.sid=s%3A2lT3TO7qS1tadeSAp4axl-NcXG9CV6Rf.HGqLY%2FlKEKY4fgCLePaAZs3tCHp%2Bglf7ZOJYlonGeig; Path=/; HttpOnly",
                          "name": "set-cookie",
                          "description": ""
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "httpOnly": true,
                          "domain": "postman-echo.com",
                          "path": "/",
                          "secure": false,
                          "value": "s%3A2lT3TO7qS1tadeSAp4axl-NcXG9CV6Rf.HGqLY%2FlKEKY4fgCLePaAZs3tCHp%2Bglf7ZOJYlonGeig",
                          "key": "sails.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "Wed, 11 Jan 2017 10:27:12 GMT"
                    }
                  ]
                },
                {
                  "name": "Timestamp validity",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json should say whether request query time is valid\", function () {",
                          "    pm.response.to.have.jsonBody('valid', true);",
                          "});"
                        ],
                        "id": "657e8554-36f3-46ed-9d5e-2e4d8697f3c1"
                      }
                    }
                  ],
                  "id": "4be1cb2b-8085-42ee-8492-ad3cc62be77d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://postman-echo.com/time/valid?timestamp=2016-10-10",
                      "protocol": "https",
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "path": [
                        "time",
                        "valid"
                      ],
                      "query": [
                        {
                          "key": "timestamp",
                          "value": "2016-10-10"
                        }
                      ]
                    },
                    "description": "A simple `GET` request to `/time/valid` to determine the validity of the timestamp, (current by default).\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a valid key to indicate the result. The response code is `200`.\n\n```\n{\n  valid: true/false\n}\n```"
                  },
                  "response": [
                    {
                      "id": "187e5ad6-3b73-4cf0-a5b4-acabce05920c",
                      "name": "Valid Timestamp",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://postman-echo.com/time/valid?timestamp=2016-10-10",
                          "protocol": "https",
                          "host": [
                            "postman-echo",
                            "com"
                          ],
                          "path": [
                            "time",
                            "valid"
                          ],
                          "query": [
                            {
                              "key": "timestamp",
                              "value": "2016-10-10"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "",
                          "name": "Access-Control-Allow-Credentials",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Allow-Headers",
                          "value": "",
                          "name": "Access-Control-Allow-Headers",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Allow-Methods",
                          "value": "",
                          "name": "Access-Control-Allow-Methods",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Allow-Origin",
                          "value": "",
                          "name": "Access-Control-Allow-Origin",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Expose-Headers",
                          "value": "",
                          "name": "Access-Control-Expose-Headers",
                          "description": ""
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive",
                          "name": "Connection",
                          "description": ""
                        },
                        {
                          "key": "Content-Length",
                          "value": "14",
                          "name": "Content-Length",
                          "description": ""
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json; charset=utf-8",
                          "name": "Content-Type",
                          "description": ""
                        },
                        {
                          "key": "Date",
                          "value": "Wed, 11 Jan 2017 10:27:33 GMT",
                          "name": "Date",
                          "description": ""
                        },
                        {
                          "key": "ETag",
                          "value": "W/\"e-OYN7L87J1Ba9oy5mJE2kcA\"",
                          "name": "ETag",
                          "description": ""
                        },
                        {
                          "key": "Server",
                          "value": "nginx/1.10.1",
                          "name": "Server",
                          "description": ""
                        },
                        {
                          "key": "Vary",
                          "value": "Accept-Encoding",
                          "name": "Vary",
                          "description": ""
                        },
                        {
                          "key": "set-cookie",
                          "value": "sails.sid=s%3AdDGZPe1CZw4mAxGVCHr6RfCADCAwquXa.F5MEm5LJad30JHrSwGGoyWLn2OAAGdvUM7kDtzNfdFI; Path=/; HttpOnly",
                          "name": "set-cookie",
                          "description": ""
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "httpOnly": true,
                          "domain": "postman-echo.com",
                          "path": "/",
                          "secure": false,
                          "value": "s%3AdDGZPe1CZw4mAxGVCHr6RfCADCAwquXa.F5MEm5LJad30JHrSwGGoyWLn2OAAGdvUM7kDtzNfdFI",
                          "key": "sails.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"valid\":true}"
                    },
                    {
                      "id": "e7253270-ce9e-463f-a29b-0ba7047850c6",
                      "name": "Invalid Timestamp",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "https://postman-echo.com/time/valid?timestamp=2016-10-10",
                          "protocol": "https",
                          "host": [
                            "postman-echo",
                            "com"
                          ],
                          "path": [
                            "time",
                            "valid"
                          ],
                          "query": [
                            {
                              "key": "timestamp",
                              "value": "2016-10-10"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "",
                          "name": "Access-Control-Allow-Credentials",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Allow-Headers",
                          "value": "",
                          "name": "Access-Control-Allow-Headers",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Allow-Methods",
                          "value": "",
                          "name": "Access-Control-Allow-Methods",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Allow-Origin",
                          "value": "",
                          "name": "Access-Control-Allow-Origin",
                          "description": ""
                        },
                        {
                          "key": "Access-Control-Expose-Headers",
                          "value": "",
                          "name": "Access-Control-Expose-Headers",
                          "description": ""
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive",
                          "name": "Connection",
                          "description": ""
                        },
                        {
                          "key": "Content-Length",
                          "value": "15",
                          "name": "Content-Length",
                          "description": ""
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json; charset=utf-8",
                          "name": "Content-Type",
                          "description": ""
                        },
                        {
                          "key": "Date",
                          "value": "Wed, 11 Jan 2017 10:27:53 GMT",
                          "name": "Date",
                          "description": ""
                        },
                        {
                          "key": "ETag",
                          "value": "W/\"f-/i9mO/upK91ZtL0BkKFGtw\"",
                          "name": "ETag",
                          "description": ""
                        },
                        {
                          "key": "Server",
                          "value": "nginx/1.10.1",
                          "name": "Server",
                          "description": ""
                        },
                        {
                          "key": "Vary",
                          "value": "Accept-Encoding",
                          "name": "Vary",
                          "description": ""
                        },
                        {
                          "key": "set-cookie",
                          "value": "sails.sid=s%3ATNJaNxi2QCv4RPBb64sIZxQGN1h6IP3g.9sQVAijlsLsh0r7LgffxXa9k2we6UumPEVv%2Bsk4woLI; Path=/; HttpOnly",
                          "name": "set-cookie",
                          "description": ""
                        }
                      ],
                      "cookie": [
                        {
                          "expires": "Invalid Date",
                          "httpOnly": true,
                          "domain": "postman-echo.com",
                          "path": "/",
                          "secure": false,
                          "value": "s%3ATNJaNxi2QCv4RPBb64sIZxQGN1h6IP3g.9sQVAijlsLsh0r7LgffxXa9k2we6UumPEVv%2Bsk4woLI",
                          "key": "sails.sid"
                        }
                      ],
                      "responseTime": null,
                      "body": "{\"valid\":false}"
                    }
                  ]
                },
                {
                  "name": "Format timestamp",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json should say whether request query time is valid\", function () {",
                          "    pm.response.to.have.jsonBody('format', '20');",
                          "});"
                        ],
                        "id": "6c5b240b-425e-484a-8947-d99151f3f3fe"
                      }
                    }
                  ],
                  "id": "e264ac4d-ac8a-435b-b77a-e19f8a75797a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://postman-echo.com/time/format?timestamp=2016-10-10&format=mm",
                      "protocol": "https",
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "path": [
                        "time",
                        "format"
                      ],
                      "query": [
                        {
                          "key": "timestamp",
                          "value": "2016-10-10"
                        },
                        {
                          "key": "format",
                          "value": "mm"
                        }
                      ]
                    },
                    "description": "A simple `GET` request to `/time/format` to convert the timestamp to any desired valid format.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `format` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  format: \"formatted-timestamp\"\n}\n```"
                  },
                  "response": []
                },
                {
                  "name": "Extract timestamp unit",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json should say whether request query unit is valid\", function () {",
                          "    pm.response.to.have.jsonBody('unit', 1);",
                          "});"
                        ],
                        "id": "b89e739f-9475-4513-8fe4-e7966097011b"
                      }
                    }
                  ],
                  "id": "baf6279c-9020-48ce-99f8-da3afdd316c3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://postman-echo.com/time/unit?timestamp=2016-10-10&unit=day",
                      "protocol": "https",
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "path": [
                        "time",
                        "unit"
                      ],
                      "query": [
                        {
                          "key": "timestamp",
                          "value": "2016-10-10"
                        },
                        {
                          "key": "unit",
                          "value": "day"
                        }
                      ]
                    },
                    "description": "A simple `GET` request to `/time/unit` to extract the specified timestamp unit (as provided in the `unit` query parameter). The default unit returned is the `year`.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `unit` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  unit: \"extracted-timestamp-unit\"\n}\n```"
                  },
                  "response": []
                },
                {
                  "name": "Time addition",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json should return the added years\", function () {",
                          "    pm.response.to.have.jsonBody('sum', 'Sat Oct 10 2116 00:00:00 GMT+0000');",
                          "});"
                        ],
                        "id": "6e7429ac-17aa-48a9-b0a4-b4bc3c60c8b0"
                      }
                    }
                  ],
                  "id": "67876576-c7a8-4011-92f3-55e592e282f3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://postman-echo.com/time/add?timestamp=2016-10-10&years=100",
                      "protocol": "https",
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "path": [
                        "time",
                        "add"
                      ],
                      "query": [
                        {
                          "key": "timestamp",
                          "value": "2016-10-10"
                        },
                        {
                          "key": "years",
                          "value": "100"
                        }
                      ]
                    },
                    "description": "A simple `GET` request to `/time/add` to add units of time to the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `sum` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  sum: \"sum of (provided / current) and provided timestamps\"\n}\n```"
                  },
                  "response": []
                },
                {
                  "name": "Time subtraction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json should return the subtracted years\", function () {",
                          "    pm.response.to.have.jsonBody('difference', 'Mon Oct 10 1966 00:00:00 GMT+0000');",
                          "});"
                        ],
                        "id": "b886614a-2b16-411b-8265-b4a9be090516"
                      }
                    }
                  ],
                  "id": "5284b5de-66fc-40c6-8fcd-fda98543a1a6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://postman-echo.com/time/subtract?timestamp=2016-10-10&years=50",
                      "protocol": "https",
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "path": [
                        "time",
                        "subtract"
                      ],
                      "query": [
                        {
                          "key": "timestamp",
                          "value": "2016-10-10"
                        },
                        {
                          "key": "years",
                          "value": "50"
                        }
                      ]
                    },
                    "description": "A simple `GET` request to `/time/subtract` to subtract units of time from the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `difference` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  difference: \"difference between (provided / current) and provided timestamps\"\n}\n```"
                  },
                  "response": []
                },
                {
                  "name": "Start of time",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json should return the beginning of month\", function () {",
                          "    pm.response.to.have.jsonBody('start', 'Sat Oct 01 2016 00:00:00 GMT+0000');",
                          "});"
                        ],
                        "id": "6d074e94-be53-4594-a89e-276b916a8876"
                      }
                    }
                  ],
                  "id": "2b3b71f7-213a-44b4-82e6-0d0b6867d501",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://postman-echo.com/time/start?timestamp=2016-10-10&unit=month",
                      "protocol": "https",
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "path": [
                        "time",
                        "start"
                      ],
                      "query": [
                        {
                          "key": "timestamp",
                          "value": "2016-10-10"
                        },
                        {
                          "key": "unit",
                          "value": "month"
                        }
                      ]
                    },
                    "description": "A simple `GET` request to `/time/start` to return a relative timstamp in the past from the specified / current timestamp (as provided in the `unit` query parameter).\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `start` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  start: \"A timestamp from the past, depending on the `unit` specified\"\n}\n```"
                  },
                  "response": []
                },
                {
                  "name": "Object representation",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json should return the date components\", function () {",
                          "    pm.expect(pm.response.json()).to.eql({",
                          "        \"years\": 2016,",
                          "        \"months\": 9,",
                          "        \"date\": 10,",
                          "        ",
                          "        \"hours\": 0,",
                          "        \"minutes\": 0,",
                          "        \"seconds\": 0,",
                          "        \"milliseconds\": 0",
                          "    });",
                          "});"
                        ],
                        "id": "830fedf1-7dce-4367-bacb-75bd383faf00"
                      }
                    }
                  ],
                  "id": "0e878d6c-d2a2-4215-bb41-9dfc762d82dc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://postman-echo.com/time/object?timestamp=2016-10-10",
                      "protocol": "https",
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "path": [
                        "time",
                        "object"
                      ],
                      "query": [
                        {
                          "key": "timestamp",
                          "value": "2016-10-10"
                        }
                      ]
                    },
                    "description": "A simple `GET` request to `/time/object` to return the current / provided timestamp as a JSON object.\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  years: 2016,\n  months: 10,\n  days: 10,\n  hours: 23,\n  minutes: 34,\n  seconds: 20,\n  milliseconds: 980\n}\n```"
                  },
                  "response": []
                },
                {
                  "name": "Before comparisons",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json should say timestamp is before target\", function () {",
                          "    pm.response.to.have.jsonBody('before', true);",
                          "});"
                        ],
                        "id": "f386e92d-9c95-4f6b-bc31-4dd2f06c2bce"
                      }
                    }
                  ],
                  "id": "38af0f31-4feb-4d5e-8300-fbc5fef9d4c4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://postman-echo.com/time/before?timestamp=2016-10-10&target=2017-10-10",
                      "protocol": "https",
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "path": [
                        "time",
                        "before"
                      ],
                      "query": [
                        {
                          "key": "timestamp",
                          "value": "2016-10-10"
                        },
                        {
                          "key": "target",
                          "value": "2017-10-10"
                        }
                      ]
                    },
                    "description": "A simple `GET` request to `/time/before` to check if the provided timestamps is before a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `before` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  before: true/false\n}\n```"
                  },
                  "response": []
                },
                {
                  "name": "After comparisons",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json should say timestamp is not after target\", function () {",
                          "    pm.response.to.have.jsonBody('after', false);",
                          "});"
                        ],
                        "id": "3af4a494-c746-4201-8647-81e7f4489baf"
                      }
                    }
                  ],
                  "id": "a81727e8-6c0a-446a-821b-87c06d42bae1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://postman-echo.com/time/after?timestamp=2016-10-10&target=2017-10-10",
                      "protocol": "https",
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "path": [
                        "time",
                        "after"
                      ],
                      "query": [
                        {
                          "key": "timestamp",
                          "value": "2016-10-10"
                        },
                        {
                          "key": "target",
                          "value": "2017-10-10"
                        }
                      ]
                    },
                    "description": "A simple `GET` request to `/time/after` to check if the provided timestamps is after a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `after` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  after: true/false\n}\n```"
                  },
                  "response": []
                },
                {
                  "name": "Between timestamps",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json should say timestamp is not between start and end\", function () {",
                          "    pm.response.to.have.jsonBody('between', false);",
                          "});"
                        ],
                        "id": "dfc60be6-5dcf-442b-86a0-b955111f5d68"
                      }
                    }
                  ],
                  "id": "d6783574-1dce-4174-b808-47bf5508e464",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://postman-echo.com/time/between?timestamp=2016-10-10&start=2017-10-10&end=2019-10-10",
                      "protocol": "https",
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "path": [
                        "time",
                        "between"
                      ],
                      "query": [
                        {
                          "key": "timestamp",
                          "value": "2016-10-10"
                        },
                        {
                          "key": "start",
                          "value": "2017-10-10"
                        },
                        {
                          "key": "end",
                          "value": "2019-10-10"
                        }
                      ]
                    },
                    "description": "A simple `GET` request to `/time/between` to check if the provided timestamp is between a range specified by the `start` and `end` query parameters. A resolution limit can also be specified by the `unit` query parameter.\n\nFor instance, for a resolution `unit` of `month`,\n`2016-10-05` does lie between `2016-11-02` and `2016-09-01`.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `between` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  between: true/false\n}\n```"
                  },
                  "response": []
                },
                {
                  "name": "Leap year check",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"response is ok\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"response json should say timestamp is within leap year\", function () {",
                          "    pm.response.to.have.jsonBody('leap', true);",
                          "});"
                        ],
                        "id": "5d5943c7-5eb7-43c3-88aa-7cb1387bf16f"
                      }
                    }
                  ],
                  "id": "2d83811f-0682-443e-95f1-2e8d1b9c93dc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "https://postman-echo.com/time/leap?timestamp=2016-10-10",
                      "protocol": "https",
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "path": [
                        "time",
                        "leap"
                      ],
                      "query": [
                        {
                          "key": "timestamp",
                          "value": "2016-10-10"
                        }
                      ]
                    },
                    "description": "A simple `GET` request to `/time/leap` to check if the provided/current timestamp belongs to a leap year.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `leap` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  leap: true/false\n}\n```"
                  },
                  "response": []
                }
              ],
              "id": "e2a64747-ebfc-41fd-8671-a4160a90ddd6",
              "description": "A set of `/time/*` mounted requests to perform date-time manipulations, among other operations.\n"
            },
            {
              "name": "Auth: Digest",
              "item": [
                {
                  "name": "DigestAuth Request",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "tests[\"response code is 401\"] = responseCode.code === 401;",
                          "tests[\"response has WWW-Authenticate header\"] = (postman.getResponseHeader('WWW-Authenticate'));",
                          "",
                          "var authenticateHeader = postman.getResponseHeader('WWW-Authenticate'),",
                          "    realmStart = authenticateHeader.indexOf('\"',authenticateHeader.indexOf(\"realm\")) + 1 ,",
                          "    realmEnd = authenticateHeader.indexOf('\"',realmStart),",
                          "    realm = authenticateHeader.slice(realmStart,realmEnd),",
                          "    nonceStart = authenticateHeader.indexOf('\"',authenticateHeader.indexOf(\"nonce\")) + 1,",
                          "    nonceEnd = authenticateHeader.indexOf('\"',nonceStart),",
                          "    nonce = authenticateHeader.slice(nonceStart,nonceEnd);",
                          "    ",
                          "postman.setGlobalVariable('echo_digest_realm', realm);",
                          "postman.setGlobalVariable('echo_digest_nonce', nonce);"
                        ],
                        "id": "43d5639f-bdab-45b6-81c0-f6bd9a6d8db8"
                      }
                    }
                  ],
                  "id": "d371c3b1-630e-4250-a866-fd8552d9b87c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://postman-echo.com/digest-auth",
                    "description": "Performing a simple `GET` request to this endpoint returns status code `401 Unauthorized` with `WWW-Authenticate` header containing information to successfully authenticate subsequent requests.\nThe `WWW-Authenticate` header must be processed to extract `realm` and `nonce` values to hash subsequent requests.\n\nWhen this request is executed within Postman, the script attached with this request does the hard work of extracting realm and nonce from the header and set it as [global variables](https://www.getpostman.com/docs/environments#global-variables?source=echo-collection-app-onboarding) named `echo_digest_nonce` and `echo_digest_realm`.\nThese variables are re-used in subsequent request for seamless integration of the two requests."
                  },
                  "response": []
                }
              ],
              "id": "484d7f12-dfc7-41f3-bf3f-8923caed64d7",
              "description": "Digest authentication protects an endpoint with a username and password without actually transmitting the password over network.\nOne has to apply a hash function (like MD5, etc) to the username and password before sending them over the network.\n\n> Username: `postman`\n>\n> Password: `password`\n\nUnlike Basic-Auth, authentication happens using two consecutive requests where the first request returns `401 Unauthorised` along with `WWW-Authenticate` header containing information that needs to be used to authenticate subsequent calls.\n\nTo know more about digest authentication, refer to the [Digest Access Authentication](https://en.wikipedia.org/wiki/Digest_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#digest-auth) elaborates how to use the same within the Postman app."
            }
          ],
          "id": "92cc6742-f038-4094-b13b-c3979056cfcb",
          "description": "Postman Echo is service you can use to test your REST clients and make sample API calls. It provides endpoints for `GET`, `POST`, `PUT`, various auth mechanisms and other utility endpoints.\n\nThe most basic request in this entire collection is the very first `GET` request under the `Request Methods` folder, called [\"Get Request\"](https://devrel.postman.co/workspace/10-Postman-Features~41f602ab-1a0b-423e-8d6f-1ba20bb27b31/request/14272639-1d215a7f-8403-457d-812b-804e1ee6c808).\n\nThe documentation for the endpoints as well as example responses can be found at [https://postman-echo.com](https://postman-echo.com/?source=echo-collection-app-onboarding)"
        },
        {
          "name": "3. Postman Visualizer",
          "item": [
            {
              "name": "1. Basic visualizer demo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b56d4656-8864-4fd8-b587-8c65837f6dc6",
                    "exec": [
                      "const template = `",
                      "<ul>",
                      "",
                      "{{#each response.data.data}}",
                      "",
                      "<li>{{this.message}}</li>",
                      "",
                      "{{/each}}",
                      "",
                      "</ul>",
                      "",
                      "`",
                      "",
                      "pm.visualizer.set(template, {response: pm.response.json()})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "082ad98d-f0d3-4692-bc70-e3c8e4b5bb8d",
                    "exec": [
                      "console.log('hello');"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "66273a09-5806-46b7-ba72-cfa65a6270bb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"data\": [\n        {\n            \"owner\": {\n                \"id\": \"jpxJ6CnDgBUcqmMTczMh\",\n                \"email\": \"edina.barbosa@example.com\",\n                \"firstName\": \"Édina\",\n                \"title\": \"ms\",\n                \"lastName\": \"Barbosa\",\n                \"picture\": \"https://randomuser.me/api/portraits/women/28.jpg\"\n            },\n            \"id\": \"yPyeyGhXNcn8dZP6e87o\",\n            \"message\": \"😉😉😍😍 Pretty photo\",\n            \"publishDate\": \"2020-05-19T17:11:14.284Z\"\n        },\n        {\n            \"owner\": {\n                \"id\": \"IrNhFLyOw2a6R10BntKW\",\n                \"picture\": \"https://randomuser.me/api/portraits/women/66.jpg\",\n                \"lastName\": \"Çetiner\",\n                \"title\": \"miss\",\n                \"email\": \"oya.cetiner@example.com\",\n                \"firstName\": \"Oya\"\n            },\n            \"id\": \"04aA0p5xh5Gj6SqXB8tB\",\n            \"message\": \"😊👍👍 Awesome shot\",\n            \"publishDate\": \"2020-04-12T20:01:41.212Z\"\n        },\n        {\n            \"owner\": {\n                \"id\": \"URaBcSCMpXr96fpmjCjk\",\n                \"lastName\": \"Vega\",\n                \"email\": \"roberto.vega@example.com\",\n                \"firstName\": \"Roberto\",\n                \"picture\": \"https://randomuser.me/api/portraits/men/25.jpg\",\n                \"title\": \"mr\"\n            },\n            \"id\": \"ZQX9bfvymVusi36Go9D9\",\n            \"message\": \"😁😁😌😌 Impressive image\",\n            \"publishDate\": \"2020-03-20T02:34:25.132Z\"\n        },\n        {\n            \"owner\": {\n                \"id\": \"yLyiEdhLwMn5tOPA447y\",\n                \"email\": \"andre.robert@example.com\",\n                \"title\": \"mr\",\n                \"firstName\": \"André\",\n                \"lastName\": \"Robert\",\n                \"picture\": \"https://randomuser.me/api/portraits/men/9.jpg\"\n            },\n            \"id\": \"OQVzaZEOJkqwP26KMET0\",\n            \"message\": \"Cool pic\",\n            \"publishDate\": \"2020-01-17T03:42:22.157Z\"\n        }\n    ],\n    \"total\": 4,\n    \"page\": 0,\n    \"limit\": 10,\n    \"offset\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "postman-echo.com/post",
                "description": "Send the data you want to visualize in the **Body** as **raw** `JSON` then pass it into the visualizer template via the `data` object in the response.\n\n* Open the request **Tests** to see how Postman builds the response JSON into the visualizer template.\n\nTry tweaking it by changing to a 'line' or 'pie' chart, then send different types of data and visualize them your own way!"
              },
              "response": []
            },
            {
              "name": "2. Basic visualizer chart demo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ef1a0c5e-21cd-4e27-972e-d376ec5af567",
                    "exec": [
                      "var template = `",
                      "<h1>Visualizer chart example</h1>",
                      "<!--use handlebars to reference the response data passed via pm.visualizer.set at the bottom of this script-->",
                      "<div>{{response.url}}</div>",
                      "",
                      "<!--example uses chart.js-->",
                      "<canvas id=\"myChart\"></canvas>",
                      "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> ",
                      "<script>",
                      "var ctx = document.getElementById('myChart');",
                      "//the getData function provides access to the response data via the value object",
                      "pm.getData(function (err, value) {",
                      "    //tip: try changing 'bar' to 'line' or 'pie'",
                      "    var myChart = new Chart(ctx, {",
                      "\t    type: 'line',",
                      "    \tdata: {",
                      "    \t    labels: value.response.data.names,",
                      "    \t\tdatasets: [{ ",
                      "\t    \t\tlabel: 'Data',",
                      "\t    \t\tbackgroundColor: '#ff000066',",
                      "\t    \t\tborderWidth: 1,",
                      "\t    \t\tdata: value.response.data.nums",
                      "\t    \t}]",
                      "    \t},",
                      "         options: {",
                      "            scales: {",
                      "                yAxes: [{",
                      "                    ticks: {",
                      "                        beginAtZero: true",
                      "                    }",
                      "                }]",
                      "            }",
                      "        }",
                      "    });",
                      "});",
                      "</script>`;",
                      "",
                      "//pass the response data into the template",
                      "pm.visualizer.set(template, {",
                      "    response: pm.response.json()",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "67073235-be41-4b55-9478-41ff2d0b0ecf",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"names\": [\n        \"Dorothea\", \"Rose\", \"Blanche\", \"Sophia\"\n    ],\n    \"nums\": [\n        1, 3, 2, 4\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "postman-echo.com/post",
                "description": "Send the data you want to visualize in the **Body** as **raw** `JSON` then pass it into the visualizer template via the `data` object in the response.\n\n* Open the request **Tests** to see how Postman builds the response JSON into the visualizer template.\n\nTry tweaking it by changing to a 'line' or 'pie' chart, then send different types of data and visualize them your own way!"
              },
              "response": []
            }
          ],
          "id": "b6556ddf-80bc-477a-ae99-1df7161cb27c",
          "description": "Two simple requests showing how you can learn to use the [Postman Visualizer](https://learning.postman.com/docs/sending-requests/visualizer/) - by sending the data you want to visualize to the Postman Echo API.\n\n* The [Postman Echo API](https://docs.postman-echo.com/) helps you learn Postman by echoing back whatever you send it.\n* This template uses a `POST` request with **raw** `JSON` in the **Body** to send the data you want to visualize.\n* Check out the **Body** of the request to access and change the visualization data.\n* Open the request **Tests** to see how Postman builds the response data into a visualization. Change it to tweak your chart display!"
        },
        {
          "name": "4. Built-in Libraries",
          "item": [
            {
              "name": "Fake data to postman-echo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3f4c3939-6d9b-417c-ae69-477c6f86329b",
                    "exec": [
                      "var moment = require('moment');",
                      "var lodash = require('lodash');",
                      "var CryptoJS = require(\"crypto-js\");",
                      "",
                      "var jsonResponse = pm.response.json();",
                      "console.log(\"jsonResponse\", jsonResponse);",
                      "",
                      "// **** Moment.js example ****//",
                      "// console.log(\"formatted date =\", moment(jsonResponse.args.randomDate).format(\"MMM Do YYYY\"));",
                      "",
                      "",
                      "// **** lodash example ****//",
                      "// lodash.each(jsonResponse, value => {",
                      "//     console.log(\"value=\", value);",
                      "// })",
                      " ",
                      "",
                      "",
                      "//**** CryptoJS example ****//",
                      "// var ciphertext = CryptoJS.AES.encrypt('my message', 'secret key 123').toString();",
                      "// console.log(\"ciphertext=\", ciphertext);",
                      "",
                      "",
                      "",
                      "//**** chai.js example ****//",
                      "// pm.test(\"Status code is 200 and args > 1\", function () {",
                      "//     pm.response.to.have.status(200);",
                      "//     pm.expect(parseInt(jsonResponse.args.randomNumber)).to.be.greaterThan(1);",
                      "//     pm.expect(pm.response.responseTime).to.be.below(200);",
                      "// });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "8dcd01a8-f66c-43c6-af49-5d914e5c6026",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://postman-echo.com/get?randomName={{$randomFirstName}} {{$randomLastName}}&randomAddress={{$randomStreetAddress}}&randomDate={{$randomDateRecent}}&randomNumber={{$randomInt}}",
                  "protocol": "https",
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "path": [
                    "get"
                  ],
                  "query": [
                    {
                      "key": "randomName",
                      "value": "{{$randomFirstName}} {{$randomLastName}}"
                    },
                    {
                      "key": "randomAddress",
                      "value": "{{$randomStreetAddress}}"
                    },
                    {
                      "key": "randomDate",
                      "value": "{{$randomDateRecent}}"
                    },
                    {
                      "key": "randomNumber",
                      "value": "{{$randomInt}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "7abaeb69-35e3-413a-8c72-377a8790cae3",
          "description": "This collection shows some very basic examples of using some of the external libraries available within the Postman testing sandbox. \n\nThe libraries shown in this collection include:\n- [Faker.js](https://github.com/marak/Faker.js/) in the params tab of the request, used to generate fake data.\n- [Lodash](https://lodash.com/) in the Tests tab of the request, which is a JavaScript library providing utility functions for common programming tasks.\n- [Moment.js](https://momentjs.com/) in the Tests tab of the request, which helps format and display dates in JavaScript.\n- [chai.js](https://www.chaijs.com/) in the Tests tab of the request, which is a BDD/TDD assertion library.\n- [crypto-js](https://www.npmjs.com/package/crypto-js) in the Tests tab of the request, which is a growing collection of standard and secure cryptographic algorithms.\n\nFor libraries demonstrated in the Tests tab, uncomment the code below the library name, run the request, and then open the console to see the results.\n\nFor more information on using external libraries, check out [the documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#using-external-libraries) on external libraries."
        },
        {
          "name": "5. Workflow Control",
          "item": [
            {
              "name": "First request",
              "id": "220d8ad2-44ee-4e51-b48a-19eaa15d500d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://postman-echo.com/get?request=1",
                  "protocol": "https",
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "path": [
                    "get"
                  ],
                  "query": [
                    {
                      "key": "request",
                      "value": "1"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Second request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35822d32-be58-4a41-a43f-6a8a2b2028d6",
                    "exec": [
                      "postman.setNextRequest(\"Fourth request\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "aaafba77-b33c-46a8-b57e-8102ecd1005a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://postman-echo.com/get?request=2",
                  "protocol": "https",
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "path": [
                    "get"
                  ],
                  "query": [
                    {
                      "key": "request",
                      "value": "2"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Third request",
              "id": "3bfd4ef6-5270-4bae-8f43-428565aded3d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://postman-echo.com/get?request=3",
                  "protocol": "https",
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "path": [
                    "get"
                  ],
                  "query": [
                    {
                      "key": "request",
                      "value": "3",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Fourth request",
              "id": "8fb0559e-659f-454d-a81d-a057b70ab59d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://postman-echo.com/get?request=4",
                  "protocol": "https",
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "path": [
                    "get"
                  ],
                  "query": [
                    {
                      "key": "request",
                      "value": "4"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "0307205b-890a-4d16-bbac-e3a622cfa3d3",
          "description": "Postman provides some JavaScript APIs that you can use in request scripts to customize your [workflow control](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#sending-requests-from-scripts). The `postman` object provides functionality for testing your request and response data and workflow control. If you have conditional logic, you can highly customize the workflow. Just be careful not to end up in an endless loop!\n\nThe second request has the following code under the Tests tab: `postman.setNextRequest(\"Fourth request\");`. If you run the \"5. Set Next Request Flow\" folder in the Runner, that code will execute after the response is received in the second request, and the next request in the collection run will be \"Fourth request\", completely skipping over \"Third request\".\n\nSee the run order below where all requests are selected:\n\n![Image of run order](https://i.imgur.com/VBwzGih.png)\n\nBut because of the code in the Tests tab of the second request, the runner ran \"Fourth request\" immediately after \"Second request\", completely skipping \"Third request\":\n![Image of result order](https://i.imgur.com/YjHwpZP.png)"
        },
        {
          "name": "6. Collaboration Features",
          "item": [
            {
              "name": "Add comment",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "34d29944-2583-4ad0-b5ca-3df18df09e54",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "39d23f41-fb1e-410a-82d4-b8ed7e0e935b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://postman-echo.com/get?foo=bar",
                  "protocol": "https",
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "path": [
                    "get"
                  ],
                  "query": [
                    {
                      "key": "foo",
                      "value": "bar",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "0aab3fbc-042e-4845-abd7-84b62711903b",
          "description": "Let's do some work together! How fun!\n\nPostman used to be a platform that people worked on in isolation and tested APIs on their own. With commenting, branching, pull requests, and more, you shoudn’t work alone anymore! Let’s add a comment. Fork, change, PR, tag person, comment, approve, merge. Magic!\n\nTo learn more about comments, check out [the docs](https://learning.postman.com/docs/collaborating-in-postman/commenting-on-collections/#:~:text=In%20Postman%2C%20open%20the%20request,%2C%20Resolved%20Comments%2C%20or%20both). To see the comments on this folder, you can click the \"comments\" icon right below the documentation icon, or you can go directly to the [link here](https://devrel.postman.co/workspace/10-Postman-Features~41f602ab-1a0b-423e-8d6f-1ba20bb27b31/folder/14272639-0d9b9d24-df12-43c9-9611-de9c6f230b5f?ctx=comments). \n\nAnd to see the comments on the actual request, switch from `build mode` to `comment mode`. If you're in build mode, you won't see the comments on a request.\n![Image of run order](https://i.imgur.com/vkbfpVl.gif)"
        },
        {
          "name": "7. Collection-Level Information",
          "item": [
            {
              "name": "Get echo name 1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39c727c7-caeb-4f76-9e5b-2aa15678274e",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "eb6a4197-5ee8-4e5c-9ada-cfe06833765e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "postman-echo.com/get?name=Sean",
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "path": [
                    "get"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "Sean",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get echo name 2",
              "id": "465809b4-a729-4ffa-bfb1-c6d895cd3425",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "postman-echo.com/get?name={{$randomFirstName}}",
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "path": [
                    "get"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{$randomFirstName}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get echo name 3",
              "id": "39d08587-f921-45ca-b375-49f1d148def3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "postman-echo.com/get?name={{$randomFirstName}}",
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "path": [
                    "get"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{$randomFirstName}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get echo name 4",
              "id": "7e3cc4bc-a1cf-46bb-b47c-75146488df27",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "postman-echo.com/get?name={{$randomFirstName}}",
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "path": [
                    "get"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{$randomFirstName}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "15dab1f6-e17e-4077-92cf-05e9bd0b20be",
          "description": "This collection shows how you can perform actions at the collection level. This includes storing, accessing, and changing variables at the collection level as well as creating tests that can be repeated for each specific request in the collection.\n\nIn this basic example, under the Tests tab of the folder \"7. Collection Level Stuff\", there's only one test that checks for a status code of 200. Each of the individual requests do not have a test in the Pre-request or Tests tab. However if you run the entire folder with the runner, you'll get 4 passed tests! This is because the code in the Tests tab of the folder will run after each and every request in the folder.\n\nStay **DRY**!",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7d875302-f395-4289-ba15-75cb0bd25624",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8d0995b1-62e4-4928-ab74-795888552669",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Sean\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "8. Monitors for Regression Testing",
          "item": [
            {
              "name": "Get random number",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "845de616-8f9b-4a5a-881d-54c3bcdd009e",
                    "exec": [
                      "let randomNumber = parseInt(pm.response.json().args.number);",
                      "let numberLimit = parseInt(pm.environment.get(\"testInteger\"));",
                      "",
                      "pm.test(`Random number is larger than ${numberLimit}`, function () {",
                      "    pm.expect(randomNumber).to.be.greaterThan(numberLimit);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "24f6e825-33a4-4210-8902-16859b802449",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "postman-echo.com/get?number={{$randomInt}}",
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "path": [
                    "get"
                  ],
                  "query": [
                    {
                      "key": "number",
                      "value": "{{$randomInt}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "687f04a6-6435-452d-bf4e-6161d7bef3ff",
          "description": "You may know [monitors](https://learning.postman.com/docs/designing-and-developing-your-api/monitoring-your-api/intro-monitors/) exist or even use them. Monitors are a great way to stay up to date on the health and performance of your APIs. They run through your collections and give you the status of your tests. They’re really only as good as your tests.\n\nThey can essentially be used as automated regression testing. You can improve this pretty easily to do continuous regression testing using monitors by having it automatically run in different environments throughout the day to flag issues early.\n\nThis collection attempts to highlight a very basic use case. It is a simple request that generates a random number and sends it to Postman Echo. We can test if the number was above a certain threshold. And if we want to check if the number is above multiple thresholds, one way to do this automatically is with multiple monitors. \n\nClick the \"Monitors\" section in the left pane. There are two monitors running the exactly same collection (this one called \"9. Fun with Monitors\"), but they just run off of different environments. The key here is that the environments have different values set for `testInteger`. This means the same collection can be run and tested throughout the day against different values. If any of these tests fail, monitors can notify immediately.\n\nThe code in the Tests tab gets the environment variable called `testInteger` and compares the random integer from the request params to the `testInteger` value. There are two environments that have a different value for `testInteger`.\n- `High Value Environment` sets the `testInteger` value to 500.\n- `Low Value Environment` sets the `testInteger` value to 200.\n\nRunning this collection in multiple monitors in the two different environments listed above allows us test against multiple scenarios throughout the day.\n\n<p>\n  <img height=\"300\" src=\"https://i.imgur.com/KMZ9Tix.png\">\n</p>",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "59c89bc8-cbf9-4234-ab23-d6e0b79a8839",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0c32fa14-9533-42d6-b1ab-8d509b6e2c94",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "9. Built-in GraphQL Support",
          "item": [
            {
              "name": "Get Artist Info",
              "id": "de3fc8d0-c925-4af9-89ff-56e2d0edc2a5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "# ** Sample query using graphQL variables ** #\n\nquery getByArtist ($name: String!){\n    queryArtists (byName: $name){\n        name\n        image\n        albums {\n            name\n        }\n    }\n}\n\n\n# ** Query using hardcoded value ** #\n\n# query getArtistInfo{\n#     queryArtists(byName: \"DMX\"){\n#         name\n#         image\n#     }\n# }",
                    "variables": "{\n    \"name\" : \"{{artist}}\"\n}"
                  }
                },
                "url": "https://spotify-graphql-server.herokuapp.com/graphql"
              },
              "response": [
                {
                  "id": "6527db05-3fa6-4cdc-861c-75f67dba53ba",
                  "name": "Successful response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "graphql"
                    },
                    "url": "https://spotify-graphql-server.herokuapp.com/graphql"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Server",
                      "value": "Cowboy"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Access-Control-Allow-Origin",
                      "value": "*"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "12206"
                    },
                    {
                      "key": "Etag",
                      "value": "W/\"2fae-tqyBDeryOq684aFpfPsOPOBIQIs\""
                    },
                    {
                      "key": "Date",
                      "value": "Wed, 12 May 2021 00:59:03 GMT"
                    },
                    {
                      "key": "Via",
                      "value": "1.1 vegur"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n    \"data\": {\n        \"queryArtists\": [\n            {\n                \"name\": \"Artist Vs Poet\",\n                \"image\": \"https://i.scdn.co/image/0078316432cdfb6733c3bde0dc61754d45442d0f\",\n                \"albums\": [\n                    {\n                        \"name\": \"Medicine\"\n                    },\n                    {\n                        \"name\": \"Remember This (Anniversary Edition)\"\n                    },\n                    {\n                        \"name\": \"Remember This\"\n                    },\n                    {\n                        \"name\": \"Favorite Fix\"\n                    },\n                    {\n                        \"name\": \"Sleep EP\"\n                    },\n                    {\n                        \"name\": \"Damn Rough Night\"\n                    },\n                    {\n                        \"name\": \"Artist Vs. Poet\"\n                    },\n                    {\n                        \"name\": \"Pop Punk Xmas\"\n                    },\n                    {\n                        \"name\": \"Rockin Romance II\"\n                    },\n                    {\n                        \"name\": \"Tis The Season To Be Fearless\"\n                    },\n                    {\n                        \"name\": \"Punk Goes Pop, Vol. 3\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"Van Morrison\",\n                \"image\": \"https://i.scdn.co/image/f849f47dd12c6ad44c69cdad9dda089d54b70664\",\n                \"albums\": [\n                    {\n                        \"name\": \"Latest Record Project Volume I\"\n                    },\n                    {\n                        \"name\": \"Latest Record Project Volume I\"\n                    },\n                    {\n                        \"name\": \"Solid Gold Van Morrison\"\n                    },\n                    {\n                        \"name\": \"ライヴ・イン・ニューヨーク1978 (Live)\"\n                    },\n                    {\n                        \"name\": \"Three Chords And The Truth (Expanded Edition) [Deluxe]\"\n                    },\n                    {\n                        \"name\": \"Three Chords And The Truth\"\n                    },\n                    {\n                        \"name\": \"The Prophet Speaks\"\n                    },\n                    {\n                        \"name\": \"You're Driving Me Crazy\"\n                    },\n                    {\n                        \"name\": \"Versatile\"\n                    },\n                    {\n                        \"name\": \"Versatile\"\n                    },\n                    {\n                        \"name\": \"Roll With The Punches\"\n                    },\n                    {\n                        \"name\": \"The Authorized Bang Collection\"\n                    },\n                    {\n                        \"name\": \"Keep Me Singing\"\n                    },\n                    {\n                        \"name\": \"..It's Too Late to Stop Now...Volumes II, III & IV (Live)\"\n                    },\n                    {\n                        \"name\": \"Duets: Re-Working The Catalogue\"\n                    },\n                    {\n                        \"name\": \"Born to Sing: No Plan B\"\n                    },\n                    {\n                        \"name\": \"Astral Weeks: Live at the Hollywood Bowl\"\n                    },\n                    {\n                        \"name\": \"Keep It Simple\"\n                    },\n                    {\n                        \"name\": \"Pay the Devil\"\n                    },\n                    {\n                        \"name\": \"Pay The Devil (Eastern Europe)\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"Artists Of Then, Now & Forever\",\n                \"image\": \"https://i.scdn.co/image/1e3551ef0cd1bdc0b0efdef33a6e69f96f034ac3\",\n                \"albums\": [\n                    {\n                        \"name\": \"Forever Country\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"Bee Gees\",\n                \"image\": \"https://i.scdn.co/image/1d5a05673975ba0c378cd280344e000b0b865620\",\n                \"albums\": [\n                    {\n                        \"name\": \"How Can You Mend A Broken Heart\"\n                    },\n                    {\n                        \"name\": \"Spick And Span\"\n                    },\n                    {\n                        \"name\": \"This Is Where I Came In\"\n                    },\n                    {\n                        \"name\": \"One Night Only\"\n                    },\n                    {\n                        \"name\": \"Still Waters\"\n                    },\n                    {\n                        \"name\": \"Size Isn't Everything\"\n                    },\n                    {\n                        \"name\": \"High Civilization\"\n                    },\n                    {\n                        \"name\": \"One\"\n                    },\n                    {\n                        \"name\": \"E.S.P.\"\n                    },\n                    {\n                        \"name\": \"Living Eyes\"\n                    },\n                    {\n                        \"name\": \"Spirits Having Flown\"\n                    },\n                    {\n                        \"name\": \"Here At Last… Bee Gees …Live\"\n                    },\n                    {\n                        \"name\": \"Children Of The World\"\n                    },\n                    {\n                        \"name\": \"Main Course\"\n                    },\n                    {\n                        \"name\": \"Mr. Natural\"\n                    },\n                    {\n                        \"name\": \"Life In A Tin Can\"\n                    },\n                    {\n                        \"name\": \"To Whom It May Concern\"\n                    },\n                    {\n                        \"name\": \"Trafalgar\"\n                    },\n                    {\n                        \"name\": \"Melbourne 1971\"\n                    },\n                    {\n                        \"name\": \"2 Years On\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"Artist17\",\n                \"image\": \"https://i.scdn.co/image/ab67616d0000b273914b8c93d2837b831d458f4d\",\n                \"albums\": [\n                    {\n                        \"name\": \"Love Song Demos\"\n                    },\n                    {\n                        \"name\": \"S N Love Unofficial mix\"\n                    },\n                    {\n                        \"name\": \"Extascy Interlude\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"RAC\",\n                \"image\": \"https://i.scdn.co/image/95b1918ab0298d5f842a1c13b07e82f6b73135c4\",\n                \"albums\": [\n                    {\n                        \"name\": \"BOY\"\n                    },\n                    {\n                        \"name\": \"EGO\"\n                    },\n                    {\n                        \"name\": \"EGO\"\n                    },\n                    {\n                        \"name\": \"EGO\"\n                    },\n                    {\n                        \"name\": \"Master Spy (Original Soundtrack)\"\n                    },\n                    {\n                        \"name\": \"Master Spy (Original Soundtrack)\"\n                    },\n                    {\n                        \"name\": \"Strangers\"\n                    },\n                    {\n                        \"name\": \"Strangers\"\n                    },\n                    {\n                        \"name\": \"Strangers Part I\"\n                    },\n                    {\n                        \"name\": \"Strangers Part I\"\n                    },\n                    {\n                        \"name\": \"Strangers Part II\"\n                    },\n                    {\n                        \"name\": \"Strangers Part II\"\n                    },\n                    {\n                        \"name\": \"Holding On (RAC Mix)\"\n                    },\n                    {\n                        \"name\": \"Holding On (RAC Remix)\"\n                    },\n                    {\n                        \"name\": \"YOU\"\n                    },\n                    {\n                        \"name\": \"BOY Remixes\"\n                    },\n                    {\n                        \"name\": \"MIA (Robotaki Remix)\"\n                    },\n                    {\n                        \"name\": \"I Hate Falling in Love (RAC Mix)\"\n                    },\n                    {\n                        \"name\": \"Better (RAC Mix)\"\n                    },\n                    {\n                        \"name\": \"Olivia (RAC Mix)\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"Artists for Haiti\",\n                \"image\": \"https://i.scdn.co/image/ab67616d0000b273224e3de975885230a45ca8d4\",\n                \"albums\": [\n                    {\n                        \"name\": \"We Are the World 25 for Haiti - Single\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"Chronixx\",\n                \"image\": \"https://i.scdn.co/image/6ee2dea9b2064d84ee6980c2119e9c0e0d1232ca\",\n                \"albums\": [\n                    {\n                        \"name\": \"Dread & Terrible Project - 5th Anniversary (Deluxe Edition)\"\n                    },\n                    {\n                        \"name\": \"Chronology\"\n                    },\n                    {\n                        \"name\": \"CHRONOLOGY\"\n                    },\n                    {\n                        \"name\": \"Dread & Terrible\"\n                    },\n                    {\n                        \"name\": \"Safe N Sound\"\n                    },\n                    {\n                        \"name\": \"Safe N Sound\"\n                    },\n                    {\n                        \"name\": \"So Brutal\"\n                    },\n                    {\n                        \"name\": \"Black Carbon\"\n                    },\n                    {\n                        \"name\": \"Sell My Gun\"\n                    },\n                    {\n                        \"name\": \"Cool As The Breeze / Friday\"\n                    },\n                    {\n                        \"name\": \"COOL AS THE BREEZE/FRIDAY\"\n                    },\n                    {\n                        \"name\": \"Same Prayer\"\n                    },\n                    {\n                        \"name\": \"Bye Bye Bye (feat. Chronixx) [S.P.Y Remix]\"\n                    },\n                    {\n                        \"name\": \"Same Prayer\"\n                    },\n                    {\n                        \"name\": \"Dela Move\"\n                    },\n                    {\n                        \"name\": \"Dela Move\"\n                    },\n                    {\n                        \"name\": \"Black Is Beautiful (feat. Sampa The Great) [Remix]\"\n                    },\n                    {\n                        \"name\": \"Eternal Light\"\n                    },\n                    {\n                        \"name\": \"Unity We Need\"\n                    },\n                    {\n                        \"name\": \"I Can (J.L.L Remix)\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"Carly Simon\",\n                \"image\": \"https://i.scdn.co/image/2408d4187db84c9f53fd5789be1f674dd3b5cfbf\",\n                \"albums\": [\n                    {\n                        \"name\": \"Songs From the Trees (A Musical Memoir Collection)\"\n                    },\n                    {\n                        \"name\": \"Never Been Gone\"\n                    },\n                    {\n                        \"name\": \"This Kind of Love\"\n                    },\n                    {\n                        \"name\": \"Into White\"\n                    },\n                    {\n                        \"name\": \"Moonlight Serenade\"\n                    },\n                    {\n                        \"name\": \"Piglet's Big Movie\"\n                    },\n                    {\n                        \"name\": \"Christmas Is Almost Here\"\n                    },\n                    {\n                        \"name\": \"The Bedroom Tapes (Special Edition)\"\n                    },\n                    {\n                        \"name\": \"Film Noir\"\n                    },\n                    {\n                        \"name\": \"Letters Never Sent\"\n                    },\n                    {\n                        \"name\": \"Carly Simon / Music From The Motion Picture\"\n                    },\n                    {\n                        \"name\": \"Have You Seen Me Lately\"\n                    },\n                    {\n                        \"name\": \"My Romance\"\n                    },\n                    {\n                        \"name\": \"Coming Around Again\"\n                    },\n                    {\n                        \"name\": \"Coming Around Again\"\n                    },\n                    {\n                        \"name\": \"Spoiled Girl\"\n                    },\n                    {\n                        \"name\": \"Hello Big Man\"\n                    },\n                    {\n                        \"name\": \"Torch\"\n                    },\n                    {\n                        \"name\": \"Come Upstairs\"\n                    },\n                    {\n                        \"name\": \"Spy\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"Alexandre Desplat\",\n                \"image\": \"https://i.scdn.co/image/55e59036a536f4c8992e600f50369c39337bbf50\",\n                \"albums\": [\n                    {\n                        \"name\": \"The Midnight Sky (Music From The Netflix Film)\"\n                    },\n                    {\n                        \"name\": \"Airlines\"\n                    },\n                    {\n                        \"name\": \"Little Women (Original Motion Picture Soundtrack)\"\n                    },\n                    {\n                        \"name\": \"Les Filles du Docteur March (Bande Originale du Film)\"\n                    },\n                    {\n                        \"name\": \"J'accuse (Bande originale du film)\"\n                    },\n                    {\n                        \"name\": \"Adults in the Room (Bande originale du film)\"\n                    },\n                    {\n                        \"name\": \"The Secret Life Of Pets 2 (Original Motion Picture Soundtrack)\"\n                    },\n                    {\n                        \"name\": \"The Sisters Brothers (Original Motion Picture Soundtrack)\"\n                    },\n                    {\n                        \"name\": \"The Sisters Brothers (Original Motion Picture Soundtrack)\"\n                    },\n                    {\n                        \"name\": \"Les frères Sisters (Bande originale du film)\"\n                    },\n                    {\n                        \"name\": \"Operation Finale (Original Motion Picture Soundtrack)\"\n                    },\n                    {\n                        \"name\": \"Isle Of Dogs (Original Score)\"\n                    },\n                    {\n                        \"name\": \"Toni (Original Motion Picture Soundtrack)\"\n                    },\n                    {\n                        \"name\": \"Suburbicon (Original Motion Picture Soundtrack)\"\n                    },\n                    {\n                        \"name\": \"American Pastoral (Original Motion Picture Soundtrack)\"\n                    },\n                    {\n                        \"name\": \"American Pastoral (Original Motion Picture Soundtrack)\"\n                    },\n                    {\n                        \"name\": \"The Light Between Oceans (Original Motion Picture Soundtrack)\"\n                    },\n                    {\n                        \"name\": \"The Light Between Oceans (Original Motion Picture Soundtrack)\"\n                    },\n                    {\n                        \"name\": \"The Secret Life of Pets (Original Motion Picture Soundtrack)\"\n                    },\n                    {\n                        \"name\": \"The Secret Life of Pets (Original Motion Picture Soundtrack)\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"Artists for Peace and Justice\",\n                \"image\": \"https://i.scdn.co/image/ab67616d0000b273d97de94216de0d30a7568573\",\n                \"albums\": [\n                    {\n                        \"name\": \"Let the Rhythm Lead: Haiti Song Summit, Vol. 1\"\n                    },\n                    {\n                        \"name\": \"Love Is Love\"\n                    },\n                    {\n                        \"name\": \"Under the Supermoon\"\n                    },\n                    {\n                        \"name\": \"Lapé, Lanmou\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"BIBI\",\n                \"image\": \"https://i.scdn.co/image/ab67616d0000b2735ab0f207b5e583a951915b2d\",\n                \"albums\": [\n                    {\n                        \"name\": \"Oh! Master (Original Television Soundtrack), Pt. 5\"\n                    },\n                    {\n                        \"name\": \"Life is a Bi…\"\n                    },\n                    {\n                        \"name\": \"괴물 (Original Television Soundtrack) Pt. 2\"\n                    },\n                    {\n                        \"name\": \"Eat My Love\"\n                    },\n                    {\n                        \"name\": \"NAAN (Live On)\"\n                    },\n                    {\n                        \"name\": \"Dingo X BIBI - she got it\"\n                    },\n                    {\n                        \"name\": \"I'm good at goodbyes\"\n                    },\n                    {\n                        \"name\": \"KAZINO\"\n                    },\n                    {\n                        \"name\": \"BIG PICTURE HOUSE (Original TV Soundtrack, Pt. 3)\"\n                    },\n                    {\n                        \"name\": \"BIG PICTURE HOUSE (Original TV Soundtrack, Pt. 2)\"\n                    },\n                    {\n                        \"name\": \"LISTEN 035 Restless\"\n                    },\n                    {\n                        \"name\": \"Step?\"\n                    },\n                    {\n                        \"name\": \"The Manual for people who want to love\"\n                    },\n                    {\n                        \"name\": \"BINU\"\n                    },\n                    {\n                        \"name\": \"THE FAN TOP2\"\n                    },\n                    {\n                        \"name\": \"THE FAN TOP3\"\n                    },\n                    {\n                        \"name\": \"THE FAN TOP3\"\n                    },\n                    {\n                        \"name\": \"THE FAN 4ROUND Part.2\"\n                    },\n                    {\n                        \"name\": \"THE FAN 3ROUND Part.2\"\n                    },\n                    {\n                        \"name\": \"THE FAN 1ROUND Part.1\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"Artistic Raw\",\n                \"image\": \"https://i.scdn.co/image/c4e8cdcd214cc09a7ec56beb6c4d176c2012bd77\",\n                \"albums\": [\n                    {\n                        \"name\": \"Space\"\n                    },\n                    {\n                        \"name\": \"Shawty\"\n                    },\n                    {\n                        \"name\": \"Ik Wacht Op Jou\"\n                    },\n                    {\n                        \"name\": \"Dinero\"\n                    },\n                    {\n                        \"name\": \"Zet Je Body\"\n                    },\n                    {\n                        \"name\": \"Sacude\"\n                    },\n                    {\n                        \"name\": \"No Ley\"\n                    },\n                    {\n                        \"name\": \"Komen & Gaan\"\n                    },\n                    {\n                        \"name\": \"Señorita\"\n                    },\n                    {\n                        \"name\": \"Si Por Hay\"\n                    },\n                    {\n                        \"name\": \"Intentalo Tu\"\n                    },\n                    {\n                        \"name\": \"Suelta\"\n                    },\n                    {\n                        \"name\": \"Maak Je Klaar\"\n                    },\n                    {\n                        \"name\": \"Mi Mera\"\n                    },\n                    {\n                        \"name\": \"Mi Mera\"\n                    },\n                    {\n                        \"name\": \"In de Stu\"\n                    },\n                    {\n                        \"name\": \"Criminal\"\n                    },\n                    {\n                        \"name\": \"Ferrari\"\n                    },\n                    {\n                        \"name\": \"Geschiedenis\"\n                    },\n                    {\n                        \"name\": \"Luna\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"Nat King Cole\",\n                \"image\": \"https://i.scdn.co/image/eb031f3737e50b8e5681a9302792b752fb41e13e\",\n                \"albums\": [\n                    {\n                        \"name\": \"ベスト・アーティスト・コレクション・ナット・キング・コール\"\n                    },\n                    {\n                        \"name\": \"ナット・キング・コール\"\n                    },\n                    {\n                        \"name\": \"Hittin' The Ramp: The Early Years (1936 - 1943)\"\n                    },\n                    {\n                        \"name\": \"Incomparable !\"\n                    },\n                    {\n                        \"name\": \"International Nat King Cole\"\n                    },\n                    {\n                        \"name\": \"For Sentimental Reasons\"\n                    },\n                    {\n                        \"name\": \"Ultimate Nat King Cole\"\n                    },\n                    {\n                        \"name\": \"Stardust: The Rare Television Performances\"\n                    },\n                    {\n                        \"name\": \"Unforgettable\"\n                    },\n                    {\n                        \"name\": \"The Extraordinary\"\n                    },\n                    {\n                        \"name\": \"The Extraordinary (Deluxe Edition)\"\n                    },\n                    {\n                        \"name\": \"Eternal Nat King Cole -Fly Me To The Moon-\"\n                    },\n                    {\n                        \"name\": \"Por Siempre... Nat King Cole\"\n                    },\n                    {\n                        \"name\": \"Cole, Nat King: Unforgettable (1950-1958)\"\n                    },\n                    {\n                        \"name\": \"Re:Generations\"\n                    },\n                    {\n                        \"name\": \"Re:Generations\"\n                    },\n                    {\n                        \"name\": \"Re:Generations\"\n                    },\n                    {\n                        \"name\": \"The Christmas Song\"\n                    },\n                    {\n                        \"name\": \"Top Pops\"\n                    },\n                    {\n                        \"name\": \"Welcome To The Club\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"Artists Stand Up To Cancer\",\n                \"image\": \"https://i.scdn.co/image/ab67616d0000b2738c68d64737076eeea8487536\",\n                \"albums\": [\n                    {\n                        \"name\": \"JUST STAND UP!\"\n                    },\n                    {\n                        \"name\": \"JUST STAND UP!\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"CHIC\",\n                \"image\": \"https://i.scdn.co/image/8e9c76e2392d995543a59d718d322f8bc1e530c0\",\n                \"albums\": [\n                    {\n                        \"name\": \"It’s About Time\"\n                    },\n                    {\n                        \"name\": \"Dimitri From Paris Presents Le CHIC Remix\"\n                    },\n                    {\n                        \"name\": \"The Very Best of Nile Rodgers & Chic (Live)\"\n                    },\n                    {\n                        \"name\": \"Chic-ism\"\n                    },\n                    {\n                        \"name\": \"Believer\"\n                    },\n                    {\n                        \"name\": \"Tongue in Chic\"\n                    },\n                    {\n                        \"name\": \"Take It Off\"\n                    },\n                    {\n                        \"name\": \"Real People\"\n                    },\n                    {\n                        \"name\": \"Risqué (2018 Remaster)\"\n                    },\n                    {\n                        \"name\": \"Risqué\"\n                    },\n                    {\n                        \"name\": \"C'est Chic (2018 Remaster)\"\n                    },\n                    {\n                        \"name\": \"Chic (2018 Remaster)\"\n                    },\n                    {\n                        \"name\": \"Till The World Falls (Remixes)\"\n                    },\n                    {\n                        \"name\": \"Le Freak (Oliver Heldens Remix)\"\n                    },\n                    {\n                        \"name\": \"Le Freak (Oliver Heldens Remix)\"\n                    },\n                    {\n                        \"name\": \"Sober\"\n                    },\n                    {\n                        \"name\": \"Till The World Falls (7” Version)\"\n                    },\n                    {\n                        \"name\": \"I'll Be There (feat. Nile Rodgers)\"\n                    },\n                    {\n                        \"name\": \"I'll Be There (feat. Nile Rodgers)\"\n                    },\n                    {\n                        \"name\": \"Chic & Aristofreeks Le Freak Remixes\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"ARTISTAJAE\",\n                \"image\": \"https://i.scdn.co/image/ef073d8186600dc12411d77b9db3b97b1f26b2b9\",\n                \"albums\": [\n                    {\n                        \"name\": \"Sunset Desert\"\n                    },\n                    {\n                        \"name\": \"Weep\"\n                    },\n                    {\n                        \"name\": \"RISING\"\n                    },\n                    {\n                        \"name\": \"Stronger With You\"\n                    },\n                    {\n                        \"name\": \"Swervin\"\n                    },\n                    {\n                        \"name\": \"Higher Limits\"\n                    },\n                    {\n                        \"name\": \"Stick Up\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"Artist Unknown\",\n                \"image\": \"https://i.scdn.co/image/ab67616d0000b273dea2d7ef77ad8e3ec3739d23\",\n                \"albums\": [\n                    {\n                        \"name\": \"Ruby\"\n                    },\n                    {\n                        \"name\": \"Il mito dell'opera: Mario del Monaco (Live)\"\n                    },\n                    {\n                        \"name\": \"Il mito dell'opera: Pedro Lavirgen (Live)\"\n                    },\n                    {\n                        \"name\": \"Il mitto dell'opera: Gianni Raimondi (Live)\"\n                    },\n                    {\n                        \"name\": \"Artist Series Vol.03 - Artist Unknown\"\n                    },\n                    {\n                        \"name\": \"Orchestra Giovanile Russia, Vol. 2\"\n                    },\n                    {\n                        \"name\": \"Future\"\n                    },\n                    {\n                        \"name\": \"Badings & Raaijmakers: Electronic Music (Collection trésors, stéréo version)\"\n                    },\n                    {\n                        \"name\": \"Comme une rose (Mono Version)\"\n                    },\n                    {\n                        \"name\": \"Move Me (Artist Unknown Remix)\"\n                    },\n                    {\n                        \"name\": \"Artist Unknown\"\n                    },\n                    {\n                        \"name\": \"w0rmh0l3.dat\"\n                    },\n                    {\n                        \"name\": \"Undead / Control\"\n                    },\n                    {\n                        \"name\": \"Oh Sh#t\"\n                    },\n                    {\n                        \"name\": \"Unknown Pt. 03 EP\"\n                    },\n                    {\n                        \"name\": \"Unknown Pt. 02 EP\"\n                    },\n                    {\n                        \"name\": \"Errorist\"\n                    },\n                    {\n                        \"name\": \"Matinée de dimanche en Bretagne: Grand-messe à l'église de Pouldreuzic (Mono Version)\"\n                    },\n                    {\n                        \"name\": \"Duos d'opéras célèbres (Mono Version)\"\n                    },\n                    {\n                        \"name\": \"Popular Music from Russia\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"London Philharmonic Orchestra\",\n                \"image\": \"https://i.scdn.co/image/bf87148d622227640d5c20ab5d7c13693d53f604\",\n                \"albums\": [\n                    {\n                        \"name\": \"Beecham's L.P.O. Years, Vol. 1: French Music\"\n                    },\n                    {\n                        \"name\": \"Passione\"\n                    },\n                    {\n                        \"name\": \"Beethoven - Wagner - Verdi\"\n                    },\n                    {\n                        \"name\": \"Arnold: English Dances OP.27 & 33 - Bax:tintagel, Gp 213 - Elgar: Chansons De Nuit & Matin, OP. 15 - Holst: The Perfect Fool, OP. 39 - Butterworth: A Shropshire Lad, the Banks of Green Willow - Walton: Siesta (Live)\"\n                    },\n                    {\n                        \"name\": \"Beethoven: Piano Concertos Nos. 1 & 4\"\n                    },\n                    {\n                        \"name\": \"J.S. Bach: Concerto for 2 Harpsichords in C Major, BWV 1061 - Beethoven: Piano Concerto No. 5 in E-Flat Major, Op. 73\"\n                    },\n                    {\n                        \"name\": \"Rodrigo, Coll & Harden: Guitar Works\"\n                    },\n                    {\n                        \"name\": \"Sir Adrian Boult: A Musical Legacy, Vol. 5\"\n                    },\n                    {\n                        \"name\": \"Vladimir Martynov: Utopia\"\n                    },\n                    {\n                        \"name\": \"Shostakovich: Symphony No. 10 in E Minor, Op. 93 – Holst: The Planets, Op. 32, H. 125 (Live)\"\n                    },\n                    {\n                        \"name\": \"Noël !\"\n                    },\n                    {\n                        \"name\": \"The Art of Édouard Lalo\"\n                    },\n                    {\n                        \"name\": \"Sir Adrian Boult: A Musical Legacy, Vol. 1\"\n                    },\n                    {\n                        \"name\": \"Music for Stage and Screen\"\n                    },\n                    {\n                        \"name\": \"Symphony No. 11 in G Minor \\\"The Year 1905\\\"\"\n                    },\n                    {\n                        \"name\": \"Rosner: Requiem, Op. 59\"\n                    },\n                    {\n                        \"name\": \"Mozart, Tchaikovsky & Glazunov: Violin Concertos\"\n                    },\n                    {\n                        \"name\": \"Music From The Great Movie Thrillers\"\n                    },\n                    {\n                        \"name\": \"Anna Clyne: DANCE - Edward Elgar: Cello Concerto\"\n                    },\n                    {\n                        \"name\": \"Elgar\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"Artist Reaching Christ\",\n                \"image\": \"https://i.scdn.co/image/ab67616d0000b273e5bf77ba8acaf1d7c0f35598\",\n                \"albums\": [\n                    {\n                        \"name\": \"Much More\"\n                    },\n                    {\n                        \"name\": \"No Emotions\"\n                    },\n                    {\n                        \"name\": \"God Got It\"\n                    },\n                    {\n                        \"name\": \"Learn Yo Lesson\"\n                    },\n                    {\n                        \"name\": \"Young C X Aldre-Much More\"\n                    },\n                    {\n                        \"name\": \"Love\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
                }
              ]
            },
            {
              "name": "Using GraphQL query",
              "id": "7c11a938-38e1-43a8-9d51-bf4c5dd4de93",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/graphql",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "query{\n  allFilms\n  {\n   films {\n      id\n      title\n      episodeID\n    }\n  }\n}"
                },
                "url": "https://swapi.apis.guru",
                "description": "Similar to the previous example from [this community tutorial](https://www.codetraveler.io/2019/01/12/how-to-use-postman-with-a-graphql-api/), we learn that if the GraphQL endpoint accepts the header `application/graphql`, then we don't need to use JSON in the request body.\n\nAdd the header `Content-type: application/graphql`, and then you can use a standard graphQL query in the request body.\n\n![[standard graphQL query](https://i.imgur.com/GMP3Eiz.png)](https://i.imgur.com/GMP3Eiz.png)"
              },
              "response": [
                {
                  "id": "3d1a3542-4d68-48b7-a3b0-50f3ba298162",
                  "name": "Successful response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/graphql",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "query{\n  allFilms\n  {\n   films {\n      id\n      title\n      episodeID\n    }\n  }\n}"
                    },
                    "url": "https://swapi.apis.guru"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Server",
                      "value": "Cowboy"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Access-Control-Allow-Origin",
                      "value": "*"
                    },
                    {
                      "key": "Access-Control-Allow-Methods",
                      "value": "GET,PUT,POST,DELETE,OPTIONS"
                    },
                    {
                      "key": "Access-Control-Allow-Headers",
                      "value": "Content-Type, Authorization, Content-Length, X-Requested-With"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "423"
                    },
                    {
                      "key": "Etag",
                      "value": "W/\"1a7-Q2yB9EcgmVSORKM35UT6aw\""
                    },
                    {
                      "key": "Date",
                      "value": "Tue, 07 May 2019 00:17:55 GMT"
                    },
                    {
                      "key": "Via",
                      "value": "1.1 vegur"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n    \"data\": {\n        \"allFilms\": {\n            \"films\": [\n                {\n                    \"id\": \"ZmlsbXM6MQ==\",\n                    \"title\": \"A New Hope\",\n                    \"episodeID\": 4\n                },\n                {\n                    \"id\": \"ZmlsbXM6Mg==\",\n                    \"title\": \"The Empire Strikes Back\",\n                    \"episodeID\": 5\n                },\n                {\n                    \"id\": \"ZmlsbXM6Mw==\",\n                    \"title\": \"Return of the Jedi\",\n                    \"episodeID\": 6\n                },\n                {\n                    \"id\": \"ZmlsbXM6NA==\",\n                    \"title\": \"The Phantom Menace\",\n                    \"episodeID\": 1\n                },\n                {\n                    \"id\": \"ZmlsbXM6NQ==\",\n                    \"title\": \"Attack of the Clones\",\n                    \"episodeID\": 2\n                },\n                {\n                    \"id\": \"ZmlsbXM6Ng==\",\n                    \"title\": \"Revenge of the Sith\",\n                    \"episodeID\": 3\n                }\n            ]\n        }\n    }\n}"
                }
              ]
            }
          ],
          "id": "480385d3-3528-47cc-9695-7ce88b09b2fd",
          "description": "Frequently called an advanced REST client, Postman is actually a tool that handles any calls sent over HTTP. This means that you can use Postman to send [SOAP requests](https://blog.getpostman.com/2017/11/18/postman-makes-soap-requests-too/) or GraphQL queries. There are other templates that explain [how to work with SOAP](https://documenter.getpostman.com/view/1559645/RWgtScW1). This template here contains examples of how you can use Postman to work with GraphQL.\n\nCheck out [the collection documentation](https://documenter.getpostman.com/view/1559645/S1Lu2puC) for screenshots and step-by-step instructions.\n\n\n> Postman launched [built-in support for GraphQL](https://github.com/postmanlabs/postman-app-support/issues/1669#issuecomment-487569592) in version 7.2. \n\nOther helpful resources:\n* [REST, SOAP, GraphQL — Gesundheit!](https://medium.com/better-practices/rest-soap-graphql-gesundheit-6544053f65cf)\n* [GraphQL vs REST: Overview](https://philsturgeon.uk/api/2017/01/24/graphql-vs-rest-overview/)\n* [Public GraphQL APIs](https://github.com/APIs-guru/graphql-apis)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b784d6fb-ece4-4005-beba-0590ccbda199",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7a04194a-0e40-420e-99f4-fbfdecc11f2e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Get all Workspaces",
          "id": "c68e5a0d-3c1f-4cc7-8751-552867504d96",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://api.getpostman.com/workspaces?apikey={{postman_api_key}}",
              "protocol": "https",
              "host": [
                "api",
                "getpostman",
                "com"
              ],
              "path": [
                "workspaces"
              ],
              "query": [
                {
                  "key": "apikey",
                  "value": "{{postman_api_key}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "id": "88ef51b5-d245-4fc2-802b-22ebd7622b7e"
    },
    {
      "name": "ASSET",
      "item": [
        {
          "name": "PAID",
          "item": [
            {
              "name": "PPV Asset",
              "item": [
                {
                  "name": "Authenticate",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9933baed-4806-4e3c-a555-55f0c2a17bf3",
                        "exec": [
                          "let responseData = JSON.parse(responseBody); // parse whole response into responseData variable",
                          "let username = responseData.account.email;",
                          "//console.log(username);",
                          "//small changes",
                          "//small changes again",
                          "//github Fork test, abcdefghijklm123",
                          "let validate = pm.variables.get(\"realUser\")",
                          "let Order;",
                          "",
                          "",
                          "console.log(\"adding auth Token value\")",
                          "pm.environment.set(\"authToken\", responseData.access_token) // store Token into variable",
                          "",
                          "pm.test(\"Validate user is Active\", function () { // account is active",
                          "    pm.expect(responseData.account.active).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Validate Correct user is logged in\", function () {",
                          "    pm.expect(username).to.be.eql(`${validate}`)",
                          "});",
                          "",
                          "pm.test(\"Validate email is equal to username\", function () {",
                          "    pm.expect(responseData.account.email).to.be.eql(responseData.account.username);",
                          "});",
                          "",
                          "for (let filter of responseData.account.meta){ // iteration for every value under meta array",
                          "    console.log(filter);",
                          "    if(filter.key == \"register_source\"){",
                          "        Order = filter;",
                          "        console.log(Order);",
                          "    }",
                          "}",
                          "",
                          "pm.test(\"verify key-value are correct if User is registered on our Platform\", function(){ // validate register source on platform is inplayer",
                          "    pm.expect(Order.key).to.eql(\"register_source\"),",
                          "    pm.expect(Order.value).to.be.eql(\"inplayer\");",
                          "});",
                          "",
                          "pm.test(\"verify key-value are correct if User is registered on our Platform\", function(){ // validate register source on platform is inplayer",
                          "    pm.expect(Order.key).to.eql(\"register_source\"),",
                          "    pm.expect(Order.value).to.be.eql(\"inplayer\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "5800de80-b013-480d-979d-0a021dd2dd9a",
                        "exec": [
                          "let usernamev1 = \"oliver.pinev@inplayer.com\";",
                          "",
                          "pm.environment.set(\"realUser\", usernamev1);//save username before login on platform",
                          "pm.environment.set(\"elenaVariabla\", usernamev1);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "e536043d-64a9-4497-8c36-8d36ab4dded6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "key": "client_id",
                          "value": "3b39b5ab-b5fc-4ba3-b770-73155d20e61f",
                          "type": "text"
                        },
                        {
                          "key": "grant_type",
                          "value": "password",
                          "type": "text"
                        },
                        {
                          "key": "username",
                          "value": "{{realUser}}",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "Password123",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "https://{{baseUrl}}/v2/accounts/authenticate"
                  },
                  "response": []
                },
                {
                  "name": "Create-PaidAsset",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b1b1cad9-99e6-4298-a42f-1dbfcdb21c5c",
                        "exec": [
                          "const responseData = JSON.parse(responseBody);",
                          "let evtDtls = responseData.event_details;",
                          "pm.environment.set(\"itemID\", responseData.id);",
                          "pm.environment.set(\"merchantUUID\", responseData.merchant_uuid);",
                          "pm.environment.set(\"eventDetailsID\", responseData.event_details.id);",
                          "",
                          "    ",
                          "    if (responseData.access_control_type.id == 1 && responseData.item_type.id == 2){ //item type for html asset is 2",
                          "    pm.test(\"Validate asset type is Paid\", function () {",
                          "        console.log(\"inside if\")",
                          "        // postman.setNextRequest(\"CREATE-Positive_PRIVATE_ASSET CODE\");",
                          "        });",
                          "    }",
                          "    else{",
                          "            pm.test(\"Asset Type in response is different than 1\", function(){",
                          "        // postman.setNextRequest(\"ENTRY-ASSET CODE\");",
                          "            throw new Error(\"access_control_type and item_type are not equal\");",
                          "        });  ",
                          "",
                          "    }",
                          "    if (responseData.item_type.content_type == \"html\" && responseData.item_type.name == \"html_asset\"){",
                          "    pm.test(\"Assertion that HTML asset were created\", function () {",
                          "        });",
                          "    }",
                          "    pm.test(\"Validate default/initial value for event_type equals other\", function () {",
                          "    pm.expect(responseData.event_type).to.be.eql(\"live\");",
                          "});",
                          "",
                          "    pm.test(\"Verifying initial values for event details object\", function () {",
                          "    pm.expect(evtDtls.event_name).to.be.eql(\"\"); // validate empty string for event_name",
                          "    pm.expect(evtDtls.event_name).to.be.a(\"string\"); // validate value type for event_name",
                          "    console.info(\"event name is empty\");",
                          "    pm.expect(evtDtls.event_description).to.be.eql(\"\");",
                          "    pm.expect(evtDtls.event_description).to.be.a(\"string\");",
                          "    console.log(typeof evtDtls.event_description);",
                          "    pm.expect(evtDtls.content_category).to.be.eql(\"\");",
                          "    pm.expect(evtDtls.content_category).to.be.a(\"string\");",
                          "    pm.expect(evtDtls.web_page).to.be.eql(\"\");",
                          "    pm.expect(evtDtls.web_page).to.be.a(\"string\");",
                          "    pm.expect(evtDtls.replay_available).to.be.eql(null);",
                          "    console.log(typeof evtDtls.replay_available);",
                          "    pm.expect(evtDtls.replay_available).to.be.null;",
                          "    pm.expect(evtDtls.expected_viewership).to.be.eql(0);",
                          "    pm.expect(evtDtls.expected_viewership).to.be.a(\"number\");",
                          "    pm.expect(evtDtls.is_advertised).to.be.eql(false);",
                          "    pm.expect(evtDtls.is_advertised).to.be.a(\"boolean\");",
                          "    pm.expect(evtDtls.industry).to.be.eql(\"\");",
                          "    pm.expect(evtDtls.industry).to.be.a(\"string\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "a14a1f21-3333-4b12-a789-9bb83ee8d21d",
                        "exec": [
                          "//generate random code from 1-3",
                          "let randomNumber = Math.floor(Math.random() * 10000);",
                          "pm.environment.set(\"titlePaidAsset\", \"Paid Asset\"+`${randomNumber}`);",
                          "pm.environment.set(\"paid\", 1);",
                          "//presentation changes",
                          "//change1222234567",
                          "//some test",
                          "//let rndInt = Math.floor(Math.random() * 3) + 2",
                          "    //console.log(rndInt)",
                          "   // pm.environment.set(\"rndControlTypeID\", rndInt);",
                          "",
                          "//postman.setNextRequest(\"CREATE-Positive_PRIVATE_ASSET CODE\");",
                          "//postman.setNextRequest(\"ENTRY-ASSET CODE\");",
                          "//postman.setNextRequest(\"Authenticate\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "f8718398-c277-4106-a1fb-0485a82019a1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{authToken}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "key": "item_type",
                          "value": "html_asset",
                          "type": "text"
                        },
                        {
                          "key": "access_control_type_id",
                          "value": "{{paid}}",
                          "type": "text"
                        },
                        {
                          "key": "title",
                          "value": "{{titlePaidAsset}}",
                          "type": "text"
                        },
                        {
                          "key": "is_giftable",
                          "value": "1",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "gift_description",
                          "value": "\"est gift desc\"",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "event_type",
                          "value": "live",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "https://staging-v2.inplayer.com/v2/items",
                    "description": "This POST request create an Asset of type Live and have implemented some Assertion"
                  },
                  "response": []
                },
                {
                  "name": "Get Item (Asset) Details",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1656e7b0-44c4-4b09-98b1-be34e3051ab3",
                        "exec": [
                          "",
                          "pm.test(\"Response time is less than 500ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(500);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "26d7dc0d-91f0-4a05-a880-0493ca1c07f0",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://{{baseUrl}}/v2/items/{{merchantUUID}}/{{itemID}}"
                  },
                  "response": []
                },
                {
                  "name": "POST PPV Access fee",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0ad089b5-d835-4788-bd11-8d3b4445f7b7",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "pm.environment.set(\"feeID\", responseData.id);",
                          "pm.environment.set(\"compareAmount1\", responseData.amount);",
                          "",
                          "",
                          "if((responseData.currency == \"USD\" || responseData.currency == \"EUR\" || responseData.currency == \"GBP\") && responseData.amount >= 0.99){",
                          "    pm.test(\"Verify amount and currency you have added is greater or equal to 0.99USD\", function () {",
                          "    //console.log(\"in if statement\");",
                          "    });",
                          "}",
                          "else {",
                          "    pm.test(\"Asset Type in response is different than 1\", function(){",
                          "            //postman.setNextRequest(\"ENTRY-ASSET CODE\");",
                          "            throw new Error(\"Amount and currency you have inserted is below 0.99 USD \");",
                          "        });  ",
                          "}",
                          "",
                          "pm.test(\"Verify Created Access Fee is of Type PPV\", function () {",
                          "    pm.expect(responseData.access_type.name).to.be.eql(\"ppv\");",
                          "    pm.expect(responseData.access_type.period).to.be.oneOf([\"day\",\"month\", \"year\", \"week\"]);",
                          "});",
                          "",
                          "pm.test(\"Check active environment is Staging\", function () {",
                          "    pm.expect(pm.environment.name).to.eql(\"Staging Env\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "99924f3a-5db0-437e-870f-70d6f708b4cc",
                        "exec": [
                          "pm.environment.set(\"initialAmount\", 5);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "6ff84585-5656-4483-a147-ad6bffe3e69e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{authToken}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "key": "access_type_id",
                          "value": "1",
                          "type": "text"
                        },
                        {
                          "key": "amount",
                          "value": "{{initialAmount}}",
                          "type": "text"
                        },
                        {
                          "key": "currency",
                          "value": "GBP",
                          "type": "text"
                        },
                        {
                          "key": "description",
                          "value": "1hour PPV trial",
                          "type": "text"
                        },
                        {
                          "key": "trial_period_quantity",
                          "value": "1",
                          "type": "text"
                        },
                        {
                          "key": "trial_period_period",
                          "value": "hour",
                          "type": "text"
                        },
                        {
                          "key": "trial_period_description",
                          "value": "trial one hour",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "https://{{baseUrl}}/v2/items/{{itemID}}/access-fees"
                  },
                  "response": []
                },
                {
                  "name": "GET PPV Access fee",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4fa68e35-e698-4a30-95a4-41cbfd888709",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "let fee_id = pm.environment.get(\"feeID\");",
                          "let item_id = pm.environment.get(\"itemID\");",
                          "pm.environment.set(\"amountFromResponse3\", responseData.amount);",
                          "",
                          "",
                          "console.log(responseData.amount);",
                          "",
                          "if(responseData.amount == pm.environment.get(\"initialAmount\")){",
                          "pm.test(\"Initial amount is successfully set up and its value is \"+ pm.environment.get(\"initialAmount\"), function () {",
                          "    });",
                          "}",
                          "else{",
                          "    pm.test(\"This request is running more than once without creation of Initial Fee\", function () {",
                          "        throw new Error(\"Error is expected because we increment the value by 1 in the next req, when we come back in this request is expected these two values to not be equal\");",
                          "        });",
                          "    }",
                          "",
                          "    pm.test(\"Valiadtion of feeID, MerchantID, and itemID\", function () {",
                          "    pm.expect(responseData.id).to.be.eql(fee_id);",
                          "    console.log(\"this is assertion for Fee id\");",
                          "    pm.expect(responseData.item_id).to.be.eql(item_id);",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "c8554738-2efe-47cf-a827-14b7a4f0a27c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{authToken}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": []
                    },
                    "url": "https://{{baseUrl}}/v2/items/{{itemID}}/access-fees/{{feeID}}"
                  },
                  "response": []
                },
                {
                  "name": "PUT PPV Access fee",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e714c0de-d268-4295-aa96-604d223c7e84",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "pm.environment.set(\"feeID\", responseData.id);",
                          "let compareV1 = pm.environment.get(\"compareAmount1\");",
                          "let compareV2 = pm.environment.get(\"updatedAmount2\");",
                          "let compareV3 = pm.environment.get(\"amountFromResponse3\");",
                          "",
                          "",
                          "if((responseData.currency == \"USD\" || responseData.currency == \"EUR\" || responseData.currency == \"GBP\") && responseData.amount >= 0.99){",
                          "    pm.test(\"Verify amount and currency you have added is greater or equal to 0.99USD\", function () {",
                          "    //console.log(\"in if statement\");",
                          "    });",
                          "}",
                          "else {",
                          "    pm.test(\"Asset Type in response is different than 1\", function(){",
                          "            //postman.setNextRequest(\"ENTRY-ASSET CODE\");",
                          "            throw new Error(\"Amount and currency you have inserted is below 0.99 USD \");",
                          "        });  ",
                          "}",
                          "",
                          "pm.test(\"Verify Created Access Fee i of Type PPV\", function () {",
                          "    pm.expect(responseData.access_type.name).to.be.eql(\"ppv\");",
                          "    pm.expect(responseData.access_type.period).to.be.oneOf([\"day\",\"month\", \"year\", \"week\"]);",
                          "});",
                          "",
                          "pm.test(\"Check active environment is Staging\", function () {",
                          "    pm.expect(pm.environment.name).to.eql(\"Staging Env\");",
                          "});",
                          "",
                          "if(compareV1 != compareV2 && compareV2 != compareV3){",
                          "    let compareV4 = compareV2;",
                          "    console.log(\"this is old value \"+ compareV3);",
                          "    console.log(\"this is new value\" +compareV4);",
                          "    pm.test(\"Amount is successsfully updated\", function () {",
                          "});",
                          "}",
                          "else{",
                          "    pm.test(\"Amount is not successfully updated\", function () {",
                          "    throw new Error (\"Amouont is not updated\")",
                          "}",
                          "    )};",
                          "/*if(responseData.amount != compareV2 ){",
                          "    pm.test(\"You have successfully updated amount\", function () {",
                          "        console.log(responseData.amount);",
                          "});",
                          "}",
                          "else{",
                          "    pm.test(\"You are trying to update amount with the same value\", function () {",
                          "        throw new Error (\"test failed because you are updating same value\")",
                          "});",
                          "}",
                          "",
                          "*/"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "4e0ecc8e-e080-4696-ba93-f4068bd90206",
                        "exec": [
                          "let amountFromResponse = pm.environment.get(\"amountFromResponse3\")+1;// this line of code is used in order collection to be executed n iterations",
                          "let updatedAmount = amountFromResponse;",
                          "//console.log(updatedAmount2);",
                          "pm.environment.set(\"updatedAmount2\", updatedAmount);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "20886397-92f4-40ea-99d3-354945191eb1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{authToken}}"
                      }
                    },
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "key": "access_type_id",
                          "value": "1",
                          "type": "text"
                        },
                        {
                          "key": "amount",
                          "value": "{{updatedAmount2}}",
                          "type": "text"
                        },
                        {
                          "key": "currency",
                          "value": "GBP",
                          "type": "text"
                        },
                        {
                          "key": "description",
                          "value": "access fee test1",
                          "type": "text"
                        },
                        {
                          "key": "trial_period_quantity",
                          "value": "1",
                          "type": "text"
                        },
                        {
                          "key": "trial_period_period",
                          "value": "days",
                          "type": "text"
                        },
                        {
                          "key": "trial_period_description",
                          "value": "trial one hour",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "https://{{baseUrl}}/v2/items/{{itemID}}/access-fees/{{feeID}}"
                  },
                  "response": []
                },
                {
                  "name": "getAccessFees",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "cb7c6d35-6cdd-4076-b91f-09a1ba69cb1b",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "",
                          "let findID;",
                          "const localFeeId = pm.environment.get(\"feeID\");",
                          "const localItemID = pm.environment.get(\"itemID\");",
                          "",
                          "    const idObject = responseData.find(i => i.id == localFeeId);",
                          "    const merch = idObject ? idObject.merchant_id : 'not found';",
                          "    const itemID = idObject ? idObject.item_id : 'not found';",
                          "    console.log(idObject);",
                          "    console.log(merch);",
                          "    console.log(itemID);",
                          "",
                          "",
                          "for (filter of responseData){ // iterate every value in the array",
                          "    console.log(filter);",
                          "    if(filter.id == localFeeId){",
                          "        findID = filter;",
                          "        console.log(findID);",
                          "    }",
                          "}",
                          "pm.test(\"Verification that access fee exist for this particular MerchantID and iitemID\", function(){",
                          "    pm.expect(findID.id).to.eql(localFeeId)",
                          "    pm.expect(findID.merchant_id).to.eql(merch);",
                          "    pm.expect(findID.item_id).to.eql(localItemID);",
                          "});",
                          "/*pm.test(\"Status code is 200\", function () {",
                          "    pm.expect(responseData[0].id).to.be.eql(24008);",
                          "})*/"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "0b4142d0-02e6-4aa6-8928-a9450d60182d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": "https://{{baseUrl}}/v2/items/{{itemID}}/access-fees"
                  },
                  "response": []
                },
                {
                  "name": "Delete AccessFee",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "039243b8-35b9-437a-9074-b33e1c9dd3b9",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "",
                          "",
                          "pm.test(\"Fee with ID \" + pm.environment.get(\"feeID\") + \" was successfully deleted\", function () {",
                          "    pm.expect(responseData.message).to.eql(\"Resource deleted successfully.\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "0aa5f210-c063-4c19-b9f6-257efb0bc5fa",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{authToken}}"
                      }
                    },
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": []
                    },
                    "url": "https://{{baseUrl}}/v2/items/{{itemID}}/access-fees/{{feeID}}"
                  },
                  "response": []
                },
                {
                  "name": "PUT event_details data",
                  "id": "a5ecbbd7-c2c7-418d-97cb-d8db6ae8e6ce",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{authToken}}"
                      }
                    },
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "key": "id",
                          "value": "{{eventDetailsID}}",
                          "type": "text"
                        },
                        {
                          "key": "event_date",
                          "value": "2021-10-11T15:04:05.52Z",
                          "type": "text"
                        },
                        {
                          "key": "industry",
                          "value": "Business",
                          "type": "text"
                        },
                        {
                          "key": "content_category",
                          "value": "live",
                          "type": "text"
                        },
                        {
                          "key": "is_advertised",
                          "value": "false",
                          "type": "text"
                        },
                        {
                          "key": "expected_viewership",
                          "value": "32",
                          "type": "text"
                        },
                        {
                          "key": "event_description",
                          "value": "test description",
                          "type": "text"
                        },
                        {
                          "key": "replay_available",
                          "value": "true",
                          "type": "text"
                        },
                        {
                          "key": "event_name",
                          "value": "name of the event",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "https://{{baseUrl}}/v2/items/{{itemID}}/event_details"
                  },
                  "response": []
                }
              ],
              "id": "295c8aa4-871b-4235-bd5a-5b25f2b0c418"
            },
            {
              "name": "Season asset",
              "item": [
                {
                  "name": "Authenticate MP",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "ba2cbb1a-178e-414a-b621-d4103efabb21",
                        "exec": [
                          "checkEnv = pm.environment.get(\"baseUrl\")\r",
                          "\r",
                          "if(checkEnv = 'https://staging-v2.inplayer.com')\r",
                          "{\r",
                          "    pm.collectionVariables.set(\"mp_UserName_SanitySeason\", \"elena_gj_automation@mail.com\");//username for loging to MP\r",
                          "    pm.collectionVariables.set(\"clientId01_SanitySeason\", \"3b39b5ab-b5fc-4ba3-b770-73155d20e61f\");//client id for loging to MP\r",
                          "}else{\r",
                          "    if(checkEnv = 'https://services.inplayer.com')\r",
                          "    {\r",
                          "    pm.collectionVariables.set(\"mp_UserName_SanitySeason\",  \"elena.gjeorgievska@inplayer.com\");//username for loging to MP\r",
                          "    pm.collectionVariables.set(\"clientId01_SanitySeason\", \"3b39b5ab-b5fc-4ba3-b770-73155d20e61f\");//client id for loging to MP\r",
                          "    }\r",
                          "else{\r",
                          "        //here to be populated Customer ID and Merchant ID for the given dev environment\r",
                          "    }\r",
                          "}\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "f69b56e1-69ea-4ac4-889e-a927cc2414d8",
                        "exec": [
                          "let responseData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.collectionVariables.set(\"mp_AccessToken_SanitySeason\", responseData.access_token)\r",
                          "pm.collectionVariables.set(\"merchantId_SanitySeason\", responseData.account.id)\r",
                          "\r",
                          "pm.test(\"Request's code to be OK, one of 200, 201, 202\", function (){\r",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "c34e36be-e775-4018-956a-dc82802d0954",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "key": "username",
                          "value": "{{mp_UserName_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "password",
                          "value": "test1234",
                          "type": "text"
                        },
                        {
                          "key": "client_id",
                          "value": "{{clientId01_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "grant_type",
                          "value": "password",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{baseUrl}}/v2/accounts/authenticate"
                  },
                  "response": []
                },
                {
                  "name": "Create season asset",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "a3bf53ce-e5eb-40f7-b339-dda30468eb42",
                        "exec": [
                          "pm.collectionVariables.get(\"mp_AccessToken_SanitySeason\");\r",
                          "\r",
                          "let randomNumber = Math.floor(Math.random() * 10000);\r",
                          "pm.collectionVariables.set(\"itemTitle_SanitySeason\", \"autom. season asset \" +`${randomNumber}`+\" el gj\");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "0801abe3-4830-4c99-962d-90cebfe563f8",
                        "exec": [
                          "const responseData = JSON.parse(responseBody);\r",
                          "pm.collectionVariables.set(\"itemId_SanitySeason\", responseData.id);\r",
                          "\r",
                          "pm.test(\"Request's code to be OK, one of 200, 201, 202\", function (){\r",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "71093456-d88f-4a9e-a029-f864e1d7f019",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{mp_AccessToken_SanitySeason}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "key": "item_type",
                          "value": "qbrick_asset",
                          "type": "text"
                        },
                        {
                          "key": "title",
                          "value": "{{itemTitle_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "metadata[preview_description]",
                          "value": "{{itemTitle_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "metadata[preview_title]",
                          "value": "{{itemTitle_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "metadata[paywall_cover_photo]",
                          "value": "https://inplayer-paywall-v2.s3.amazonaws.com/images/ip-preview-premium.jpg",
                          "type": "text"
                        },
                        {
                          "key": "metadata[preview_button_label]",
                          "value": "Buy",
                          "type": "text"
                        },
                        {
                          "key": "metadata[preview_image_name]",
                          "value": "preview image",
                          "type": "text"
                        },
                        {
                          "key": "metadata[thumbnail_image]",
                          "value": "https://inplayer-paywall-v2.s3.amazonaws.com/images/ip-preview-premium.jpg",
                          "type": "text"
                        },
                        {
                          "key": "metadata[thumbnail_image_name]",
                          "value": "thumbnail image",
                          "type": "text"
                        },
                        {
                          "key": "access_control_type_id",
                          "value": "1",
                          "type": "text"
                        },
                        {
                          "key": "event_type",
                          "value": "",
                          "type": "text"
                        },
                        {
                          "key": "template_id",
                          "value": "0",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{baseUrl}}/v2/items"
                  },
                  "response": []
                },
                {
                  "name": "Validation for `season_price_amount`",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9e48a923-284d-4b5d-b911-a8b7e8e8d1fe",
                        "exec": [
                          "const responseData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Check error message, expect 400 and validation for `season_price_amount`\", function (){\r",
                          "    pm.expect(responseData.code).to.be.eql(400);\r",
                          "    pm.expect(responseData.message).to.be.eql(\"If access fee type is set as Season, the field `season_price_amount` is required.\")\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "ec9c8a08-aab5-4bc1-8d6e-eaf18392a955",
                        "exec": [
                          "checkEnv = pm.environment.get(\"baseUrl\")\r",
                          "\r",
                          "if(checkEnv == 'https://staging-v2.inplayer.com')\r",
                          "        {\r",
                          "        let getRandomArbitrary  = (Math.random() * (3 - 1) + 1);\r",
                          "        pm.collectionVariables.set(\"itemTitle_SanitySeason\", \"auto. season\"+`${getRandomArbitrary}`+\" el gj\");\r",
                          "        pm.collectionVariables.set(\"accessType_SanitySeason\", \"118\");\r",
                          "        pm.collectionVariables.set(\"accessFeeAmount_SanitySeason\", getRandomArbitrary);  \r",
                          "        pm.collectionVariables.set(\"seasonStartsAt_SanitySeason\",\"2030-10-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonExpiresAt_SanitySeason\",\"2031-03-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonAnchorDate_SanitySeason\",\"2031-10-22T10:00:00.000Z\");\r",
                          "        }\r",
                          "    else{\r",
                          "        if(checkEnv == 'https://services.inplayer.com')\r",
                          "        {\r",
                          "        let getRandomArbitrary  = (Math.random() * (3 - 1) + 1);\r",
                          "        pm.collectionVariables.set(\"itemTitle_SanitySeason\", \"auto. season\"+`${getRandomArbitrary}`+\" el gj\");\r",
                          "        pm.collectionVariables.set(\"accessType_SanitySeason\", \"3877\");\r",
                          "        pm.collectionVariables.set(\"accessFeeAmount_SanitySeason\", getRandomArbitrary);\r",
                          "        pm.collectionVariables.set(\"seasonStartsAt_SanitySeason\",\"2030-10-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonExpiresAt_SanitySeason\",\"2031-03-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonAnchorDate_SanitySeason\",\"2031-10-22T10:00:00.000Z\");\r",
                          "        }\r",
                          "    else{\r",
                          "            //here to be populated Customer ID and Merchant ID for the given dev environment\r",
                          "        }\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "626c4174-fa0b-40dd-af48-ecb11147bad6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{mp_AccessToken_SanitySeason}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "key": "access_type_id",
                          "value": "{{accessType_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "description",
                          "value": "{{itemTitle_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "amount",
                          "value": "{{accessFeeAmount_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "currency",
                          "value": "USD",
                          "type": "text"
                        },
                        {
                          "key": "trial_period_quantity",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "trial_period_period",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "setup_fee_amount",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "setup_fee_description",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "starts_at",
                          "value": "{{seasonStartsAt_SanitySeason}}",
                          "type": "text",
                          "description": "2021-10-22T10:00:00.000Z/as \\\"2006-01-02T15:04:05Z07:00\\"
                        },
                        {
                          "key": "expires_at",
                          "value": "{{seasonExpiresAt_SanitySeason}}",
                          "type": "text",
                          "description": "2021-10-30T10:00:00.000Z"
                        },
                        {
                          "key": "season_anchor_date",
                          "value": "{{seasonAnchorDate_SanitySeason}}",
                          "type": "text",
                          "description": "2021-10-31T11:00:00.000Z"
                        },
                        {
                          "key": "season_price_amount",
                          "value": "{{seasonFeeAmount_SanitySeason}}",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "season_off_season_access",
                          "value": "true",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{baseUrl}}/v2/items/{{itemId_SanitySeason}}/access-fees"
                  },
                  "response": []
                },
                {
                  "name": "Validation for `season_anchor_date`",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "659b8531-4398-4303-8eba-a86bd6fc0c93",
                        "exec": [
                          "const responseData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Check error message, expect 400 and validation for `season_anchor_date`\", function (){\r",
                          "    pm.expect(responseData.code).to.be.eql(400);\r",
                          "    pm.expect(responseData.message).to.be.eql(\"If access fee type is set as Season, the field `season_anchor_date` is required.\")\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "4db3da47-53f0-4f10-9795-a893703e1486",
                        "exec": [
                          "checkEnv = pm.environment.get(\"baseUrl\")\r",
                          "\r",
                          "if(checkEnv == 'https://staging-v2.inplayer.com')\r",
                          "        {\r",
                          "        let getRandomArbitrary  = (Math.random() * (3 - 1) + 1);\r",
                          "        pm.collectionVariables.set(\"itemTitle_SanitySeason\", \"auto. season\"+`${getRandomArbitrary}`+\" el gj\");\r",
                          "        pm.collectionVariables.set(\"accessType_SanitySeason\", \"118\");\r",
                          "        pm.collectionVariables.set(\"accessFeeAmount_SanitySeason\", getRandomArbitrary);  \r",
                          "        pm.collectionVariables.set(\"seasonStartsAt_SanitySeason\",\"2030-10-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonExpiresAt_SanitySeason\",\"2031-03-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonAnchorDate_SanitySeason\",\"2031-10-22T10:00:00.000Z\");\r",
                          "        }\r",
                          "    else{\r",
                          "        if(checkEnv == 'https://services.inplayer.com')\r",
                          "        {\r",
                          "        let getRandomArbitrary  = (Math.random() * (3 - 1) + 1);\r",
                          "        pm.collectionVariables.set(\"itemTitle_SanitySeason\", \"auto. season\"+`${getRandomArbitrary}`+\" el gj\");\r",
                          "        pm.collectionVariables.set(\"accessType_SanitySeason\", \"3877\");\r",
                          "        pm.collectionVariables.set(\"accessFeeAmount_SanitySeason\", getRandomArbitrary);\r",
                          "        pm.collectionVariables.set(\"seasonStartsAt_SanitySeason\",\"2030-10-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonExpiresAt_SanitySeason\",\"2031-03-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonAnchorDate_SanitySeason\",\"2031-10-22T10:00:00.000Z\");\r",
                          "        }\r",
                          "    else{\r",
                          "            //here to be populated Customer ID and Merchant ID for the given dev environment\r",
                          "        }\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "ba5eb268-6414-4958-b098-beca8c746030",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{mp_AccessToken_SanitySeason}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "key": "access_type_id",
                          "value": "{{accessType_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "description",
                          "value": "{{itemTitle_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "amount",
                          "value": "{{accessFeeAmount_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "currency",
                          "value": "USD",
                          "type": "text"
                        },
                        {
                          "key": "trial_period_quantity",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "trial_period_period",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "setup_fee_amount",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "setup_fee_description",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "starts_at",
                          "value": "{{seasonStartsAt_SanitySeason}}",
                          "type": "text",
                          "description": "2021-10-22T10:00:00.000Z/as \\\"2006-01-02T15:04:05Z07:00\\"
                        },
                        {
                          "key": "expires_at",
                          "value": "{{seasonExpiresAt_SanitySeason}}",
                          "type": "text",
                          "description": "2021-10-30T10:00:00.000Z"
                        },
                        {
                          "key": "season_anchor_date",
                          "value": "{{seasonAnchorDate_SanitySeason}}",
                          "type": "text",
                          "description": "2021-10-31T11:00:00.000Z",
                          "disabled": true
                        },
                        {
                          "key": "season_price_amount",
                          "value": "{{seasonFeeAmount_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "season_off_season_access",
                          "value": "true",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{baseUrl}}/v2/items/{{itemId_SanitySeason}}/access-fees"
                  },
                  "response": []
                },
                {
                  "name": "Validation for `season_off_season_access`",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "23583574-78c1-4422-bac5-f5f14f05f109",
                        "exec": [
                          "const responseData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Check error message, expect 400 and validation for `season_off_season_access`\", function (){\r",
                          "    pm.expect(responseData.code).to.be.eql(400);\r",
                          "    pm.expect(responseData.message).to.be.eql(\"If access fee type is set as Season, the field `season_off_season_access` is required.\")\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "8c319f06-b437-4d8a-a502-55338e19f564",
                        "exec": [
                          "checkEnv = pm.environment.get(\"baseUrl\")\r",
                          "\r",
                          "if(checkEnv == 'https://staging-v2.inplayer.com')\r",
                          "        {\r",
                          "        let getRandomArbitrary  = (Math.random() * (3 - 1) + 1);\r",
                          "        pm.collectionVariables.set(\"itemTitle_SanitySeason\", \"auto. season\"+`${getRandomArbitrary}`+\" el gj\");\r",
                          "        pm.collectionVariables.set(\"accessType_SanitySeason\", \"118\");\r",
                          "        pm.collectionVariables.set(\"accessFeeAmount_SanitySeason\", getRandomArbitrary);  \r",
                          "        pm.collectionVariables.set(\"seasonStartsAt_SanitySeason\",\"2030-10-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonExpiresAt_SanitySeason\",\"2031-03-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonAnchorDate_SanitySeason\",\"2031-10-22T10:00:00.000Z\");\r",
                          "        }\r",
                          "    else{\r",
                          "        if(checkEnv == 'https://services.inplayer.com')\r",
                          "        {\r",
                          "        let getRandomArbitrary  = (Math.random() * (3 - 1) + 1);\r",
                          "        pm.collectionVariables.set(\"itemTitle_SanitySeason\", \"auto. season\"+`${getRandomArbitrary}`+\" el gj\");\r",
                          "        pm.collectionVariables.set(\"accessType_SanitySeason\", \"3877\");\r",
                          "        pm.collectionVariables.set(\"accessFeeAmount_SanitySeason\", getRandomArbitrary);\r",
                          "        pm.collectionVariables.set(\"seasonStartsAt_SanitySeason\",\"2030-10-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonExpiresAt_SanitySeason\",\"2031-03-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonAnchorDate_SanitySeason\",\"2031-10-22T10:00:00.000Z\");\r",
                          "        }\r",
                          "    else{\r",
                          "            //here to be populated Customer ID and Merchant ID for the given dev environment\r",
                          "        }\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "1f27b53d-7685-4303-b4b7-52ff5648915d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{mp_AccessToken_SanitySeason}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "key": "access_type_id",
                          "value": "{{accessType_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "description",
                          "value": "{{itemTitle_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "amount",
                          "value": "{{accessFeeAmount_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "currency",
                          "value": "USD",
                          "type": "text"
                        },
                        {
                          "key": "trial_period_quantity",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "trial_period_period",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "setup_fee_amount",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "setup_fee_description",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "starts_at",
                          "value": "{{seasonStartsAt_SanitySeason}}",
                          "type": "text",
                          "description": "2021-10-22T10:00:00.000Z/as \\\"2006-01-02T15:04:05Z07:00\\"
                        },
                        {
                          "key": "expires_at",
                          "value": "{{seasonExpiresAt_SanitySeason}}",
                          "type": "text",
                          "description": "2021-10-30T10:00:00.000Z"
                        },
                        {
                          "key": "season_anchor_date",
                          "value": "{{seasonAnchorDate_SanitySeason}}",
                          "type": "text",
                          "description": "2021-10-31T11:00:00.000Z"
                        },
                        {
                          "key": "season_price_amount",
                          "value": "{{seasonFeeAmount_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "season_off_season_access",
                          "value": "true",
                          "type": "text",
                          "disabled": true
                        }
                      ]
                    },
                    "url": "{{baseUrl}}/v2/items/{{itemId_SanitySeason}}/access-fees"
                  },
                  "response": []
                },
                {
                  "name": "Create season access fee success",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5dd9f878-fa02-4604-ac97-370b184fcd62",
                        "exec": [
                          "const responseData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Request's code to be OK, one of 200, 201, 202\", function (){\r",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
                          "});\r",
                          "\r",
                          "if(pm.response.to.have.status(200))\r",
                          "{\r",
                          "pm.collectionVariables.set(\"accessFeeId_SanitySeason\", responseData.id)\r",
                          "\r",
                          "let varAmount = pm.collectionVariables.get(\"accessFeeAmount_SanitySeason\",)\r",
                          "let varAmount2 = utils.formatFunction(varAmount, 2)\r",
                          "pm.collectionVariables.set(\"refundAmount_SanitySeason\", `${varAmount2}`)\r",
                          "\r",
                          "let varSeasonAmount = pm.collectionVariables.get(\"seasonFeeAmount_SanitySeason\")\r",
                          "let varSeasonAmount2 = utils.formatFunction(varSeasonAmount, 2)\r",
                          "pm.collectionVariables.set(\"refundSeasonAmount_SanitySeason\", `${varSeasonAmount2}`)\r",
                          "\r",
                          "pm.test(\"access fee id is true and number\", function(){\r",
                          "   pm.expect(responseData.id).to.be.a(\"Number\");\r",
                          "});\r",
                          "\r",
                          "pm.test(\"access fee is 1 year season\", function(){\r",
                          "   pm.expect(responseData.access_type.name).to.be.eql(\"season\");\r",
                          "   pm.expect(responseData.access_type.quantity).to.be.eql(1);\r",
                          "   pm.expect(responseData.access_type.period).to.be.eql(\"year\");\r",
                          "});\r",
                          "\r",
                          "let varAmountB = pm.collectionVariables.get(\"accessFeeAmount_SanitySeason\",)\r",
                          "let varAmountB2 = utils.formatFunction(varAmountB, 4)\r",
                          "\r",
                          "let varSeasonAmountB = pm.collectionVariables.get(\"seasonFeeAmount_SanitySeason\")\r",
                          "let varSeasonAmountB2 = utils.formatFunction(varSeasonAmountB, 4)\r",
                          "\r",
                          "pm.test(\"seasonal_fee is set\", function(){\r",
                          "   pm.expect(responseData.seasonal_fee.id).to.be.a(\"Number\");\r",
                          "   pm.expect(responseData.seasonal_fee.current_price_amount).to.be.a(\"Number\");\r",
                          "   pm.expect(responseData.seasonal_fee.current_price_amount).to.be.eql(varSeasonAmountB2);\r",
                          "   pm.expect(responseData.seasonal_fee.anchor_date).to.be.a(\"Number\");\r",
                          "   pm.expect(responseData.seasonal_fee.created_at).to.be.a(\"Number\");\r",
                          "   pm.expect(responseData.seasonal_fee.updated_at).to.be.a(\"Number\");\r",
                          "   pm.expect(responseData.seasonal_fee.off_season_access).to.be.eql(true);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"current_phase is set\", function(){\r",
                          "   pm.expect(responseData.current_phase.id).to.be.a(\"Number\");\r",
                          "   pm.expect(responseData.current_phase.status).to.be.eql(\"locked-in\");\r",
                          "   pm.expect(responseData.current_phase.current_price).to.be.a(\"Number\");\r",
                          "   pm.expect(responseData.current_phase.current_price).to.be.eql(varAmountB2);\r",
                          "   pm.expect(responseData.current_phase.season_price).to.be.a(\"Number\");\r",
                          "   pm.expect(responseData.current_phase.season_price).to.be.eql(varSeasonAmountB2);\r",
                          "   pm.expect(responseData.current_phase.anchor_date).to.be.a(\"Number\");\r",
                          "   pm.expect(responseData.current_phase.created_at).to.be.a(\"Number\");\r",
                          "   pm.expect(responseData.current_phase.updated_at).to.be.a(\"Number\");\r",
                          "});\r",
                          "};\r",
                          "   "
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "839d9a11-16e1-40df-bdf2-612bf7601326",
                        "exec": [
                          "checkEnv = pm.environment.get(\"baseUrl\")\r",
                          "\r",
                          "if(checkEnv == 'https://staging-v2.inplayer.com')\r",
                          "        {\r",
                          "        let getRandomArbitrary  = (Math.random() * (3 - 1) + 1);\r",
                          "        pm.collectionVariables.set(\"itemTitle_SanitySeason\", \"auto. season\"+`${getRandomArbitrary}`+\" el gj\");\r",
                          "        pm.collectionVariables.set(\"accessType_SanitySeason\", \"118\");\r",
                          "        pm.collectionVariables.set(\"accessFeeAmount_SanitySeason\", getRandomArbitrary);  \r",
                          "        pm.collectionVariables.set(\"seasonFeeAmount_SanitySeason\", getRandomArbitrary+getRandomArbitrary); \r",
                          "        pm.collectionVariables.set(\"seasonStartsAt_SanitySeason\",\"2030-10-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonExpiresAt_SanitySeason\",\"2031-03-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonAnchorDate_SanitySeason\",\"2031-10-22T10:00:00.000Z\");\r",
                          "        }\r",
                          "    else{\r",
                          "        if(checkEnv == 'https://services.inplayer.com')\r",
                          "        {\r",
                          "        let getRandomArbitrary  = (Math.random() * (3 - 1) + 1);\r",
                          "        pm.collectionVariables.set(\"itemTitle_SanitySeason\", \"auto. season\"+`${getRandomArbitrary}`+\" el gj\");\r",
                          "        pm.collectionVariables.set(\"accessType_SanitySeason\", \"3877\");\r",
                          "        pm.collectionVariables.set(\"accessFeeAmount_SanitySeason\", getRandomArbitrary);\r",
                          "        pm.collectionVariables.set(\"seasonFeeAmount_SanitySeason\", getRandomArbitrary+getRandomArbitrary); \r",
                          "        pm.collectionVariables.set(\"seasonStartsAt_SanitySeason\",\"2030-10-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonExpiresAt_SanitySeason\",\"2031-03-22T10:00:00.000Z\");\r",
                          "        pm.collectionVariables.set(\"seasonAnchorDate_SanitySeason\",\"2031-10-22T10:00:00.000Z\");\r",
                          "        }\r",
                          "    else{\r",
                          "            //here to be populated Customer ID and Merchant ID for the given dev environment\r",
                          "        }\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "8513186e-cc1b-4560-83b8-a861e79eb788",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{mp_AccessToken_SanitySeason}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "key": "access_type_id",
                          "value": "{{accessType_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "description",
                          "value": "{{itemTitle_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "amount",
                          "value": "{{accessFeeAmount_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "currency",
                          "value": "USD",
                          "type": "text"
                        },
                        {
                          "key": "trial_period_quantity",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "trial_period_period",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "setup_fee_amount",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "setup_fee_description",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "starts_at",
                          "value": "{{seasonStartsAt_SanitySeason}}",
                          "type": "text",
                          "description": "2021-10-22T10:00:00.000Z/as \\\"2006-01-02T15:04:05Z07:00\\"
                        },
                        {
                          "key": "expires_at",
                          "value": "{{seasonExpiresAt_SanitySeason}}",
                          "type": "text",
                          "description": "2021-10-30T10:00:00.000Z"
                        },
                        {
                          "key": "season_anchor_date",
                          "value": "{{seasonAnchorDate_SanitySeason}}",
                          "type": "text",
                          "description": "2021-10-31T11:00:00.000Z"
                        },
                        {
                          "key": "season_price_amount",
                          "value": "{{seasonFeeAmount_SanitySeason}}",
                          "type": "text"
                        },
                        {
                          "key": "season_off_season_access",
                          "value": "true",
                          "type": "text"
                        }
                      ]
                    },
                    "url": "{{baseUrl}}/v2/items/{{itemId_SanitySeason}}/access-fees"
                  },
                  "response": []
                }
              ],
              "id": "de38e4d3-2315-4044-854d-576138ff8d9b"
            }
          ],
          "id": "09350618-ecfe-4e49-8357-099145210f7d"
        },
        {
          "name": "createAssetsStage",
          "item": [
            {
              "name": "Authenticate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a503642a-2f53-49b5-882a-9eee26c944ab",
                    "exec": [
                      "let responseData = JSON.parse(responseBody);",
                      "let username = responseData.account.email;",
                      "let validate = pm.variables.get(\"realUser\")",
                      "let Order;",
                      "",
                      "",
                      "console.log(\"adding auth Token value\")",
                      "pm.environment.set(\"authToken\", responseData.access_token) // store Token into variable",
                      "",
                      "pm.test(\"Validate user is Active\", function () { // account is active",
                      "    pm.expect(responseData.account.active).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Validate Correct user is logged in\", function () {",
                      "    pm.expect(username).to.be.eql(`${validate}`)",
                      "});",
                      "",
                      "pm.test(\"Validate email is equal to username\", function () {",
                      "    pm.expect(responseData.account.email).to.be.eql(responseData.account.username);",
                      "});",
                      "",
                      "for (let filter of responseData.account.meta){ // iteration for every value under meta array",
                      "    console.log(filter);",
                      "    if(filter.key == \"register_source\"){",
                      "        Order = filter;",
                      "        console.log(Order);",
                      "    }",
                      "}",
                      "",
                      "pm.test(\"verify key-value are correct if User is registered on our Platform\", function(){ // validate register source on platform is inplayer",
                      "    pm.expect(Order.key).to.eql(\"register_source\"),",
                      "    pm.expect(Order.value).to.be.eql(\"inplayer\");",
                      "});",
                      "",
                      "pm.test(\"verify key-value are correct if User is registered on our Platform\", function(){ // validate register source on platform is inplayer",
                      "    pm.expect(Order.key).to.eql(\"register_source\"),",
                      "    pm.expect(Order.value).to.be.eql(\"inplayer\");",
                      "});",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "58aacca8-db34-4105-a67e-b1ff5066a295",
                    "exec": [
                      "let usernamev1 = \"oliver.pinev@inplayer.com\";",
                      "",
                      "pm.environment.set(\"realUser\", usernamev1);//save username before login on platform",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "b9e4ed74-df24-4497-b3b9-a6b0b05dd016",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "3b39b5ab-b5fc-4ba3-b770-73155d20e61f",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "password",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "oliver.pinev@inplayer.com",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "Password123",
                      "type": "text"
                    }
                  ]
                },
                "url": "https://{{baseUrl}}/v2/accounts/authenticate"
              },
              "response": []
            },
            {
              "name": "Create-PaidAsset",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "592b9e0f-5b7e-468c-ac3a-a1035501b5d5",
                    "exec": [
                      "const responseData = JSON.parse(responseBody);",
                      "let evtDtls = responseData.event_details;",
                      "pm.environment.set(\"itemID\", responseData.id);",
                      "pm.environment.set(\"merchantUUID\", responseData.merchant_uuid);",
                      "pm.environment.set(\"eventDetailsID\", responseData.event_details.id);",
                      "",
                      "    ",
                      "    if (responseData.access_control_type.id == 1 && responseData.item_type.id == 2){ //item type for html asset is 2",
                      "    pm.test(\"Validate asset type is Paid\", function () {",
                      "        console.log(\"inside if\")",
                      "        //postman.setNextRequest(\"CREATE-Positive_PRIVATE_ASSET CODE\");",
                      "        });",
                      "    }",
                      "    else{",
                      "            pm.test(\"Asset Type in response is different than 1\", function(){",
                      "           // postman.setNextRequest(\"ENTRY-ASSET CODE\");",
                      "            throw new Error(\"access_control_type and item_type are not equal\");",
                      "        });  ",
                      "",
                      "    }",
                      "    if (responseData.item_type.content_type == \"html\" && responseData.item_type.name == \"html_asset\"){",
                      "    pm.test(\"Assertion that HTML asset were created\", function () {",
                      "        });",
                      "    }",
                      "    pm.test(\"Validate default/initial value for event_type equals other\", function () {",
                      "    pm.expect(responseData.event_type).to.be.eql(\"live\");",
                      "});",
                      "",
                      "    pm.test(\"Verifying initial values for event details object\", function () {",
                      "    pm.expect(evtDtls.event_name).to.be.eql(\"\"); // validate empty string for event_name",
                      "    pm.expect(evtDtls.event_name).to.be.a(\"string\"); // validate value type for event_name",
                      "    console.info(\"event name is empty\");",
                      "    pm.expect(evtDtls.event_description).to.be.eql(\"\");",
                      "    pm.expect(evtDtls.event_description).to.be.a(\"string\");",
                      "    console.log(typeof evtDtls.event_description);",
                      "    pm.expect(evtDtls.content_category).to.be.eql(\"\");",
                      "    pm.expect(evtDtls.content_category).to.be.a(\"string\");",
                      "    pm.expect(evtDtls.web_page).to.be.eql(\"\");",
                      "    pm.expect(evtDtls.web_page).to.be.a(\"string\");",
                      "    pm.expect(evtDtls.replay_available).to.be.eql(null);",
                      "    console.log(typeof evtDtls.replay_available);",
                      "    pm.expect(evtDtls.replay_available).to.be.null;",
                      "    pm.expect(evtDtls.expected_viewership).to.be.eql(0);",
                      "    pm.expect(evtDtls.expected_viewership).to.be.a(\"number\");",
                      "    pm.expect(evtDtls.is_advertised).to.be.eql(false);",
                      "    pm.expect(evtDtls.is_advertised).to.be.a(\"boolean\");",
                      "    pm.expect(evtDtls.industry).to.be.eql(\"\");",
                      "    pm.expect(evtDtls.industry).to.be.a(\"string\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "86475879-6d5e-49a6-b64e-db769e05f849",
                    "exec": [
                      "//generate random code from 1-3",
                      "let randomNumber = Math.floor(Math.random() * 10000);",
                      "pm.environment.set(\"titlePaidAsset\", \"Paid Asset\"+`${randomNumber}`);",
                      "pm.environment.set(\"paid\", 1);",
                      "//let rndInt = Math.floor(Math.random() * 3) + 2",
                      "    //console.log(rndInt)",
                      "   // pm.environment.set(\"rndControlTypeID\", rndInt);",
                      "",
                      "//postman.setNextRequest(\"CREATE-Positive_PRIVATE_ASSET CODE\");",
                      "//postman.setNextRequest(\"ENTRY-ASSET CODE\");",
                      "//postman.setNextRequest(\"Authenticate\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "06211d9d-2082-46d2-91a9-5a7fd5024a3a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "item_type",
                      "value": "html_asset",
                      "type": "text"
                    },
                    {
                      "key": "access_control_type_id",
                      "value": "{{paid}}",
                      "type": "text"
                    },
                    {
                      "key": "title",
                      "value": "{{titlePaidAsset}}",
                      "type": "text"
                    },
                    {
                      "key": "is_giftable",
                      "value": "1",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "gift_description",
                      "value": "\"est gift desc\"",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "event_type",
                      "value": "live",
                      "type": "text"
                    }
                  ]
                },
                "url": "https://staging-v2.inplayer.com/v2/items",
                "description": "This POST request create an Asset of type Live and have implemented some Assertion"
              },
              "response": []
            }
          ],
          "id": "ebdc8287-a3dc-4324-840f-1d96a70d54bf",
          "description": "This folder consist of basic API calls in order to easily generate Records/Assets for testing purpose. Using this folder we can create assets in timely manner"
        },
        {
          "name": "Freemium",
          "item": [
            {
              "name": "Authenticate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a76605f-f10f-47ba-b4f1-4930ccca3d93",
                    "exec": [
                      "let responseData = JSON.parse(responseBody);",
                      "let username = responseData.account.email;",
                      "let validate = pm.variables.get(\"realUser\")",
                      "let Order;",
                      "",
                      "",
                      "console.log(\"adding auth Token value\")",
                      "pm.environment.set(\"authToken\", responseData.access_token) // store Token into variable",
                      "",
                      "pm.test(\"Validate user is Active\", function () { // account is active",
                      "    pm.expect(responseData.account.active).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Validate Correct user is logged in\", function () {",
                      "    pm.expect(username).to.be.eql(`${validate}`)",
                      "});",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Validate email is equal to username\", function () {",
                      "    pm.expect(responseData.account.email).to.be.eql(responseData.account.username);",
                      "});",
                      "",
                      "for (let filter of responseData.account.meta){ // iteration for every value under meta array",
                      "    console.log(filter);",
                      "    if(filter.key == \"register_source\"){",
                      "        Order = filter;",
                      "        console.log(Order);",
                      "    }",
                      "}",
                      "",
                      "pm.test(\"verify key-value are correct\", function(){ // validate register source on platform is inplayer",
                      "    pm.expect(Order.key).to.eql(\"register_source\"),",
                      "    pm.expect(Order.value).to.be.eql(\"inplayer\");",
                      "});",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5bdf0970-fd19-4abc-b99b-12fe96e7810c",
                    "exec": [
                      "let usernamev1 = \"oliver.pinev@inplayer.com\";",
                      "",
                      "pm.environment.set(\"realUser\", usernamev1);//save username before login on platform",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "3c0c297f-97af-4447-93ea-63931a18af32",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "3b39b5ab-b5fc-4ba3-b770-73155d20e61f",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "password",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "oliver.pinev@inplayer.com",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "Password123",
                      "type": "text"
                    }
                  ]
                },
                "url": "https://{{baseUrl}}/v2/accounts/authenticate"
              },
              "response": []
            },
            {
              "name": "Create-FreemiumAsset",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e2b47556-c9ea-4b5e-a32e-89b61e1e2e8f",
                    "exec": [
                      "let responseData = JSON.parse(responseBody);",
                      "pm.environment.set(\"itemID\", responseData.id);",
                      "    ",
                      "    if (responseData.access_control_type.id == 2 && responseData.item_type.id ==2){",
                      "    pm.test(\"Validate asset type is Code (Passcode)\", function () {",
                      "        postman.setNextRequest(\"CREATE-Positive_PRIVATE_ASSET CODE\");",
                      "        });",
                      "    }",
                      "    else{",
                      "            pm.test(\"Generated number is different than 2\", function(){",
                      "            postman.setNextRequest(\"ENTRY-ASSET CODE\");",
                      "            throw new Error(\"Generate number again\");",
                      "        });  ",
                      "",
                      "    }",
                      "    if (responseData.item_type.content_type == \"html\" && responseData.item_type.name == \"html_asset\"){",
                      "    pm.test(\"Assertion that HTML Passcode were created\", function () {",
                      "        });",
                      "    }",
                      "    pm.test(\"Validate default/initial value for event_type equals other\", function () {",
                      "    pm.expect(responseData.event_type).to.be.eql(\"other\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "18644fc9-7265-4897-af8b-5821d352a008",
                    "exec": [
                      "//generate random code from 1-3",
                      "pm.environment.set(\"freemium\", 3);",
                      "/*  let rndInt = Math.floor(Math.random() * 3) + 2",
                      "    console.log(rndInt)",
                      "    pm.environment.set(\"rndControlTypeID\", rndInt);",
                      "    */",
                      "",
                      "postman.setNextRequest(\"CREATE-Positive_PRIVATE_ASSET CODE\");",
                      "postman.setNextRequest(\"ENTRY-ASSET CODE\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "b1e3d57a-e7e1-435b-9bde-e6568faca1ea",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "item_type",
                      "value": "html_asset",
                      "type": "text"
                    },
                    {
                      "key": "access_control_type_id",
                      "value": "2",
                      "type": "text"
                    },
                    {
                      "key": "title",
                      "value": "Passcode Asset",
                      "type": "text"
                    }
                  ]
                },
                "url": "https://staging-v2.inplayer.com/v2/items"
              },
              "response": []
            }
          ],
          "id": "5240af0d-b74e-485a-abe2-dedfd56d9554"
        },
        {
          "name": "Access voucher only",
          "item": [],
          "id": "d64237bb-f95f-444b-99f0-138ee5dd85f2"
        },
        {
          "name": "Passcode",
          "item": [
            {
              "name": "Authenticate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0203ce4-a058-41f4-912a-3738c2cc8b5c",
                    "exec": [
                      "let responseData = JSON.parse(responseBody);",
                      "let username = responseData.account.email;",
                      "let validate = pm.variables.get(\"realUser\")",
                      "let Order;",
                      "",
                      "",
                      "console.log(\"adding auth Token value\")",
                      "pm.environment.set(\"authToken\", responseData.access_token) // store Token into variable",
                      "",
                      "pm.test(\"Validate user is Active\", function () { // account is active",
                      "    pm.expect(responseData.account.active).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Validate Correct user is logged in\", function () {",
                      "    pm.expect(username).to.be.eql(`${validate}`)",
                      "});",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Validate email is equal to username\", function () {",
                      "    pm.expect(responseData.account.email).to.be.eql(responseData.account.username);",
                      "});",
                      "",
                      "for (let filter of responseData.account.meta){ // iteration for every value under meta array",
                      "    console.log(filter);",
                      "    if(filter.key == \"register_source\"){",
                      "        Order = filter;",
                      "        console.log(Order);",
                      "    }",
                      "}",
                      "",
                      "pm.test(\"verify key-value are correct\", function(){ // validate register source on platform is inplayer",
                      "    pm.expect(Order.key).to.eql(\"register_source\"),",
                      "    pm.expect(Order.value).to.be.eql(\"inplayer\");",
                      "});",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f3bff98c-5747-44f4-a884-dbf04f76e267",
                    "exec": [
                      "let usernamev1 = \"oliver.pinev@inplayer.com\";",
                      "",
                      "pm.environment.set(\"realUser\", usernamev1);//save username before login on platform",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "0cf1306e-8e49-4c76-be3f-98aaf5211b45",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "3b39b5ab-b5fc-4ba3-b770-73155d20e61f",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "password",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "oliver.pinev@inplayer.com",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "Password123",
                      "type": "text"
                    }
                  ]
                },
                "url": "https://{{baseUrl}}/v2/accounts/authenticate"
              },
              "response": []
            },
            {
              "name": "Create-Asset",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a49a11a-b631-4657-b888-ebeb76df30a6",
                    "exec": [
                      "let responseData = JSON.parse(responseBody);",
                      "pm.environment.set(\"itemID\", responseData.id);",
                      "    ",
                      "    if (responseData.access_control_type.id == 2 && responseData.item_type.id ==2){",
                      "    pm.test(\"Validate asset type is Code (Passcode)\", function () {",
                      "        postman.setNextRequest(\"CREATE-Positive_PRIVATE_ASSET CODE\");",
                      "        });",
                      "    }",
                      "    else{",
                      "            pm.test(\"Generated number is different than 2\", function(){",
                      "            postman.setNextRequest(\"ENTRY-ASSET CODE\");",
                      "            throw new Error(\"Generate number again\");",
                      "        });  ",
                      "",
                      "    }",
                      "    if (responseData.item_type.content_type == \"html\" && responseData.item_type.name == \"html_asset\"){",
                      "    pm.test(\"Assertion that HTML Passcode were created\", function () {",
                      "        });",
                      "    }",
                      "    pm.test(\"Validate default/initial value for event_type equals other\", function () {",
                      "    pm.expect(responseData.event_type).to.be.eql(\"other\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a22ea48b-46c4-4bf2-bd66-b20eb642b5f6",
                    "exec": [
                      "//generate random code from 1-3",
                      "let rndInt = Math.floor(Math.random() * 3) + 1",
                      "    console.log(rndInt)",
                      "    pm.environment.set(\"rndControlTypeID\", rndInt);",
                      "",
                      "postman.setNextRequest(\"CREATE-Positive_PRIVATE_ASSET CODE\");",
                      "postman.setNextRequest(\"ENTRY-ASSET CODE\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "d55ef42a-6e5e-4413-b312-6a16c455fe4e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "item_type",
                      "value": "html_asset",
                      "type": "text"
                    },
                    {
                      "key": "access_control_type_id",
                      "value": "2",
                      "type": "text"
                    },
                    {
                      "key": "title",
                      "value": "Passcode Asset",
                      "type": "text"
                    },
                    {
                      "key": "is_giftable",
                      "value": "true",
                      "type": "text"
                    },
                    {
                      "key": "gift_description",
                      "value": "\"GD test\"",
                      "type": "text"
                    }
                  ]
                },
                "url": "https://staging-v2.inplayer.com/v2/items"
              },
              "response": []
            },
            {
              "name": "CREATE-Positive_PRIVATE_ASSET CODE",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "524f0bba-5e59-43c8-b8e1-d3240b571bd9",
                    "exec": [
                      "let moment = require(`moment`);",
                      "let codeGenerator = Math.floor(Math.random() * 10000);",
                      "let negRandom = Math.floor(Math.random() *10 *(-1));",
                      "",
                      "pm.environment.set(\"currentDate\", moment().format((\"YYYY-MM-DD 00:00:00\")));",
                      "pm.environment.set(\"startDate\", \"currentDate\");",
                      "pm.environment.set(\"endDate\", moment().add(2, 'days').format((\"YYYY-MM-DD 00:00:00\")));",
                      "pm.environment.set(\"code\", \"CODE\"+codeGenerator+\"TEST\");",
                      "pm.environment.set(\"privateCode\", \"private\");",
                      "pm.environment.set(\"negativeRandom\", `${negRandom}`);",
                      "pm.environment.set(\"positiveRandom\", `${negRandom*(-1)}`);",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "9ed8161d-d60a-41cf-97f9-2e6355801b04",
                    "exec": [
                      "let responseData = JSON.parse(responseBody);",
                      "let initialCode = pm.variables.get(\"code\");",
                      "let codeUUID = responseData.id;",
                      "",
                      "",
                      "pm.environment.set(\"codeUUID\", codeUUID);",
                      "",
                      "console.log(pm.variables.get(\"positiveRandom\"))",
                      "console.log(pm.variables.get(\"negativeRandom\"));",
                      "",
                      "pm.test(\"Validate UUID format using regex\", function () {",
                      "    pm.expect(responseData.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i);",
                      "});",
                      "",
                      "pm.test(\"Assertion for creation of code\", function () {",
                      "    console.log(`${initialCode}`);",
                      "    pm.expect(responseData.code).to.eql(`${initialCode}`);",
                      "});",
                      "",
                      "    if(responseData.concurrent_sessions>=0){",
                      "        pm.test(\"Only Non-negative value for concurrent_sessions are present\", function (){",
                      "        })",
                      "    }",
                      "        else{",
                      "            pm.test(\"There is negative number for concurrent session\", function(){",
                      "            throw new Error(\"negative number inserted!\");",
                      "        });         ",
                      "}",
                      "        ",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "1b5ebbc6-8adb-499d-b81d-c9a19ed36572",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "item_id",
                      "value": "{{itemID}}",
                      "type": "text"
                    },
                    {
                      "key": "code",
                      "value": "{{code}}",
                      "type": "text"
                    },
                    {
                      "key": "start_date",
                      "value": "{{currentDate}}",
                      "type": "text"
                    },
                    {
                      "key": "end_date",
                      "value": "{{endDate}}",
                      "type": "text"
                    },
                    {
                      "key": "type",
                      "value": "{{privateCode}}",
                      "type": "text"
                    },
                    {
                      "key": "concurrent_sessions",
                      "value": "{{positiveRandom}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "https://staging-v2.inplayer.com/items/access/codes/create"
              },
              "response": []
            },
            {
              "name": "GET-ASSET CODE DETAILS",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deca60c8-c56a-48fd-b89e-99a7fb1c1973",
                    "exec": [
                      "let responseData = JSON.parse(responseBody);",
                      "let test = pm.environment.get(`code`);",
                      "const sessions = pm.variables.get(\"positiveRandom\");",
                      "let Order;",
                      "",
                      "console.log(sessions);",
                      "console.log(test);",
                      "console.log(responseData.total);",
                      "",
                      "console.log(responseData.collection.code);",
                      "",
                      "pm.test(\"Verify Collection of parameters were present\", function () {",
                      "    pm.expect(responseData.collection).not.eq(undefined);",
                      "});",
                      "",
                      "pm.test(\"codeUUID on Request is matched with codeUUID on response\", function () {",
                      "    pm.expect(responseData.active_sessions.length).to.eql(0);",
                      "});",
                      "",
                      "for (let filter of responseData.collection){ // iteration for every value under collection array",
                      "    console.log(filter);",
                      "    if(filter.code == test){",
                      "        Order = filter;",
                      "        console.log(Order);",
                      "    }",
                      "}",
                      "",
                      "pm.test(\"verify code_UUID is displayed in this response\", function(){ // validate multiple values for particular code",
                      "    pm.expect(Order.id).not.eq(undefined);",
                      "});",
                      "",
                      "pm.test(\"verify key-values are correct\", function(){ // validate multiple values for particular code",
                      "    pm.expect(Order.code).to.be.eql(test),",
                      "    console.log(\"code is correct\");",
                      "    pm.expect(Order.merchant_id).to.be.eql(51486),",
                      "    console.log(\"merchantID is correct\");",
                      "    pm.expect(Order.type).to.be.eql(\"private\"),",
                      "    console.log(\"type is correct\");",
                      "    pm.expect(Order.concurrent_sessions == sessions);",
                      "    console.log(\"sessions are correct\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "90dbb700-1531-4c46-b88f-2e226a55c0b5",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "255f8520-8966-4df8-8d47-8a0ac912a199",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "item_id",
                      "value": "88684",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "code",
                      "value": "FROMBE1",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "start_date",
                      "value": "2021-08-07 12:00:00",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "end_date",
                      "value": "2021-08-18 12:00:00",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "type",
                      "value": "private",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "concurrent_sessions",
                      "value": "-3",
                      "type": "text",
                      "disabled": true
                    }
                  ]
                },
                "url": "https://staging-v2.inplayer.com/items/access/codes/item/{{itemID}}"
              },
              "response": []
            },
            {
              "name": "ENTRY-ASSET CODE",
              "id": "49713416-b8fb-4bb9-badb-383a83203fbf",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImp0aSI6IjBlYmNlZjZlLTk5YjUtNDljMy04M2VmLWRkMTc4MzM4YmQ5YiJ9.eyJhdWQiOiIzYjM5YjVhYi1iNWZjLTRiYTMtYjc3MC03MzE1NWQyMGU2MWYiLCJqdGkiOiIwZWJjZWY2ZS05OWI1LTQ5YzMtODNlZi1kZDE3ODMzOGJkOWIiLCJpYXQiOjE2MjU3MjY0ODEsIm5iZiI6MTYyNTcyNjQ4MSwiZXhwIjoxNjI4MzIyMDgxLCJzdWIiOiJvbGl2ZXIucGluZXZAaW5wbGF5ZXIuY29tIiwic2NvcGVzIjpbXSwibWlkIjoxLCJhaWQiOjUxNDg2LCJtdWkiOiIzYjM5YjVhYi1iNWZjLTRiYTMtYjc3MC03MzE1NWQyMGU2MWYiLCJjdHgiOlsibWVyY2hhbnQiLCJtYXN0ZXIiXSwidGlkIjo1MTQ4NiwidHV1aWQiOiIwZWJjZWY2ZS05OWI1LTQ5YzMtODNlZi1kZDE3ODMzOGJkOWIiLCJvaWQiOjB9.qUk1E6vLXw3KrM0pPY2BdhrCkhD-t1DKYBGpz7rHAFk"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "item_id",
                      "value": "83349",
                      "type": "text"
                    },
                    {
                      "key": "code",
                      "value": "CODE123789%",
                      "type": "text"
                    },
                    {
                      "key": "browser_fingerprint",
                      "value": "8ccbfb5271cb62777545d6e22bb9ce7c",
                      "type": "text"
                    },
                    {
                      "key": "end_date",
                      "value": "2021-07-18 12:00:00",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "type",
                      "value": "private",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "concurrent_sessions",
                      "value": "3",
                      "type": "text",
                      "disabled": true
                    }
                  ]
                },
                "url": "https://staging-v2.inplayer.com/items/access/codes/entry"
              },
              "response": []
            },
            {
              "name": "GET-ACCESS CODE DETAILS",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "48f3b929-26e9-4616-a88a-04d61e0e5640",
                    "exec": [
                      "let responseData = JSON.parse(responseBody);",
                      "pm.test(\"Initial active_sessions to be empty\", function () {",
                      "    pm.expect(responseData.active_sessions.length).to.eql(0);",
                      "});",
                      "",
                      "pm.test(\"codeUUID on Request is matched with codeUUID on response\", function () {",
                      "    pm.expect(responseData.active_sessions.length).to.eql(0);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "da46dbf1-3eda-4b28-bdcc-6b64c7e7bcc6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "item_id",
                      "value": "88684",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "code",
                      "value": "FROMBE1",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "start_date",
                      "value": "2021-08-07 12:00:00",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "end_date",
                      "value": "2021-08-18 12:00:00",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "type",
                      "value": "private",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "concurrent_sessions",
                      "value": "-3",
                      "type": "text",
                      "disabled": true
                    }
                  ]
                },
                "url": "https://staging-v2.inplayer.com/items/access/codes"
              },
              "response": []
            },
            {
              "name": "CREATE-Negative_PRIVATE_ASSET CODE Copy",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cc9126cc-01be-4c19-b8ce-9536db31250b",
                    "exec": [
                      "let moment = require(`moment`);",
                      "let codeGenerator = Math.floor(Math.random() * 10000);",
                      "let negRandom = Math.floor(Math.random() *10 *(-1));",
                      "",
                      "pm.environment.set(\"currentDate\", moment().format((\"YYYY-MM-DD 00:00:00\")));",
                      "pm.environment.set(\"startDate\", \"currentDate\");",
                      "pm.environment.set(\"endDate\", moment().add(2, 'days').format((\"YYYY-MM-DD 00:00:00\")));",
                      "pm.environment.set(\"code\", \"CODE\"+codeGenerator+\"TEST\");",
                      "pm.environment.set(\"privateCode\", \"private\");",
                      "pm.environment.set(\"negativeRandom\", `${negRandom}`);",
                      "pm.environment.set(\"positiveRandom\", `${negRandom*(-1)}`);",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "40d6d434-e8ba-49d8-bfbe-1d41f3f70656",
                    "exec": [
                      "let responseData = JSON.parse(responseBody);",
                      "let initialCode = pm.variables.get(\"code\");",
                      "",
                      "console.log(pm.variables.get(\"positiveRandom\"))",
                      "console.log(pm.variables.get(\"negativeRandom\"));",
                      "",
                      "pm.test(\"Validate UUID format using regex\", function () {",
                      "    pm.expect(responseData.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i);",
                      "});",
                      "",
                      "pm.test(\"Assertion for creation of code\", function () {",
                      "    console.log(`${initialCode}`);",
                      "    pm.expect(responseData.code).to.eql(`${initialCode}`);",
                      "});",
                      "",
                      "    if(responseData.concurrent_sessions>=0){",
                      "        pm.test(\"Only Non-negative value for concurrent_sessions are present\", function (){",
                      "        })",
                      "    }",
                      "        else{",
                      "            pm.test(\"There is negative number for concurrent session\", function(){",
                      "            throw new Error(\"negative number inserted!\");",
                      "        });         ",
                      "}",
                      "        ",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "0b774a89-d658-46d7-a241-8f3496c53746",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImp0aSI6IjBlYmNlZjZlLTk5YjUtNDljMy04M2VmLWRkMTc4MzM4YmQ5YiJ9.eyJhdWQiOiIzYjM5YjVhYi1iNWZjLTRiYTMtYjc3MC03MzE1NWQyMGU2MWYiLCJqdGkiOiIwZWJjZWY2ZS05OWI1LTQ5YzMtODNlZi1kZDE3ODMzOGJkOWIiLCJpYXQiOjE2MjkzNzc2NjYsIm5iZiI6MTYyOTM3NzY2NiwiZXhwIjoxNjMxOTczMjY2LCJzdWIiOiJvbGl2ZXIucGluZXZAaW5wbGF5ZXIuY29tIiwic2NvcGVzIjpbXSwibWlkIjoxLCJhaWQiOjUxNDg2LCJtdWkiOiIzYjM5YjVhYi1iNWZjLTRiYTMtYjc3MC03MzE1NWQyMGU2MWYiLCJjdHgiOlsibWVyY2hhbnQiLCJtYXN0ZXIiXSwidGlkIjo1MTQ4NiwidHV1aWQiOiIwZWJjZWY2ZS05OWI1LTQ5YzMtODNlZi1kZDE3ODMzOGJkOWIiLCJvaWQiOjB9.uc8xofa40O9MZBSwSJAFG-5dG76KOle1683XMwMOT_Q"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "item_id",
                      "value": "{{itemID}}",
                      "type": "text"
                    },
                    {
                      "key": "code",
                      "value": "{{code}}",
                      "type": "text"
                    },
                    {
                      "key": "start_date",
                      "value": "{{currentDate}}",
                      "type": "text"
                    },
                    {
                      "key": "end_date",
                      "value": "{{endDate}}",
                      "type": "text"
                    },
                    {
                      "key": "type",
                      "value": "{{privateCode}}",
                      "type": "text"
                    },
                    {
                      "key": "concurrent_sessions",
                      "value": "{{negativeRandom}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "https://staging-v2.inplayer.com/items/access/codes/create"
              },
              "response": []
            },
            {
              "name": "CREATE-PUBLIC_ASSET CODE",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "45dee899-e664-4195-998a-ea1b81b36282",
                    "exec": [
                      "let moment = require(`moment`);",
                      "",
                      "pm.environment.set(\"currentDate\", moment().format((\"YYYY-MM-DD 00:00:00\")));",
                      "pm.environment.set(\"startDate\", \"currentDate\");",
                      "pm.environment.set(\"endDate\", moment().add(2, 'days').format((\"YYYY-MM-DD 00:00:00\")));",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bccbb673-fefe-443e-b0fa-8724ba63bcaa",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "82a0e4d7-ae9e-4779-975f-7ba8836fcce8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImp0aSI6IjBlYmNlZjZlLTk5YjUtNDljMy04M2VmLWRkMTc4MzM4YmQ5YiJ9.eyJhdWQiOiIzYjM5YjVhYi1iNWZjLTRiYTMtYjc3MC03MzE1NWQyMGU2MWYiLCJqdGkiOiIwZWJjZWY2ZS05OWI1LTQ5YzMtODNlZi1kZDE3ODMzOGJkOWIiLCJpYXQiOjE2MjkzNzc2NjYsIm5iZiI6MTYyOTM3NzY2NiwiZXhwIjoxNjMxOTczMjY2LCJzdWIiOiJvbGl2ZXIucGluZXZAaW5wbGF5ZXIuY29tIiwic2NvcGVzIjpbXSwibWlkIjoxLCJhaWQiOjUxNDg2LCJtdWkiOiIzYjM5YjVhYi1iNWZjLTRiYTMtYjc3MC03MzE1NWQyMGU2MWYiLCJjdHgiOlsibWVyY2hhbnQiLCJtYXN0ZXIiXSwidGlkIjo1MTQ4NiwidHV1aWQiOiIwZWJjZWY2ZS05OWI1LTQ5YzMtODNlZi1kZDE3ODMzOGJkOWIiLCJvaWQiOjB9.uc8xofa40O9MZBSwSJAFG-5dG76KOle1683XMwMOT_Q"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "item_id",
                      "value": "{{itemID}}",
                      "type": "text"
                    },
                    {
                      "key": "code",
                      "value": "{{code}}",
                      "type": "text"
                    },
                    {
                      "key": "start_date",
                      "value": "{{currentDate}}",
                      "type": "text"
                    },
                    {
                      "key": "end_date",
                      "value": "{{endDate}}",
                      "type": "text"
                    },
                    {
                      "key": "type",
                      "value": "public",
                      "type": "text"
                    },
                    {
                      "key": "concurrent_sessions",
                      "value": "-3",
                      "type": "text"
                    }
                  ]
                },
                "url": "https://staging-v2.inplayer.com/items/access/codes/create"
              },
              "response": []
            },
            {
              "name": "Bulk ACCESS CODES Upload",
              "id": "d6177473-2134-4d90-839d-eb9d6d5d3a39",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImp0aSI6IjBlYmNlZjZlLTk5YjUtNDljMy04M2VmLWRkMTc4MzM4YmQ5YiJ9.eyJhdWQiOiIzYjM5YjVhYi1iNWZjLTRiYTMtYjc3MC03MzE1NWQyMGU2MWYiLCJqdGkiOiIwZWJjZWY2ZS05OWI1LTQ5YzMtODNlZi1kZDE3ODMzOGJkOWIiLCJpYXQiOjE2Mjg0OTkwNDcsIm5iZiI6MTYyODQ5OTA0NywiZXhwIjoxNjMxMDk0NjQ3LCJzdWIiOiJvbGl2ZXIucGluZXZAaW5wbGF5ZXIuY29tIiwic2NvcGVzIjpbXSwibWlkIjoxLCJhaWQiOjUxNDg2LCJtdWkiOiIzYjM5YjVhYi1iNWZjLTRiYTMtYjc3MC03MzE1NWQyMGU2MWYiLCJjdHgiOlsibWVyY2hhbnQiLCJtYXN0ZXIiXSwidGlkIjo1MTQ4NiwidHV1aWQiOiIwZWJjZWY2ZS05OWI1LTQ5YzMtODNlZi1kZDE3ODMzOGJkOWIiLCJvaWQiOjB9.QnlPKUnHZ0AtFWXXWEl2ALUH7fYa0_7_IwFmxQWlf6I"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file_name",
                      "type": "file",
                      "src": "/Users/oliver.pinev/Downloads/access_codes_2021-08-09_12-46-53.csv"
                    },
                    {
                      "key": "merchant_uuid",
                      "value": "0ebcef6e-99b5-49c3-83ef-dd178338bd9b",
                      "type": "text"
                    },
                    {
                      "key": "merchant_id",
                      "value": "51486",
                      "type": "text"
                    }
                  ]
                },
                "url": "https://staging-v2.inplayer.com/items/access/codes/item/83922/upload"
              },
              "response": []
            },
            {
              "name": "Bulk ACCESS CODES get",
              "id": "0b16ee27-436b-47b4-8636-3b3aa5d75df5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImp0aSI6IjBlYmNlZjZlLTk5YjUtNDljMy04M2VmLWRkMTc4MzM4YmQ5YiJ9.eyJhdWQiOiIzYjM5YjVhYi1iNWZjLTRiYTMtYjc3MC03MzE1NWQyMGU2MWYiLCJqdGkiOiIwZWJjZWY2ZS05OWI1LTQ5YzMtODNlZi1kZDE3ODMzOGJkOWIiLCJpYXQiOjE2Mjg1MTQ3NjEsIm5iZiI6MTYyODUxNDc2MSwiZXhwIjoxNjMxMTEwMzYxLCJzdWIiOiJvbGl2ZXIucGluZXZAaW5wbGF5ZXIuY29tIiwic2NvcGVzIjpbXSwibWlkIjoxLCJhaWQiOjUxNDg2LCJtdWkiOiIzYjM5YjVhYi1iNWZjLTRiYTMtYjc3MC03MzE1NWQyMGU2MWYiLCJjdHgiOlsibWVyY2hhbnQiLCJtYXN0ZXIiXSwidGlkIjo1MTQ4NiwidHV1aWQiOiIwZWJjZWY2ZS05OWI1LTQ5YzMtODNlZi1kZDE3ODMzOGJkOWIiLCJvaWQiOjB9.7fy06oGEcksLeeJZUDR3nNhNTG1KIYpgnCmPtSlT4uE"
                  }
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": []
                },
                "url": "https://staging-v2.inplayer.com/items/access/codes/item/83922/signed-url"
              },
              "response": []
            },
            {
              "name": "UPDATE-ASSET CODE",
              "id": "02990038-ee7b-42c3-ab3a-b82248c302e2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImp0aSI6IjBlYmNlZjZlLTk5YjUtNDljMy04M2VmLWRkMTc4MzM4YmQ5YiJ9.eyJhdWQiOiIzYjM5YjVhYi1iNWZjLTRiYTMtYjc3MC03MzE1NWQyMGU2MWYiLCJqdGkiOiIwZWJjZWY2ZS05OWI1LTQ5YzMtODNlZi1kZDE3ODMzOGJkOWIiLCJpYXQiOjE2MjkxODU1NzgsIm5iZiI6MTYyOTE4NTU3OCwiZXhwIjoxNjMxNzgxMTc4LCJzdWIiOiJvbGl2ZXIucGluZXZAaW5wbGF5ZXIuY29tIiwic2NvcGVzIjpbXSwibWlkIjoxLCJhaWQiOjUxNDg2LCJtdWkiOiIzYjM5YjVhYi1iNWZjLTRiYTMtYjc3MC03MzE1NWQyMGU2MWYiLCJjdHgiOlsibWVyY2hhbnQiLCJtYXN0ZXIiXSwidGlkIjo1MTQ4NiwidHV1aWQiOiIwZWJjZWY2ZS05OWI1LTQ5YzMtODNlZi1kZDE3ODMzOGJkOWIiLCJvaWQiOjB9.CHl9uhJ7axrcU9357uleyC-63aKb_V9Sww3EgC8SPcE"
                  }
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "item_id",
                      "value": "88684",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "code",
                      "value": "FROMBE1",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "start_date",
                      "value": "2021-08-07 12:00:00",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "end_date",
                      "value": "2021-08-18 12:00:00",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "type",
                      "value": "private",
                      "type": "text"
                    },
                    {
                      "key": "concurrent_sessions",
                      "value": "3",
                      "type": "text"
                    }
                  ]
                },
                "url": "https://staging-v2.inplayer.com/items/access/codes/322b57ff-7046-41f7-9e4b-d6d3914c3ce9"
              },
              "response": []
            },
            {
              "name": "DELETE SESSION",
              "id": "7e530cd3-8e79-43ad-9287-5e4ddbcc35b4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImp0aSI6IjBlYmNlZjZlLTk5YjUtNDljMy04M2VmLWRkMTc4MzM4YmQ5YiJ9.eyJhdWQiOiIzYjM5YjVhYi1iNWZjLTRiYTMtYjc3MC03MzE1NWQyMGU2MWYiLCJqdGkiOiIwZWJjZWY2ZS05OWI1LTQ5YzMtODNlZi1kZDE3ODMzOGJkOWIiLCJpYXQiOjE2MjkzNzkxNjcsIm5iZiI6MTYyOTM3OTE2NywiZXhwIjoxNjMxOTc0NzY3LCJzdWIiOiJvbGl2ZXIucGluZXZAaW5wbGF5ZXIuY29tIiwic2NvcGVzIjpbXSwibWlkIjoxLCJhaWQiOjUxNDg2LCJtdWkiOiIzYjM5YjVhYi1iNWZjLTRiYTMtYjc3MC03MzE1NWQyMGU2MWYiLCJjdHgiOlsibWVyY2hhbnQiLCJtYXN0ZXIiXSwidGlkIjo1MTQ4NiwidHV1aWQiOiIwZWJjZWY2ZS05OWI1LTQ5YzMtODNlZi1kZDE3ODMzOGJkOWIiLCJvaWQiOjB9._nWQgot715lUPYMVSAKEE8hP2xTaRFzgLPQ4svOPNvs"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": "https://staging-v2.inplayer.com/items/access/codes/a3381328-25c3-433a-9e53-e79f320483cb/bbfee6623fc3d0513291070003292c36"
              },
              "response": []
            },
            {
              "name": "GET ACCESS CODES SESSIONS",
              "id": "fb446ac8-7350-42f2-8ead-3be67db3aad8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": ""
                  }
                },
                "method": "GET",
                "header": [],
                "url": "https://services.inplayer.com/items/access/codes/0936f84b9ba31eddce2b180dbae74213/sessions"
              },
              "response": []
            }
          ],
          "id": "e8bdc7b3-2efb-494d-b8bc-0599a8347f4e"
        }
      ],
      "id": "24ce1ca1-e3da-413c-b1db-98f51526cb76",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "377d28a7-aefa-4236-a683-3157098826fa",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "d27daf06-eeaa-4542-80fc-fa3ed3860cda",
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Successfull POST Request\", function (){",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "PAYMENTS",
      "item": [
        {
          "name": "Credit Card Payment",
          "item": [
            {
              "name": "Register Fan Account",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a734ad18-b720-4727-9d58-78163158fa36",
                    "exec": [
                      "console.log(\"This is a pre request script for Creating Account\");",
                      "pm.environment.set(\"password\", \"Password123\");",
                      "pm.environment.set(\"clientID\", \"f6be7cea-5dd3-4362-927d-f10ba859819c\")",
                      "let randomNumber = Math.floor(Math.random() * 10000);",
                      "pm.environment.set(\"CreateAccountEmail\", \"oliver.pinev+\"+`${randomNumber}`+\"@inplayer.com\");",
                      "pm.environment.set(\"CreateAccFullName\", \"Oliver Pinev\" + \" \"+`${randomNumber}`);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "da01ab3a-f674-4847-9d3c-6a06c485e0af",
                    "exec": [
                      "console.log(\"-----Executing Finished-----\");",
                      "var responseData = JSON.parse(responseBody);",
                      "console.log(\"adding auth Token value\")",
                      "pm.environment.set(\"authToken\", responseData.access_token);",
                      "pm.environment.set(\"formatedAuthToken\", \"Bearer \"+responseData.access_token);",
                      "pm.environment.set(\"consumerID\", responseData.account.id);",
                      "pm.test(\"Successfull POST Request\", function (){",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "2e9c7b52-4cbf-44ac-a961-d1e2429a0bbd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "full_name",
                      "value": "{{CreateAccFullName}}",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "{{CreateAccountEmail}}",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}",
                      "type": "text"
                    },
                    {
                      "key": "password_confirmation",
                      "value": "{{password}}",
                      "type": "text"
                    },
                    {
                      "key": "type",
                      "value": "consumer",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "password",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "{{clientID}}",
                      "type": "text",
                      "description": "oliver.pinev+connected@email.com"
                    },
                    {
                      "key": "metadata[phone]",
                      "value": "",
                      "type": "text"
                    },
                    {
                      "key": "metadata[datePicker]",
                      "value": "2021-09-17",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{baseUrl}}/v2/accounts"
              },
              "response": []
            },
            {
              "name": "Authenticate/Login with Fan",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96a4fea9-90db-4249-86c3-c679da604653",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var responseData = JSON.parse(responseBody);",
                      "pm.environment.set(\"Fan_Token\", responseData.access_token)"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "658f47ad-491a-41e3-b005-5cf5a1ad73b8",
                    "exec": [
                      "console.log(\"-----Executing Authenticate POST Request-----\");",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "f55987da-5bf6-4b64-a01e-8bd4855cf1b4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "username",
                      "value": "{{CreateAccountEmail}}",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "password",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "{{clientID}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{baseUrl}}/v2/accounts/authenticate"
              },
              "response": []
            },
            {
              "name": "Authenticate/Login with Merchant",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e8c7f05-c0a1-44bc-8da4-b0766f940e70",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var responseData = JSON.parse(responseBody);",
                      "pm.environment.set(\"formatedAuthToken1stLogin\", \"Bearer \"+responseData.access_token);",
                      "",
                      "pm.environment.set(\"Merchant_Token\", responseData.access_token)",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "af8e932a-cd93-47fd-a8c0-d81ba54f2366",
                    "exec": [
                      "console.log(\"-----Executing Authenticate POST Request-----\");",
                      "",
                      "pm.environment.set(\"MerchantUser\", \"oliver.pinev+connected@email.com\")",
                      "pm.environment.set(\"SystemInPlayerAcc\", \"3b39b5ab-b5fc-4ba3-b770-73155d20e61f\" )"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "cc01afd9-e1fe-4f77-8274-b4763b7a5eb5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "username",
                      "value": "{{MerchantUser}}",
                      "type": "text",
                      "description": "oliver.pinev+connected@email.com"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "password",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "{{SystemInPlayerAcc}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{baseUrl}}/v2/accounts/authenticate"
              },
              "response": []
            },
            {
              "name": "GET all items",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7129396a-779c-4828-8486-d994852b0aa1",
                    "exec": [
                      "let responseData = pm.response.json();",
                      "let counter = responseData.collection.length;",
                      "console.log(counter)",
                      "let var1 = responseData.collection[0].id;",
                      "console.log(var1)",
                      "",
                      "pm.environment.set(\"latestItem\", responseData.collection[0].id)",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "e95ad25b-aab8-4ef3-acae-a5410ed777d2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{Merchant_Token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": []
                },
                "url": {
                  "raw": "https://staging-v2.inplayer.com/items/collection?page=1&limit=15&is_active=true",
                  "protocol": "https",
                  "host": [
                    "staging-v2",
                    "inplayer",
                    "com"
                  ],
                  "path": [
                    "items",
                    "collection"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "15"
                    },
                    {
                      "key": "is_active",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "POST PPV Access Fee for PAYMENT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be7dbe5-58e0-43e5-9447-86f9cb407638",
                    "exec": [
                      "let responseData = pm.response.json();",
                      "",
                      "pm.environment.set(\"PAYMENTS_feeID\", responseData.id)"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6fd21746-5974-4475-b478-359c1f280fc4",
                    "exec": [
                      "let rndInt = Math.floor(Math.random() * 8) + 2",
                      "",
                      "",
                      "pm.environment.set(\"priceForPayment\", rndInt);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "a5357418-a8ea-4135-adcb-af03fe8b3710",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Merchant_Token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "access_type_id",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "amount",
                      "value": "{{priceForPayment}}",
                      "type": "text"
                    },
                    {
                      "key": "currency",
                      "value": "EUR",
                      "type": "text"
                    },
                    {
                      "key": "description",
                      "value": "test fee for payments",
                      "type": "text"
                    },
                    {
                      "key": "trial_period_quantity",
                      "value": "",
                      "type": "text"
                    },
                    {
                      "key": "trial_period_period",
                      "value": "",
                      "type": "text"
                    },
                    {
                      "key": "trial_period_description",
                      "value": "",
                      "type": "text"
                    }
                  ]
                },
                "url": "https://{{baseUrl}}/v2/items/{{latestItem}}/access-fees"
              },
              "response": []
            },
            {
              "name": "GET access for particular item",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1c80264-6f0c-4107-bea4-fe6f89e46cad",
                    "exec": [
                      "let responseData = pm.response.json()",
                      "",
                      "console.log(\"this is just a validation that the given user doesnt have an access before he purchase the asset\")",
                      "",
                      "pm.test(`Status code is ${responseData.code} but its ok, since we need to ensure the Fan doesn't ahve access for this asset`, function () {",
                      "    pm.response.to.have.status(402);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "973fba67-686f-4850-95a1-e8da7dfb48e6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Fan_Token}}"
                  }
                },
                "method": "GET",
                "header": [],
                "url": "https://staging-v2.inplayer.com/items/{{latestItem}}/access"
              },
              "response": []
            },
            {
              "name": "Purchase PPV",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c191a40-ae11-4dde-8ada-ffccf8d55797",
                    "exec": [
                      "let responseData = pm.response.json();",
                      "",
                      "if(responseData.message == \"Submitted for payment\")",
                      "{",
                      "    setTimeout(function(){",
                      "        console.log(\"Sleeping for 7 seconds before next request.\");",
                      "    }, 7000);",
                      "",
                      "    postman.setNextRequest(\"GET access for particular item after wait\");",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "00620ab4-3d51-4449-ba49-ece992afdb1b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Fan_Token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "access_fee",
                      "value": "{{PAYMENTS_feeID}}",
                      "type": "text"
                    },
                    {
                      "key": "payment_method",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "number",
                      "value": "4242424242424242",
                      "type": "text"
                    },
                    {
                      "key": "cvv",
                      "value": "123",
                      "type": "text"
                    },
                    {
                      "key": "exp_month",
                      "value": "11",
                      "type": "text"
                    },
                    {
                      "key": "exp_year",
                      "value": "22",
                      "type": "text"
                    },
                    {
                      "key": "card_name",
                      "value": "api card",
                      "type": "text"
                    },
                    {
                      "key": "-d voucher_code=F00B4R!@",
                      "value": "",
                      "type": "text",
                      "disabled": true
                    }
                  ]
                },
                "url": "https://{{baseUrl}}/payments"
              },
              "response": []
            },
            {
              "name": "GET access for particular item after wait",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4bce27e5-6923-43b2-ae15-5c73dbf6eb4c",
                    "exec": [
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "1e9ea330-3f8c-4ae5-9df3-659f3389c0e3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Fan_Token}}"
                  }
                },
                "method": "GET",
                "header": [],
                "url": "https://staging-v2.inplayer.com/items/{{latestItem}}/access"
              },
              "response": []
            },
            {
              "name": "Get Access Fees for Previous Item",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40d7a8e1-5032-4293-af8d-7665f01e9d4f",
                    "exec": [
                      "let responseData = pm.response.json()",
                      "let responseData1 = pm.response.json()",
                      "",
                      "if(responseData.length){",
                      "    pm.test(\"array is empty next Request will be Requested\", function () {",
                      "",
                      "    });",
                      "",
                      "}else{",
                      "    //let var1 = responseData1.collection[0].id;",
                      "   // console.log(var1)",
                      "    pm.test(\"else statement\", function () {",
                      "        throw new Error(\"this item doesn't have Fee\")",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "12d02ba0-32c0-486a-b6c2-c06f625f9ef3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "https://staging-v2.inplayer.com/v2/items/105648/access-fees"
              },
              "response": []
            }
          ],
          "id": "e14492d5-fa97-470a-b8ca-4fb7d439cd4f"
        },
        {
          "name": "Credit Card + DC",
          "item": [
            {
              "name": "Register Fan Account Copy",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1584bc9f-74bd-4e8d-8ae9-a69ff8d12de6",
                    "exec": [
                      "console.log(\"This is a pre request script for Creating Account\");",
                      "pm.environment.set(\"password\", \"Password123\");",
                      "pm.environment.set(\"clientID\", \"f6be7cea-5dd3-4362-927d-f10ba859819c\")",
                      "let randomNumber = Math.floor(Math.random() * 10000);",
                      "pm.environment.set(\"CreateAccountEmail\", \"oliver.pinev+\"+`${randomNumber}`+\"@inplayer.com\");",
                      "pm.environment.set(\"CreateAccFullName\", \"Oliver Pinev\" + \" \"+`${randomNumber}`);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d48e48a1-85a2-4f08-a44a-46430e4485db",
                    "exec": [
                      "console.log(\"-----Executing Finished-----\");",
                      "var responseData = JSON.parse(responseBody);",
                      "console.log(\"adding auth Token value\")",
                      "pm.environment.set(\"authToken\", responseData.access_token);",
                      "pm.environment.set(\"formatedAuthToken\", \"Bearer \"+responseData.access_token);",
                      "pm.environment.set(\"consumerID\", responseData.account.id);",
                      "pm.test(\"Successfull POST Request\", function (){",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "e2e9c804-a9ca-457f-8060-f9b90104711a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "full_name",
                      "value": "{{CreateAccFullName}}",
                      "type": "text"
                    },
                    {
                      "key": "username",
                      "value": "{{CreateAccountEmail}}",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}",
                      "type": "text"
                    },
                    {
                      "key": "password_confirmation",
                      "value": "{{password}}",
                      "type": "text"
                    },
                    {
                      "key": "type",
                      "value": "consumer",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "password",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "{{clientID}}",
                      "type": "text",
                      "description": "oliver.pinev+connected@email.com"
                    },
                    {
                      "key": "metadata[phone]",
                      "value": "",
                      "type": "text"
                    },
                    {
                      "key": "metadata[datePicker]",
                      "value": "2021-09-17",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{baseUrl}}/v2/accounts"
              },
              "response": []
            },
            {
              "name": "Authenticate/Login with Fan Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1257b306-21a5-43c8-bc89-fa5d1dfb1686",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var responseData = JSON.parse(responseBody);",
                      "pm.environment.set(\"Fan_Token\", responseData.access_token)"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c6c3979a-21cb-4871-a4ff-30fcc17607ad",
                    "exec": [
                      "console.log(\"-----Executing Authenticate POST Request-----\");",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "f33795ab-68fb-42dc-bc85-d27d7e95647d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "username",
                      "value": "{{CreateAccountEmail}}",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "password",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "{{clientID}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{baseUrl}}/v2/accounts/authenticate"
              },
              "response": []
            },
            {
              "name": "Authenticate/Login with Merchant Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c55f6e32-a3cb-4b72-a6ca-67fef28713ed",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var responseData = JSON.parse(responseBody);",
                      "pm.environment.set(\"formatedAuthToken1stLogin\", \"Bearer \"+responseData.access_token);",
                      "",
                      "pm.environment.set(\"Merchant_Token\", responseData.access_token)"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c71fc924-0901-4cf4-82e7-db9a6bfd129c",
                    "exec": [
                      "console.log(\"-----Executing Authenticate POST Request-----\");",
                      "",
                      "pm.environment.set(\"MerchantUser\", \"oliver.pinev+connected@email.com\")",
                      "pm.environment.set(\"SystemInPlayerAcc\", \"3b39b5ab-b5fc-4ba3-b770-73155d20e61f\" )"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "a096d286-40bc-4995-af6e-b6b26a0d359a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "username",
                      "value": "{{MerchantUser}}",
                      "type": "text",
                      "description": "oliver.pinev+connected@email.com"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "password",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "{{SystemInPlayerAcc}}",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{baseUrl}}/v2/accounts/authenticate"
              },
              "response": []
            },
            {
              "name": "GET all items Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c4fefc4-a7ed-41ae-9543-8969f64d8391",
                    "exec": [
                      "let responseData = pm.response.json();",
                      "let counter = responseData.collection.length;",
                      "console.log(counter)",
                      "let var1 = responseData.collection[0].id;",
                      "console.log(var1)",
                      "",
                      "pm.environment.set(\"latestItem\", responseData.collection[0].id)",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "31ba82b6-bed5-4886-9784-50927e995b57",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{Merchant_Token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": []
                },
                "url": {
                  "raw": "https://staging-v2.inplayer.com/items/collection?page=1&limit=15&is_active=true",
                  "protocol": "https",
                  "host": [
                    "staging-v2",
                    "inplayer",
                    "com"
                  ],
                  "path": [
                    "items",
                    "collection"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "15"
                    },
                    {
                      "key": "is_active",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "POST PPV Access Fee for PAYMENT Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dfecfcb6-4125-4ee3-81f8-e9ec35bc97df",
                    "exec": [
                      "let responseData = pm.response.json();",
                      "",
                      "pm.environment.set(\"PAYMENTS_feeID\", responseData.id)"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1a74e5de-2efc-4711-a653-bad25eb32a5a",
                    "exec": [
                      "let rndInt = Math.floor(Math.random() * 8) + 2",
                      "",
                      "",
                      "pm.environment.set(\"priceForPayment\", rndInt);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "5d735165-c9af-4e59-a939-5256a92c38e9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Merchant_Token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "access_type_id",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "amount",
                      "value": "{{priceForPayment}}",
                      "type": "text"
                    },
                    {
                      "key": "currency",
                      "value": "EUR",
                      "type": "text"
                    },
                    {
                      "key": "description",
                      "value": "test fee for payments",
                      "type": "text"
                    },
                    {
                      "key": "trial_period_quantity",
                      "value": "",
                      "type": "text"
                    },
                    {
                      "key": "trial_period_period",
                      "value": "",
                      "type": "text"
                    },
                    {
                      "key": "trial_period_description",
                      "value": "",
                      "type": "text"
                    }
                  ]
                },
                "url": "https://{{baseUrl}}/v2/items/{{latestItem}}/access-fees"
              },
              "response": []
            },
            {
              "name": "New Request",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "342ed33c-f18d-40cd-9a22-5c221d154aee",
                    "exec": [
                      "let moment = require(`moment`); // momentJS library",
                      "let jquery = require('jQuery');",
                      "let randomNumber = Math.floor(Math.random() * 100);",
                      "pm.environment.set(\"discountVoucher\", `${randomNumber}`);",
                      "",
                      "let moment = require(`moment`);",
                      "let codeGenerator = Math.floor(Math.random() * 10000);",
                      "let negRandom = Math.floor(Math.random() *10 *(-1));",
                      "",
                      "pm.environment.set(\"currentDate\", moment().format((\"YYYY-MM-DD 00:00:00\")));",
                      "pm.environment.set(\"startDate\", \"currentDate\");",
                      "pm.environment.set(\"endDate\", moment().add(2, 'days').format((\"YYYY-MM-DD 00:00:00\")));",
                      "pm.environment.set(\"code\", \"CODE\"+codeGenerator+\"TEST\");",
                      "pm.environment.set(\"privateCode\", \"private\");",
                      "pm.environment.set(\"negativeRandom\", `${negRandom}`);",
                      "pm.environment.set(\"positiveRandom\", `${negRandom*(-1)}`);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "66af89c0-542c-4ac5-99ef-3eff99a7a76d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": []
                },
                "url": {
                  "raw": "https://{{baseUrl}}/vouchers?-d name%3D'Voucher title' \\=&-d length%3D7 \\=&-d perfix%3DAB17 \\=&-d perfix%3DBA17 \\=&-d discount%3D30 \\=&-d start_date%3D2017-01-10 \\=&-d end_date%3D2017-03-12 \\=&-d usage_limit%3D50=",
                  "protocol": "https",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "vouchers"
                  ],
                  "query": [
                    {
                      "key": "-d name%3D'Voucher title' \\",
                      "value": ""
                    },
                    {
                      "key": "-d length%3D7 \\",
                      "value": ""
                    },
                    {
                      "key": "-d perfix%3DAB17 \\",
                      "value": ""
                    },
                    {
                      "key": "-d perfix%3DBA17 \\",
                      "value": ""
                    },
                    {
                      "key": "-d discount%3D30 \\",
                      "value": ""
                    },
                    {
                      "key": "-d start_date%3D2017-01-10 \\",
                      "value": ""
                    },
                    {
                      "key": "-d end_date%3D2017-03-12 \\",
                      "value": ""
                    },
                    {
                      "key": "-d usage_limit%3D50",
                      "value": ""
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "4df24e6a-29d7-4d3b-a901-eaa4554ff1cd"
        }
      ],
      "id": "a0ef51e6-1ece-4042-a9cb-b3f0cdc20903",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "796bdd82-2af4-4674-bee9-4c5abaf51ac7",
            "type": "text/javascript",
            "exec": [
              "pm.environment.get(\"latestItem\")"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "908fc030-47aa-44e6-9468-2c3babd0a739",
            "type": "text/javascript",
            "exec": [
              "if (pm.info.requestName != \"GET access for particular item\"){",
              "pm.test(\"Successfull POST Request\", function (){",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
              "});",
              "}"
            ]
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "7eabd88c-ec8d-41c5-8227-33aee39ae0ea",
        "type": "text/javascript",
        "exec": [
          "utils = {",
          "    formatFunction: function round(value, exp){",
          "        if (typeof exp === 'undefined' || +exp === 0)",
          "    return Math.round(value);",
          "",
          "  value = +value;",
          "  exp = +exp;",
          "",
          "  if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0))",
          "    return NaN;",
          "",
          "  // Shift",
          "  value = value.toString().split('e');",
          "  value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp)));",
          "",
          "  // Shift back",
          "  value = value.toString().split('e');",
          "  return +(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp));",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "fc497946-ee3e-4861-8a94-2e5e3128ebbe",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "f953cdf1-d9c6-4dde-bdb3-c932a43b3624",
      "key": "mp_UserName_SanitySeason",
      "value": ""
    },
    {
      "id": "f985d920-4a18-4ac5-bedd-0040d512afd0",
      "key": "clientId01_SanitySeason",
      "value": ""
    },
    {
      "id": "0300aed8-123f-42ec-900e-a70d18d92d95",
      "key": "mp_AccessToken_SanitySeason",
      "value": ""
    },
    {
      "id": "e3866447-159d-427d-8d2f-279a63fefbda",
      "key": "merchantId_SanitySeason",
      "value": ""
    },
    {
      "id": "34aa199f-af64-4c34-a0bf-0935ae5ace0a",
      "key": "itemTitle_SanitySeason",
      "value": ""
    },
    {
      "id": "b5e8970c-35db-4513-951d-5947c780c7c9",
      "key": "itemId_SanitySeason",
      "value": ""
    },
    {
      "id": "8fb92d0e-7c55-4e0a-aa3b-df6bdf0a7fee",
      "key": "accessType_SanitySeason",
      "value": ""
    },
    {
      "id": "93e49be4-3928-434c-a4b0-37e3d8a3ad53",
      "key": "accessFeeAmount_SanitySeason",
      "value": ""
    },
    {
      "id": "8d28dfd5-1ce9-4c30-8b4d-85feb16828ae",
      "key": "seasonFeeAmount_SanitySeason",
      "value": ""
    },
    {
      "id": "ff3b1216-bea1-4e0b-97ed-aa0448bf8942",
      "key": "seasonStartsAt_SanitySeason",
      "value": ""
    },
    {
      "id": "bf6f870d-692e-48a6-9fde-25579970692b",
      "key": "seasonExpiresAt_SanitySeason",
      "value": ""
    },
    {
      "id": "330ee06f-6ecf-4ddb-bc11-6f1c7e8b532e",
      "key": "seasonAnchorDate_SanitySeason",
      "value": ""
    },
    {
      "id": "3642b5ee-d205-4b2e-a873-7cf5e284bb03",
      "key": "accessFeeId_SanitySeason",
      "value": ""
    },
    {
      "id": "acf17996-ada5-46dc-992e-6e0fad026ab8",
      "key": "refundAmount_SanitySeason",
      "value": ""
    },
    {
      "id": "4fe00692-4029-4003-a151-d182336c4684",
      "key": "refundSeasonAmount_SanitySeason",
      "value": ""
    }
  ]
}